/* Includes */
#include "main.h"
#include "usart.h"
#include "gpio.h"
#include "stdio.h"

/*AJOUT code*/
//#include "stm32l4xx_hal.h" //Delay
//#include "stm32l4xx_hal_gpio.h"
//#include "stm32l4xx_hal_gpio_ex.h"
//#include "stm32l4xx_hal_uart.h"

//#include <string.h>
/* Variable statique */
//static GPIO_InitTypeDef init ;//variable de ce type pour l’initialisation
/*FIN ajout de code*/
/* Private macro */
#define MAJOR 3 //Major Version Number
#define MINOR 3 //Minor Version Number


/* Private variables */

//UART_HandleTypeDef huart1;
//UART_HandleTypeDef huart2;
//UART_InitTypeDef huart1;
 /* USER CODE BEGIN PV */
 const uint8_t BL_Version[2] = {MAJOR, MINOR};
/* Private function prototypes */
/* Private functions */
 void SystemClock_Config(void);
 static void goto_application(void);


/**
**===========================================================================
**
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
  //int i = 0;

  /**
  *  IMPORTANT NOTE!
  *  The symbol VECT_TAB_SRAM needs to be defined when building the project
  *  if code has been located to RAM and interrupts are used. 
  *  Otherwise the interrupt table located in flash will be used.
  *  See also the <system_*.c> file and how the SystemInit() function updates 
  *  SCB->VTOR register.  
  *  E.g.  SCB->VTOR = 0x20000000;  
  */

  /* TODO - Add your application code here */
  /* TODO - Add your application code here */
     HAL_Init(); //Initialisation comme ma prise en compte des fonctions comme le Delay.
     SystemClock_Config();

     CV_GPIO_Init();
     CV_fputc_USART1_UART_Init();


         //ajout
         printf("Starting Bootloader (%d.%d)\n ", BL_Version[0],BL_Version[1]);
         HAL_GPIO_WritePin( GPIOA, GPIO_PIN_5, GPIO_PIN_SET); //Green LED ON
         HAL_Delay(3000); //9 Seconds Delay

         //char cartInit[30] = "carte INIT";
         //HAL_UART_Transmit(&huart1, (uint8_t *)cartInit, strlen(cartInit), HAL_MAX_DELAY);

         //goto_application();

  /* Infinite loop */
  while (1)
  {

  }
}


/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}



#ifdef __GNUC__
/*with GCC small printf (option LD Linket->Library->Small printf set to 'Yes')
 * calls __io_putchar */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /*__GNUC__*/
{
	/*Pace your implementation of fputc here*/
	/* e.g. write a character to the UART3 and loop until the end of transmission*/
	//HAL_UART_Transmit(&huart1, (unint8_t *)&ch, 1, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart1,(uint8_t *)&ch, 1, HAL_MAX_DELAY);

	//HAL_UART_Transmit(&huart1, (uint8_t *)rxBuffer, strlen(rxBuffer), 500);

	return ch;
}



static void goto_application(void)
{
  printf("Gonna Jump to Application\n");
  HAL_Delay(2000);
  HAL_GPIO_WritePin( GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //Green LED OFF
  printf("calling application\n");
  HAL_Delay(2000);

  void (*app_reset_handler) (void) = (void(*)(void)) (*(volatile uint32_t*) (0x08020000 + 4));
  __set_MSP( ( *(volatile uint32_t*) 0x08020000));

  app_reset_handler();//call the app reset handler


}





void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */


