
application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039e0  080200c0  080200c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08023aa0  08023aa0  00013aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023bcc  08023bcc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08023bcc  08023bcc  00013bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023bd4  08023bd4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023bd4  08023bd4  00013bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023bd8  08023bd8  00013bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08023bdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000070  08023c4c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08023c4c  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afd7  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b09  00000000  00000000  0002b06f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  0002cb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f0  00000000  00000000  0002d320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015697  00000000  00000000  0002da10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a537  00000000  00000000  000430a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ebeb  00000000  00000000  0004d5de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cc1c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002170  00000000  00000000  000cc21c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080200c0 <__do_global_dtors_aux>:
 80200c0:	b510      	push	{r4, lr}
 80200c2:	4c06      	ldr	r4, [pc, #24]	; (80200dc <__do_global_dtors_aux+0x1c>)
 80200c4:	7823      	ldrb	r3, [r4, #0]
 80200c6:	2b00      	cmp	r3, #0
 80200c8:	d107      	bne.n	80200da <__do_global_dtors_aux+0x1a>
 80200ca:	4b05      	ldr	r3, [pc, #20]	; (80200e0 <__do_global_dtors_aux+0x20>)
 80200cc:	2b00      	cmp	r3, #0
 80200ce:	d002      	beq.n	80200d6 <__do_global_dtors_aux+0x16>
 80200d0:	4804      	ldr	r0, [pc, #16]	; (80200e4 <__do_global_dtors_aux+0x24>)
 80200d2:	e000      	b.n	80200d6 <__do_global_dtors_aux+0x16>
 80200d4:	bf00      	nop
 80200d6:	2301      	movs	r3, #1
 80200d8:	7023      	strb	r3, [r4, #0]
 80200da:	bd10      	pop	{r4, pc}
 80200dc:	20000070 	.word	0x20000070
 80200e0:	00000000 	.word	0x00000000
 80200e4:	08023a88 	.word	0x08023a88

080200e8 <frame_dummy>:
 80200e8:	4b04      	ldr	r3, [pc, #16]	; (80200fc <frame_dummy+0x14>)
 80200ea:	b510      	push	{r4, lr}
 80200ec:	2b00      	cmp	r3, #0
 80200ee:	d003      	beq.n	80200f8 <frame_dummy+0x10>
 80200f0:	4903      	ldr	r1, [pc, #12]	; (8020100 <frame_dummy+0x18>)
 80200f2:	4804      	ldr	r0, [pc, #16]	; (8020104 <frame_dummy+0x1c>)
 80200f4:	e000      	b.n	80200f8 <frame_dummy+0x10>
 80200f6:	bf00      	nop
 80200f8:	bd10      	pop	{r4, pc}
 80200fa:	46c0      	nop			; (mov r8, r8)
 80200fc:	00000000 	.word	0x00000000
 8020100:	20000074 	.word	0x20000074
 8020104:	08023a88 	.word	0x08023a88

08020108 <__gnu_thumb1_case_shi>:
 8020108:	b403      	push	{r0, r1}
 802010a:	4671      	mov	r1, lr
 802010c:	0849      	lsrs	r1, r1, #1
 802010e:	0040      	lsls	r0, r0, #1
 8020110:	0049      	lsls	r1, r1, #1
 8020112:	5e09      	ldrsh	r1, [r1, r0]
 8020114:	0049      	lsls	r1, r1, #1
 8020116:	448e      	add	lr, r1
 8020118:	bc03      	pop	{r0, r1}
 802011a:	4770      	bx	lr

0802011c <__udivsi3>:
 802011c:	2200      	movs	r2, #0
 802011e:	0843      	lsrs	r3, r0, #1
 8020120:	428b      	cmp	r3, r1
 8020122:	d374      	bcc.n	802020e <__udivsi3+0xf2>
 8020124:	0903      	lsrs	r3, r0, #4
 8020126:	428b      	cmp	r3, r1
 8020128:	d35f      	bcc.n	80201ea <__udivsi3+0xce>
 802012a:	0a03      	lsrs	r3, r0, #8
 802012c:	428b      	cmp	r3, r1
 802012e:	d344      	bcc.n	80201ba <__udivsi3+0x9e>
 8020130:	0b03      	lsrs	r3, r0, #12
 8020132:	428b      	cmp	r3, r1
 8020134:	d328      	bcc.n	8020188 <__udivsi3+0x6c>
 8020136:	0c03      	lsrs	r3, r0, #16
 8020138:	428b      	cmp	r3, r1
 802013a:	d30d      	bcc.n	8020158 <__udivsi3+0x3c>
 802013c:	22ff      	movs	r2, #255	; 0xff
 802013e:	0209      	lsls	r1, r1, #8
 8020140:	ba12      	rev	r2, r2
 8020142:	0c03      	lsrs	r3, r0, #16
 8020144:	428b      	cmp	r3, r1
 8020146:	d302      	bcc.n	802014e <__udivsi3+0x32>
 8020148:	1212      	asrs	r2, r2, #8
 802014a:	0209      	lsls	r1, r1, #8
 802014c:	d065      	beq.n	802021a <__udivsi3+0xfe>
 802014e:	0b03      	lsrs	r3, r0, #12
 8020150:	428b      	cmp	r3, r1
 8020152:	d319      	bcc.n	8020188 <__udivsi3+0x6c>
 8020154:	e000      	b.n	8020158 <__udivsi3+0x3c>
 8020156:	0a09      	lsrs	r1, r1, #8
 8020158:	0bc3      	lsrs	r3, r0, #15
 802015a:	428b      	cmp	r3, r1
 802015c:	d301      	bcc.n	8020162 <__udivsi3+0x46>
 802015e:	03cb      	lsls	r3, r1, #15
 8020160:	1ac0      	subs	r0, r0, r3
 8020162:	4152      	adcs	r2, r2
 8020164:	0b83      	lsrs	r3, r0, #14
 8020166:	428b      	cmp	r3, r1
 8020168:	d301      	bcc.n	802016e <__udivsi3+0x52>
 802016a:	038b      	lsls	r3, r1, #14
 802016c:	1ac0      	subs	r0, r0, r3
 802016e:	4152      	adcs	r2, r2
 8020170:	0b43      	lsrs	r3, r0, #13
 8020172:	428b      	cmp	r3, r1
 8020174:	d301      	bcc.n	802017a <__udivsi3+0x5e>
 8020176:	034b      	lsls	r3, r1, #13
 8020178:	1ac0      	subs	r0, r0, r3
 802017a:	4152      	adcs	r2, r2
 802017c:	0b03      	lsrs	r3, r0, #12
 802017e:	428b      	cmp	r3, r1
 8020180:	d301      	bcc.n	8020186 <__udivsi3+0x6a>
 8020182:	030b      	lsls	r3, r1, #12
 8020184:	1ac0      	subs	r0, r0, r3
 8020186:	4152      	adcs	r2, r2
 8020188:	0ac3      	lsrs	r3, r0, #11
 802018a:	428b      	cmp	r3, r1
 802018c:	d301      	bcc.n	8020192 <__udivsi3+0x76>
 802018e:	02cb      	lsls	r3, r1, #11
 8020190:	1ac0      	subs	r0, r0, r3
 8020192:	4152      	adcs	r2, r2
 8020194:	0a83      	lsrs	r3, r0, #10
 8020196:	428b      	cmp	r3, r1
 8020198:	d301      	bcc.n	802019e <__udivsi3+0x82>
 802019a:	028b      	lsls	r3, r1, #10
 802019c:	1ac0      	subs	r0, r0, r3
 802019e:	4152      	adcs	r2, r2
 80201a0:	0a43      	lsrs	r3, r0, #9
 80201a2:	428b      	cmp	r3, r1
 80201a4:	d301      	bcc.n	80201aa <__udivsi3+0x8e>
 80201a6:	024b      	lsls	r3, r1, #9
 80201a8:	1ac0      	subs	r0, r0, r3
 80201aa:	4152      	adcs	r2, r2
 80201ac:	0a03      	lsrs	r3, r0, #8
 80201ae:	428b      	cmp	r3, r1
 80201b0:	d301      	bcc.n	80201b6 <__udivsi3+0x9a>
 80201b2:	020b      	lsls	r3, r1, #8
 80201b4:	1ac0      	subs	r0, r0, r3
 80201b6:	4152      	adcs	r2, r2
 80201b8:	d2cd      	bcs.n	8020156 <__udivsi3+0x3a>
 80201ba:	09c3      	lsrs	r3, r0, #7
 80201bc:	428b      	cmp	r3, r1
 80201be:	d301      	bcc.n	80201c4 <__udivsi3+0xa8>
 80201c0:	01cb      	lsls	r3, r1, #7
 80201c2:	1ac0      	subs	r0, r0, r3
 80201c4:	4152      	adcs	r2, r2
 80201c6:	0983      	lsrs	r3, r0, #6
 80201c8:	428b      	cmp	r3, r1
 80201ca:	d301      	bcc.n	80201d0 <__udivsi3+0xb4>
 80201cc:	018b      	lsls	r3, r1, #6
 80201ce:	1ac0      	subs	r0, r0, r3
 80201d0:	4152      	adcs	r2, r2
 80201d2:	0943      	lsrs	r3, r0, #5
 80201d4:	428b      	cmp	r3, r1
 80201d6:	d301      	bcc.n	80201dc <__udivsi3+0xc0>
 80201d8:	014b      	lsls	r3, r1, #5
 80201da:	1ac0      	subs	r0, r0, r3
 80201dc:	4152      	adcs	r2, r2
 80201de:	0903      	lsrs	r3, r0, #4
 80201e0:	428b      	cmp	r3, r1
 80201e2:	d301      	bcc.n	80201e8 <__udivsi3+0xcc>
 80201e4:	010b      	lsls	r3, r1, #4
 80201e6:	1ac0      	subs	r0, r0, r3
 80201e8:	4152      	adcs	r2, r2
 80201ea:	08c3      	lsrs	r3, r0, #3
 80201ec:	428b      	cmp	r3, r1
 80201ee:	d301      	bcc.n	80201f4 <__udivsi3+0xd8>
 80201f0:	00cb      	lsls	r3, r1, #3
 80201f2:	1ac0      	subs	r0, r0, r3
 80201f4:	4152      	adcs	r2, r2
 80201f6:	0883      	lsrs	r3, r0, #2
 80201f8:	428b      	cmp	r3, r1
 80201fa:	d301      	bcc.n	8020200 <__udivsi3+0xe4>
 80201fc:	008b      	lsls	r3, r1, #2
 80201fe:	1ac0      	subs	r0, r0, r3
 8020200:	4152      	adcs	r2, r2
 8020202:	0843      	lsrs	r3, r0, #1
 8020204:	428b      	cmp	r3, r1
 8020206:	d301      	bcc.n	802020c <__udivsi3+0xf0>
 8020208:	004b      	lsls	r3, r1, #1
 802020a:	1ac0      	subs	r0, r0, r3
 802020c:	4152      	adcs	r2, r2
 802020e:	1a41      	subs	r1, r0, r1
 8020210:	d200      	bcs.n	8020214 <__udivsi3+0xf8>
 8020212:	4601      	mov	r1, r0
 8020214:	4152      	adcs	r2, r2
 8020216:	4610      	mov	r0, r2
 8020218:	4770      	bx	lr
 802021a:	e7ff      	b.n	802021c <__udivsi3+0x100>
 802021c:	b501      	push	{r0, lr}
 802021e:	2000      	movs	r0, #0
 8020220:	f000 f806 	bl	8020230 <__aeabi_idiv0>
 8020224:	bd02      	pop	{r1, pc}
 8020226:	46c0      	nop			; (mov r8, r8)

08020228 <__aeabi_uidivmod>:
 8020228:	2900      	cmp	r1, #0
 802022a:	d0f7      	beq.n	802021c <__udivsi3+0x100>
 802022c:	e776      	b.n	802011c <__udivsi3>
 802022e:	4770      	bx	lr

08020230 <__aeabi_idiv0>:
 8020230:	4770      	bx	lr
 8020232:	46c0      	nop			; (mov r8, r8)

08020234 <__aeabi_uldivmod>:
 8020234:	2b00      	cmp	r3, #0
 8020236:	d111      	bne.n	802025c <__aeabi_uldivmod+0x28>
 8020238:	2a00      	cmp	r2, #0
 802023a:	d10f      	bne.n	802025c <__aeabi_uldivmod+0x28>
 802023c:	2900      	cmp	r1, #0
 802023e:	d100      	bne.n	8020242 <__aeabi_uldivmod+0xe>
 8020240:	2800      	cmp	r0, #0
 8020242:	d002      	beq.n	802024a <__aeabi_uldivmod+0x16>
 8020244:	2100      	movs	r1, #0
 8020246:	43c9      	mvns	r1, r1
 8020248:	1c08      	adds	r0, r1, #0
 802024a:	b407      	push	{r0, r1, r2}
 802024c:	4802      	ldr	r0, [pc, #8]	; (8020258 <__aeabi_uldivmod+0x24>)
 802024e:	a102      	add	r1, pc, #8	; (adr r1, 8020258 <__aeabi_uldivmod+0x24>)
 8020250:	1840      	adds	r0, r0, r1
 8020252:	9002      	str	r0, [sp, #8]
 8020254:	bd03      	pop	{r0, r1, pc}
 8020256:	46c0      	nop			; (mov r8, r8)
 8020258:	ffffffd9 	.word	0xffffffd9
 802025c:	b403      	push	{r0, r1}
 802025e:	4668      	mov	r0, sp
 8020260:	b501      	push	{r0, lr}
 8020262:	9802      	ldr	r0, [sp, #8]
 8020264:	f000 f82e 	bl	80202c4 <__udivmoddi4>
 8020268:	9b01      	ldr	r3, [sp, #4]
 802026a:	469e      	mov	lr, r3
 802026c:	b002      	add	sp, #8
 802026e:	bc0c      	pop	{r2, r3}
 8020270:	4770      	bx	lr
 8020272:	46c0      	nop			; (mov r8, r8)

08020274 <__aeabi_lmul>:
 8020274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020276:	0415      	lsls	r5, r2, #16
 8020278:	0c2d      	lsrs	r5, r5, #16
 802027a:	000f      	movs	r7, r1
 802027c:	0001      	movs	r1, r0
 802027e:	002e      	movs	r6, r5
 8020280:	46c6      	mov	lr, r8
 8020282:	4684      	mov	ip, r0
 8020284:	0400      	lsls	r0, r0, #16
 8020286:	0c14      	lsrs	r4, r2, #16
 8020288:	0c00      	lsrs	r0, r0, #16
 802028a:	0c09      	lsrs	r1, r1, #16
 802028c:	4346      	muls	r6, r0
 802028e:	434d      	muls	r5, r1
 8020290:	4360      	muls	r0, r4
 8020292:	4361      	muls	r1, r4
 8020294:	1940      	adds	r0, r0, r5
 8020296:	0c34      	lsrs	r4, r6, #16
 8020298:	1824      	adds	r4, r4, r0
 802029a:	b500      	push	{lr}
 802029c:	42a5      	cmp	r5, r4
 802029e:	d903      	bls.n	80202a8 <__aeabi_lmul+0x34>
 80202a0:	2080      	movs	r0, #128	; 0x80
 80202a2:	0240      	lsls	r0, r0, #9
 80202a4:	4680      	mov	r8, r0
 80202a6:	4441      	add	r1, r8
 80202a8:	0c25      	lsrs	r5, r4, #16
 80202aa:	186d      	adds	r5, r5, r1
 80202ac:	4661      	mov	r1, ip
 80202ae:	4359      	muls	r1, r3
 80202b0:	437a      	muls	r2, r7
 80202b2:	0430      	lsls	r0, r6, #16
 80202b4:	1949      	adds	r1, r1, r5
 80202b6:	0424      	lsls	r4, r4, #16
 80202b8:	0c00      	lsrs	r0, r0, #16
 80202ba:	1820      	adds	r0, r4, r0
 80202bc:	1889      	adds	r1, r1, r2
 80202be:	bc80      	pop	{r7}
 80202c0:	46b8      	mov	r8, r7
 80202c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080202c4 <__udivmoddi4>:
 80202c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80202c6:	4657      	mov	r7, sl
 80202c8:	464e      	mov	r6, r9
 80202ca:	4645      	mov	r5, r8
 80202cc:	46de      	mov	lr, fp
 80202ce:	b5e0      	push	{r5, r6, r7, lr}
 80202d0:	0004      	movs	r4, r0
 80202d2:	000d      	movs	r5, r1
 80202d4:	4692      	mov	sl, r2
 80202d6:	4699      	mov	r9, r3
 80202d8:	b083      	sub	sp, #12
 80202da:	428b      	cmp	r3, r1
 80202dc:	d830      	bhi.n	8020340 <__udivmoddi4+0x7c>
 80202de:	d02d      	beq.n	802033c <__udivmoddi4+0x78>
 80202e0:	4649      	mov	r1, r9
 80202e2:	4650      	mov	r0, sl
 80202e4:	f000 f8ba 	bl	802045c <__clzdi2>
 80202e8:	0029      	movs	r1, r5
 80202ea:	0006      	movs	r6, r0
 80202ec:	0020      	movs	r0, r4
 80202ee:	f000 f8b5 	bl	802045c <__clzdi2>
 80202f2:	1a33      	subs	r3, r6, r0
 80202f4:	4698      	mov	r8, r3
 80202f6:	3b20      	subs	r3, #32
 80202f8:	469b      	mov	fp, r3
 80202fa:	d433      	bmi.n	8020364 <__udivmoddi4+0xa0>
 80202fc:	465a      	mov	r2, fp
 80202fe:	4653      	mov	r3, sl
 8020300:	4093      	lsls	r3, r2
 8020302:	4642      	mov	r2, r8
 8020304:	001f      	movs	r7, r3
 8020306:	4653      	mov	r3, sl
 8020308:	4093      	lsls	r3, r2
 802030a:	001e      	movs	r6, r3
 802030c:	42af      	cmp	r7, r5
 802030e:	d83a      	bhi.n	8020386 <__udivmoddi4+0xc2>
 8020310:	42af      	cmp	r7, r5
 8020312:	d100      	bne.n	8020316 <__udivmoddi4+0x52>
 8020314:	e078      	b.n	8020408 <__udivmoddi4+0x144>
 8020316:	465b      	mov	r3, fp
 8020318:	1ba4      	subs	r4, r4, r6
 802031a:	41bd      	sbcs	r5, r7
 802031c:	2b00      	cmp	r3, #0
 802031e:	da00      	bge.n	8020322 <__udivmoddi4+0x5e>
 8020320:	e075      	b.n	802040e <__udivmoddi4+0x14a>
 8020322:	2200      	movs	r2, #0
 8020324:	2300      	movs	r3, #0
 8020326:	9200      	str	r2, [sp, #0]
 8020328:	9301      	str	r3, [sp, #4]
 802032a:	2301      	movs	r3, #1
 802032c:	465a      	mov	r2, fp
 802032e:	4093      	lsls	r3, r2
 8020330:	9301      	str	r3, [sp, #4]
 8020332:	2301      	movs	r3, #1
 8020334:	4642      	mov	r2, r8
 8020336:	4093      	lsls	r3, r2
 8020338:	9300      	str	r3, [sp, #0]
 802033a:	e028      	b.n	802038e <__udivmoddi4+0xca>
 802033c:	4282      	cmp	r2, r0
 802033e:	d9cf      	bls.n	80202e0 <__udivmoddi4+0x1c>
 8020340:	2200      	movs	r2, #0
 8020342:	2300      	movs	r3, #0
 8020344:	9200      	str	r2, [sp, #0]
 8020346:	9301      	str	r3, [sp, #4]
 8020348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802034a:	2b00      	cmp	r3, #0
 802034c:	d001      	beq.n	8020352 <__udivmoddi4+0x8e>
 802034e:	601c      	str	r4, [r3, #0]
 8020350:	605d      	str	r5, [r3, #4]
 8020352:	9800      	ldr	r0, [sp, #0]
 8020354:	9901      	ldr	r1, [sp, #4]
 8020356:	b003      	add	sp, #12
 8020358:	bcf0      	pop	{r4, r5, r6, r7}
 802035a:	46bb      	mov	fp, r7
 802035c:	46b2      	mov	sl, r6
 802035e:	46a9      	mov	r9, r5
 8020360:	46a0      	mov	r8, r4
 8020362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020364:	4642      	mov	r2, r8
 8020366:	2320      	movs	r3, #32
 8020368:	1a9b      	subs	r3, r3, r2
 802036a:	4652      	mov	r2, sl
 802036c:	40da      	lsrs	r2, r3
 802036e:	4641      	mov	r1, r8
 8020370:	0013      	movs	r3, r2
 8020372:	464a      	mov	r2, r9
 8020374:	408a      	lsls	r2, r1
 8020376:	0017      	movs	r7, r2
 8020378:	4642      	mov	r2, r8
 802037a:	431f      	orrs	r7, r3
 802037c:	4653      	mov	r3, sl
 802037e:	4093      	lsls	r3, r2
 8020380:	001e      	movs	r6, r3
 8020382:	42af      	cmp	r7, r5
 8020384:	d9c4      	bls.n	8020310 <__udivmoddi4+0x4c>
 8020386:	2200      	movs	r2, #0
 8020388:	2300      	movs	r3, #0
 802038a:	9200      	str	r2, [sp, #0]
 802038c:	9301      	str	r3, [sp, #4]
 802038e:	4643      	mov	r3, r8
 8020390:	2b00      	cmp	r3, #0
 8020392:	d0d9      	beq.n	8020348 <__udivmoddi4+0x84>
 8020394:	07fb      	lsls	r3, r7, #31
 8020396:	0872      	lsrs	r2, r6, #1
 8020398:	431a      	orrs	r2, r3
 802039a:	4646      	mov	r6, r8
 802039c:	087b      	lsrs	r3, r7, #1
 802039e:	e00e      	b.n	80203be <__udivmoddi4+0xfa>
 80203a0:	42ab      	cmp	r3, r5
 80203a2:	d101      	bne.n	80203a8 <__udivmoddi4+0xe4>
 80203a4:	42a2      	cmp	r2, r4
 80203a6:	d80c      	bhi.n	80203c2 <__udivmoddi4+0xfe>
 80203a8:	1aa4      	subs	r4, r4, r2
 80203aa:	419d      	sbcs	r5, r3
 80203ac:	2001      	movs	r0, #1
 80203ae:	1924      	adds	r4, r4, r4
 80203b0:	416d      	adcs	r5, r5
 80203b2:	2100      	movs	r1, #0
 80203b4:	3e01      	subs	r6, #1
 80203b6:	1824      	adds	r4, r4, r0
 80203b8:	414d      	adcs	r5, r1
 80203ba:	2e00      	cmp	r6, #0
 80203bc:	d006      	beq.n	80203cc <__udivmoddi4+0x108>
 80203be:	42ab      	cmp	r3, r5
 80203c0:	d9ee      	bls.n	80203a0 <__udivmoddi4+0xdc>
 80203c2:	3e01      	subs	r6, #1
 80203c4:	1924      	adds	r4, r4, r4
 80203c6:	416d      	adcs	r5, r5
 80203c8:	2e00      	cmp	r6, #0
 80203ca:	d1f8      	bne.n	80203be <__udivmoddi4+0xfa>
 80203cc:	9800      	ldr	r0, [sp, #0]
 80203ce:	9901      	ldr	r1, [sp, #4]
 80203d0:	465b      	mov	r3, fp
 80203d2:	1900      	adds	r0, r0, r4
 80203d4:	4169      	adcs	r1, r5
 80203d6:	2b00      	cmp	r3, #0
 80203d8:	db24      	blt.n	8020424 <__udivmoddi4+0x160>
 80203da:	002b      	movs	r3, r5
 80203dc:	465a      	mov	r2, fp
 80203de:	4644      	mov	r4, r8
 80203e0:	40d3      	lsrs	r3, r2
 80203e2:	002a      	movs	r2, r5
 80203e4:	40e2      	lsrs	r2, r4
 80203e6:	001c      	movs	r4, r3
 80203e8:	465b      	mov	r3, fp
 80203ea:	0015      	movs	r5, r2
 80203ec:	2b00      	cmp	r3, #0
 80203ee:	db2a      	blt.n	8020446 <__udivmoddi4+0x182>
 80203f0:	0026      	movs	r6, r4
 80203f2:	409e      	lsls	r6, r3
 80203f4:	0033      	movs	r3, r6
 80203f6:	0026      	movs	r6, r4
 80203f8:	4647      	mov	r7, r8
 80203fa:	40be      	lsls	r6, r7
 80203fc:	0032      	movs	r2, r6
 80203fe:	1a80      	subs	r0, r0, r2
 8020400:	4199      	sbcs	r1, r3
 8020402:	9000      	str	r0, [sp, #0]
 8020404:	9101      	str	r1, [sp, #4]
 8020406:	e79f      	b.n	8020348 <__udivmoddi4+0x84>
 8020408:	42a3      	cmp	r3, r4
 802040a:	d8bc      	bhi.n	8020386 <__udivmoddi4+0xc2>
 802040c:	e783      	b.n	8020316 <__udivmoddi4+0x52>
 802040e:	4642      	mov	r2, r8
 8020410:	2320      	movs	r3, #32
 8020412:	2100      	movs	r1, #0
 8020414:	1a9b      	subs	r3, r3, r2
 8020416:	2200      	movs	r2, #0
 8020418:	9100      	str	r1, [sp, #0]
 802041a:	9201      	str	r2, [sp, #4]
 802041c:	2201      	movs	r2, #1
 802041e:	40da      	lsrs	r2, r3
 8020420:	9201      	str	r2, [sp, #4]
 8020422:	e786      	b.n	8020332 <__udivmoddi4+0x6e>
 8020424:	4642      	mov	r2, r8
 8020426:	2320      	movs	r3, #32
 8020428:	1a9b      	subs	r3, r3, r2
 802042a:	002a      	movs	r2, r5
 802042c:	4646      	mov	r6, r8
 802042e:	409a      	lsls	r2, r3
 8020430:	0023      	movs	r3, r4
 8020432:	40f3      	lsrs	r3, r6
 8020434:	4644      	mov	r4, r8
 8020436:	4313      	orrs	r3, r2
 8020438:	002a      	movs	r2, r5
 802043a:	40e2      	lsrs	r2, r4
 802043c:	001c      	movs	r4, r3
 802043e:	465b      	mov	r3, fp
 8020440:	0015      	movs	r5, r2
 8020442:	2b00      	cmp	r3, #0
 8020444:	dad4      	bge.n	80203f0 <__udivmoddi4+0x12c>
 8020446:	4642      	mov	r2, r8
 8020448:	002f      	movs	r7, r5
 802044a:	2320      	movs	r3, #32
 802044c:	0026      	movs	r6, r4
 802044e:	4097      	lsls	r7, r2
 8020450:	1a9b      	subs	r3, r3, r2
 8020452:	40de      	lsrs	r6, r3
 8020454:	003b      	movs	r3, r7
 8020456:	4333      	orrs	r3, r6
 8020458:	e7cd      	b.n	80203f6 <__udivmoddi4+0x132>
 802045a:	46c0      	nop			; (mov r8, r8)

0802045c <__clzdi2>:
 802045c:	b510      	push	{r4, lr}
 802045e:	2900      	cmp	r1, #0
 8020460:	d103      	bne.n	802046a <__clzdi2+0xe>
 8020462:	f000 f807 	bl	8020474 <__clzsi2>
 8020466:	3020      	adds	r0, #32
 8020468:	e002      	b.n	8020470 <__clzdi2+0x14>
 802046a:	1c08      	adds	r0, r1, #0
 802046c:	f000 f802 	bl	8020474 <__clzsi2>
 8020470:	bd10      	pop	{r4, pc}
 8020472:	46c0      	nop			; (mov r8, r8)

08020474 <__clzsi2>:
 8020474:	211c      	movs	r1, #28
 8020476:	2301      	movs	r3, #1
 8020478:	041b      	lsls	r3, r3, #16
 802047a:	4298      	cmp	r0, r3
 802047c:	d301      	bcc.n	8020482 <__clzsi2+0xe>
 802047e:	0c00      	lsrs	r0, r0, #16
 8020480:	3910      	subs	r1, #16
 8020482:	0a1b      	lsrs	r3, r3, #8
 8020484:	4298      	cmp	r0, r3
 8020486:	d301      	bcc.n	802048c <__clzsi2+0x18>
 8020488:	0a00      	lsrs	r0, r0, #8
 802048a:	3908      	subs	r1, #8
 802048c:	091b      	lsrs	r3, r3, #4
 802048e:	4298      	cmp	r0, r3
 8020490:	d301      	bcc.n	8020496 <__clzsi2+0x22>
 8020492:	0900      	lsrs	r0, r0, #4
 8020494:	3904      	subs	r1, #4
 8020496:	a202      	add	r2, pc, #8	; (adr r2, 80204a0 <__clzsi2+0x2c>)
 8020498:	5c10      	ldrb	r0, [r2, r0]
 802049a:	1840      	adds	r0, r0, r1
 802049c:	4770      	bx	lr
 802049e:	46c0      	nop			; (mov r8, r8)
 80204a0:	02020304 	.word	0x02020304
 80204a4:	01010101 	.word	0x01010101
	...

080204b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80204b0:	b590      	push	{r4, r7, lr}
 80204b2:	b089      	sub	sp, #36	; 0x24
 80204b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80204b6:	240c      	movs	r4, #12
 80204b8:	193b      	adds	r3, r7, r4
 80204ba:	0018      	movs	r0, r3
 80204bc:	2314      	movs	r3, #20
 80204be:	001a      	movs	r2, r3
 80204c0:	2100      	movs	r1, #0
 80204c2:	f002 fb3b 	bl	8022b3c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80204c6:	4b2a      	ldr	r3, [pc, #168]	; (8020570 <MX_GPIO_Init+0xc0>)
 80204c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80204ca:	4b29      	ldr	r3, [pc, #164]	; (8020570 <MX_GPIO_Init+0xc0>)
 80204cc:	2104      	movs	r1, #4
 80204ce:	430a      	orrs	r2, r1
 80204d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80204d2:	4b27      	ldr	r3, [pc, #156]	; (8020570 <MX_GPIO_Init+0xc0>)
 80204d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80204d6:	2204      	movs	r2, #4
 80204d8:	4013      	ands	r3, r2
 80204da:	60bb      	str	r3, [r7, #8]
 80204dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80204de:	4b24      	ldr	r3, [pc, #144]	; (8020570 <MX_GPIO_Init+0xc0>)
 80204e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80204e2:	4b23      	ldr	r3, [pc, #140]	; (8020570 <MX_GPIO_Init+0xc0>)
 80204e4:	2180      	movs	r1, #128	; 0x80
 80204e6:	430a      	orrs	r2, r1
 80204e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80204ea:	4b21      	ldr	r3, [pc, #132]	; (8020570 <MX_GPIO_Init+0xc0>)
 80204ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80204ee:	2280      	movs	r2, #128	; 0x80
 80204f0:	4013      	ands	r3, r2
 80204f2:	607b      	str	r3, [r7, #4]
 80204f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80204f6:	4b1e      	ldr	r3, [pc, #120]	; (8020570 <MX_GPIO_Init+0xc0>)
 80204f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80204fa:	4b1d      	ldr	r3, [pc, #116]	; (8020570 <MX_GPIO_Init+0xc0>)
 80204fc:	2101      	movs	r1, #1
 80204fe:	430a      	orrs	r2, r1
 8020500:	62da      	str	r2, [r3, #44]	; 0x2c
 8020502:	4b1b      	ldr	r3, [pc, #108]	; (8020570 <MX_GPIO_Init+0xc0>)
 8020504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020506:	2201      	movs	r2, #1
 8020508:	4013      	ands	r3, r2
 802050a:	603b      	str	r3, [r7, #0]
 802050c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 802050e:	23a0      	movs	r3, #160	; 0xa0
 8020510:	05db      	lsls	r3, r3, #23
 8020512:	2200      	movs	r2, #0
 8020514:	2120      	movs	r1, #32
 8020516:	0018      	movs	r0, r3
 8020518:	f000 fde2 	bl	80210e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 802051c:	193b      	adds	r3, r7, r4
 802051e:	2280      	movs	r2, #128	; 0x80
 8020520:	0192      	lsls	r2, r2, #6
 8020522:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8020524:	193b      	adds	r3, r7, r4
 8020526:	2284      	movs	r2, #132	; 0x84
 8020528:	0392      	lsls	r2, r2, #14
 802052a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802052c:	193b      	adds	r3, r7, r4
 802052e:	2200      	movs	r2, #0
 8020530:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8020532:	193b      	adds	r3, r7, r4
 8020534:	4a0f      	ldr	r2, [pc, #60]	; (8020574 <MX_GPIO_Init+0xc4>)
 8020536:	0019      	movs	r1, r3
 8020538:	0010      	movs	r0, r2
 802053a:	f000 fc53 	bl	8020de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 802053e:	0021      	movs	r1, r4
 8020540:	187b      	adds	r3, r7, r1
 8020542:	2220      	movs	r2, #32
 8020544:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020546:	187b      	adds	r3, r7, r1
 8020548:	2201      	movs	r2, #1
 802054a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802054c:	187b      	adds	r3, r7, r1
 802054e:	2200      	movs	r2, #0
 8020550:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020552:	187b      	adds	r3, r7, r1
 8020554:	2200      	movs	r2, #0
 8020556:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8020558:	187a      	adds	r2, r7, r1
 802055a:	23a0      	movs	r3, #160	; 0xa0
 802055c:	05db      	lsls	r3, r3, #23
 802055e:	0011      	movs	r1, r2
 8020560:	0018      	movs	r0, r3
 8020562:	f000 fc3f 	bl	8020de4 <HAL_GPIO_Init>

}
 8020566:	46c0      	nop			; (mov r8, r8)
 8020568:	46bd      	mov	sp, r7
 802056a:	b009      	add	sp, #36	; 0x24
 802056c:	bd90      	pop	{r4, r7, pc}
 802056e:	46c0      	nop			; (mov r8, r8)
 8020570:	40021000 	.word	0x40021000
 8020574:	50000800 	.word	0x50000800

08020578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020578:	b580      	push	{r7, lr}
 802057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 802057c:	f000 faea 	bl	8020b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8020580:	f000 f82c 	bl	80205dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8020584:	f7ff ff94 	bl	80204b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8020588:	f000 f9b0 	bl	80208ec <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 802058c:	f000 f97e 	bl	802088c <MX_USART1_UART_Init>
  MX_USART4_UART_Init();
 8020590:	f000 f9dc 	bl	802094c <MX_USART4_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Application youpi (%d.%d)\r\n", APP_Version[0], APP_Version[1] );
 8020594:	2300      	movs	r3, #0
 8020596:	0019      	movs	r1, r3
 8020598:	2306      	movs	r3, #6
 802059a:	001a      	movs	r2, r3
 802059c:	4b0d      	ldr	r3, [pc, #52]	; (80205d4 <main+0x5c>)
 802059e:	0018      	movs	r0, r3
 80205a0:	f002 fad4 	bl	8022b4c <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin( GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80205a4:	23a0      	movs	r3, #160	; 0xa0
 80205a6:	05db      	lsls	r3, r3, #23
 80205a8:	2201      	movs	r2, #1
 80205aa:	2120      	movs	r1, #32
 80205ac:	0018      	movs	r0, r3
 80205ae:	f000 fd97 	bl	80210e0 <HAL_GPIO_WritePin>
	  HAL_Delay(5000);
 80205b2:	4b09      	ldr	r3, [pc, #36]	; (80205d8 <main+0x60>)
 80205b4:	0018      	movs	r0, r3
 80205b6:	f000 fb3d 	bl	8020c34 <HAL_Delay>
	  HAL_GPIO_WritePin( GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80205ba:	23a0      	movs	r3, #160	; 0xa0
 80205bc:	05db      	lsls	r3, r3, #23
 80205be:	2200      	movs	r2, #0
 80205c0:	2120      	movs	r1, #32
 80205c2:	0018      	movs	r0, r3
 80205c4:	f000 fd8c 	bl	80210e0 <HAL_GPIO_WritePin>
	  HAL_Delay(5000);
 80205c8:	4b03      	ldr	r3, [pc, #12]	; (80205d8 <main+0x60>)
 80205ca:	0018      	movs	r0, r3
 80205cc:	f000 fb32 	bl	8020c34 <HAL_Delay>
	  HAL_GPIO_WritePin( GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80205d0:	e7e8      	b.n	80205a4 <main+0x2c>
 80205d2:	46c0      	nop			; (mov r8, r8)
 80205d4:	08023aa0 	.word	0x08023aa0
 80205d8:	00001388 	.word	0x00001388

080205dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80205dc:	b590      	push	{r4, r7, lr}
 80205de:	b09f      	sub	sp, #124	; 0x7c
 80205e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80205e2:	2440      	movs	r4, #64	; 0x40
 80205e4:	193b      	adds	r3, r7, r4
 80205e6:	0018      	movs	r0, r3
 80205e8:	2338      	movs	r3, #56	; 0x38
 80205ea:	001a      	movs	r2, r3
 80205ec:	2100      	movs	r1, #0
 80205ee:	f002 faa5 	bl	8022b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80205f2:	232c      	movs	r3, #44	; 0x2c
 80205f4:	18fb      	adds	r3, r7, r3
 80205f6:	0018      	movs	r0, r3
 80205f8:	2314      	movs	r3, #20
 80205fa:	001a      	movs	r2, r3
 80205fc:	2100      	movs	r1, #0
 80205fe:	f002 fa9d 	bl	8022b3c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8020602:	1d3b      	adds	r3, r7, #4
 8020604:	0018      	movs	r0, r3
 8020606:	2328      	movs	r3, #40	; 0x28
 8020608:	001a      	movs	r2, r3
 802060a:	2100      	movs	r1, #0
 802060c:	f002 fa96 	bl	8022b3c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8020610:	4b27      	ldr	r3, [pc, #156]	; (80206b0 <SystemClock_Config+0xd4>)
 8020612:	681b      	ldr	r3, [r3, #0]
 8020614:	4a27      	ldr	r2, [pc, #156]	; (80206b4 <SystemClock_Config+0xd8>)
 8020616:	401a      	ands	r2, r3
 8020618:	4b25      	ldr	r3, [pc, #148]	; (80206b0 <SystemClock_Config+0xd4>)
 802061a:	2180      	movs	r1, #128	; 0x80
 802061c:	0109      	lsls	r1, r1, #4
 802061e:	430a      	orrs	r2, r1
 8020620:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8020622:	0021      	movs	r1, r4
 8020624:	187b      	adds	r3, r7, r1
 8020626:	2210      	movs	r2, #16
 8020628:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 802062a:	187b      	adds	r3, r7, r1
 802062c:	2201      	movs	r2, #1
 802062e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8020630:	187b      	adds	r3, r7, r1
 8020632:	2200      	movs	r2, #0
 8020634:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8020636:	187b      	adds	r3, r7, r1
 8020638:	22a0      	movs	r2, #160	; 0xa0
 802063a:	0212      	lsls	r2, r2, #8
 802063c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 802063e:	187b      	adds	r3, r7, r1
 8020640:	2200      	movs	r2, #0
 8020642:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8020644:	187b      	adds	r3, r7, r1
 8020646:	0018      	movs	r0, r3
 8020648:	f000 fd68 	bl	802111c <HAL_RCC_OscConfig>
 802064c:	1e03      	subs	r3, r0, #0
 802064e:	d001      	beq.n	8020654 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8020650:	f000 f844 	bl	80206dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8020654:	212c      	movs	r1, #44	; 0x2c
 8020656:	187b      	adds	r3, r7, r1
 8020658:	220f      	movs	r2, #15
 802065a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 802065c:	187b      	adds	r3, r7, r1
 802065e:	2200      	movs	r2, #0
 8020660:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8020662:	187b      	adds	r3, r7, r1
 8020664:	2200      	movs	r2, #0
 8020666:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8020668:	187b      	adds	r3, r7, r1
 802066a:	2200      	movs	r2, #0
 802066c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 802066e:	187b      	adds	r3, r7, r1
 8020670:	2200      	movs	r2, #0
 8020672:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8020674:	187b      	adds	r3, r7, r1
 8020676:	2100      	movs	r1, #0
 8020678:	0018      	movs	r0, r3
 802067a:	f001 f923 	bl	80218c4 <HAL_RCC_ClockConfig>
 802067e:	1e03      	subs	r3, r0, #0
 8020680:	d001      	beq.n	8020686 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8020682:	f000 f82b 	bl	80206dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8020686:	1d3b      	adds	r3, r7, #4
 8020688:	2203      	movs	r2, #3
 802068a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 802068c:	1d3b      	adds	r3, r7, #4
 802068e:	2200      	movs	r2, #0
 8020690:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8020692:	1d3b      	adds	r3, r7, #4
 8020694:	2200      	movs	r2, #0
 8020696:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8020698:	1d3b      	adds	r3, r7, #4
 802069a:	0018      	movs	r0, r3
 802069c:	f001 fb36 	bl	8021d0c <HAL_RCCEx_PeriphCLKConfig>
 80206a0:	1e03      	subs	r3, r0, #0
 80206a2:	d001      	beq.n	80206a8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80206a4:	f000 f81a 	bl	80206dc <Error_Handler>
  }
}
 80206a8:	46c0      	nop			; (mov r8, r8)
 80206aa:	46bd      	mov	sp, r7
 80206ac:	b01f      	add	sp, #124	; 0x7c
 80206ae:	bd90      	pop	{r4, r7, pc}
 80206b0:	40007000 	.word	0x40007000
 80206b4:	ffffe7ff 	.word	0xffffe7ff

080206b8 <__io_putchar>:
 * calls __io_putchar */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /*__GNUC__*/
{
 80206b8:	b580      	push	{r7, lr}
 80206ba:	b082      	sub	sp, #8
 80206bc:	af00      	add	r7, sp, #0
 80206be:	6078      	str	r0, [r7, #4]
	/*Pace your implementation of fputc here*/
	/* e.g. write a character to the UART3 and loop until the end of transmission*/
	//HAL_UART_Transmit(&huart1, (unint8_t *)&ch, 1, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart1,(uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80206c0:	2301      	movs	r3, #1
 80206c2:	425b      	negs	r3, r3
 80206c4:	1d39      	adds	r1, r7, #4
 80206c6:	4804      	ldr	r0, [pc, #16]	; (80206d8 <__io_putchar+0x20>)
 80206c8:	2201      	movs	r2, #1
 80206ca:	f001 fce7 	bl	802209c <HAL_UART_Transmit>

	//HAL_UART_Transmit(&huart1, (uint8_t *)rxBuffer, strlen(rxBuffer), 500);

	return ch;
 80206ce:	687b      	ldr	r3, [r7, #4]
}
 80206d0:	0018      	movs	r0, r3
 80206d2:	46bd      	mov	sp, r7
 80206d4:	b002      	add	sp, #8
 80206d6:	bd80      	pop	{r7, pc}
 80206d8:	20000098 	.word	0x20000098

080206dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80206dc:	b580      	push	{r7, lr}
 80206de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80206e0:	b672      	cpsid	i
}
 80206e2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80206e4:	e7fe      	b.n	80206e4 <Error_Handler+0x8>
	...

080206e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80206e8:	b580      	push	{r7, lr}
 80206ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80206ec:	4b07      	ldr	r3, [pc, #28]	; (802070c <HAL_MspInit+0x24>)
 80206ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80206f0:	4b06      	ldr	r3, [pc, #24]	; (802070c <HAL_MspInit+0x24>)
 80206f2:	2101      	movs	r1, #1
 80206f4:	430a      	orrs	r2, r1
 80206f6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80206f8:	4b04      	ldr	r3, [pc, #16]	; (802070c <HAL_MspInit+0x24>)
 80206fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80206fc:	4b03      	ldr	r3, [pc, #12]	; (802070c <HAL_MspInit+0x24>)
 80206fe:	2180      	movs	r1, #128	; 0x80
 8020700:	0549      	lsls	r1, r1, #21
 8020702:	430a      	orrs	r2, r1
 8020704:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8020706:	46c0      	nop			; (mov r8, r8)
 8020708:	46bd      	mov	sp, r7
 802070a:	bd80      	pop	{r7, pc}
 802070c:	40021000 	.word	0x40021000

08020710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8020710:	b580      	push	{r7, lr}
 8020712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8020714:	e7fe      	b.n	8020714 <NMI_Handler+0x4>

08020716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8020716:	b580      	push	{r7, lr}
 8020718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 802071a:	e7fe      	b.n	802071a <HardFault_Handler+0x4>

0802071c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 802071c:	b580      	push	{r7, lr}
 802071e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8020720:	46c0      	nop			; (mov r8, r8)
 8020722:	46bd      	mov	sp, r7
 8020724:	bd80      	pop	{r7, pc}

08020726 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8020726:	b580      	push	{r7, lr}
 8020728:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 802072a:	46c0      	nop			; (mov r8, r8)
 802072c:	46bd      	mov	sp, r7
 802072e:	bd80      	pop	{r7, pc}

08020730 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8020730:	b580      	push	{r7, lr}
 8020732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8020734:	f000 fa62 	bl	8020bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8020738:	46c0      	nop			; (mov r8, r8)
 802073a:	46bd      	mov	sp, r7
 802073c:	bd80      	pop	{r7, pc}

0802073e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 802073e:	b580      	push	{r7, lr}
 8020740:	b086      	sub	sp, #24
 8020742:	af00      	add	r7, sp, #0
 8020744:	60f8      	str	r0, [r7, #12]
 8020746:	60b9      	str	r1, [r7, #8]
 8020748:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802074a:	2300      	movs	r3, #0
 802074c:	617b      	str	r3, [r7, #20]
 802074e:	e00a      	b.n	8020766 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8020750:	e000      	b.n	8020754 <_read+0x16>
 8020752:	bf00      	nop
 8020754:	0001      	movs	r1, r0
 8020756:	68bb      	ldr	r3, [r7, #8]
 8020758:	1c5a      	adds	r2, r3, #1
 802075a:	60ba      	str	r2, [r7, #8]
 802075c:	b2ca      	uxtb	r2, r1
 802075e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020760:	697b      	ldr	r3, [r7, #20]
 8020762:	3301      	adds	r3, #1
 8020764:	617b      	str	r3, [r7, #20]
 8020766:	697a      	ldr	r2, [r7, #20]
 8020768:	687b      	ldr	r3, [r7, #4]
 802076a:	429a      	cmp	r2, r3
 802076c:	dbf0      	blt.n	8020750 <_read+0x12>
	}

return len;
 802076e:	687b      	ldr	r3, [r7, #4]
}
 8020770:	0018      	movs	r0, r3
 8020772:	46bd      	mov	sp, r7
 8020774:	b006      	add	sp, #24
 8020776:	bd80      	pop	{r7, pc}

08020778 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8020778:	b580      	push	{r7, lr}
 802077a:	b086      	sub	sp, #24
 802077c:	af00      	add	r7, sp, #0
 802077e:	60f8      	str	r0, [r7, #12]
 8020780:	60b9      	str	r1, [r7, #8]
 8020782:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020784:	2300      	movs	r3, #0
 8020786:	617b      	str	r3, [r7, #20]
 8020788:	e009      	b.n	802079e <_write+0x26>
	{
		__io_putchar(*ptr++);
 802078a:	68bb      	ldr	r3, [r7, #8]
 802078c:	1c5a      	adds	r2, r3, #1
 802078e:	60ba      	str	r2, [r7, #8]
 8020790:	781b      	ldrb	r3, [r3, #0]
 8020792:	0018      	movs	r0, r3
 8020794:	f7ff ff90 	bl	80206b8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020798:	697b      	ldr	r3, [r7, #20]
 802079a:	3301      	adds	r3, #1
 802079c:	617b      	str	r3, [r7, #20]
 802079e:	697a      	ldr	r2, [r7, #20]
 80207a0:	687b      	ldr	r3, [r7, #4]
 80207a2:	429a      	cmp	r2, r3
 80207a4:	dbf1      	blt.n	802078a <_write+0x12>
	}
	return len;
 80207a6:	687b      	ldr	r3, [r7, #4]
}
 80207a8:	0018      	movs	r0, r3
 80207aa:	46bd      	mov	sp, r7
 80207ac:	b006      	add	sp, #24
 80207ae:	bd80      	pop	{r7, pc}

080207b0 <_close>:

int _close(int file)
{
 80207b0:	b580      	push	{r7, lr}
 80207b2:	b082      	sub	sp, #8
 80207b4:	af00      	add	r7, sp, #0
 80207b6:	6078      	str	r0, [r7, #4]
	return -1;
 80207b8:	2301      	movs	r3, #1
 80207ba:	425b      	negs	r3, r3
}
 80207bc:	0018      	movs	r0, r3
 80207be:	46bd      	mov	sp, r7
 80207c0:	b002      	add	sp, #8
 80207c2:	bd80      	pop	{r7, pc}

080207c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80207c4:	b580      	push	{r7, lr}
 80207c6:	b082      	sub	sp, #8
 80207c8:	af00      	add	r7, sp, #0
 80207ca:	6078      	str	r0, [r7, #4]
 80207cc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80207ce:	683b      	ldr	r3, [r7, #0]
 80207d0:	2280      	movs	r2, #128	; 0x80
 80207d2:	0192      	lsls	r2, r2, #6
 80207d4:	605a      	str	r2, [r3, #4]
	return 0;
 80207d6:	2300      	movs	r3, #0
}
 80207d8:	0018      	movs	r0, r3
 80207da:	46bd      	mov	sp, r7
 80207dc:	b002      	add	sp, #8
 80207de:	bd80      	pop	{r7, pc}

080207e0 <_isatty>:

int _isatty(int file)
{
 80207e0:	b580      	push	{r7, lr}
 80207e2:	b082      	sub	sp, #8
 80207e4:	af00      	add	r7, sp, #0
 80207e6:	6078      	str	r0, [r7, #4]
	return 1;
 80207e8:	2301      	movs	r3, #1
}
 80207ea:	0018      	movs	r0, r3
 80207ec:	46bd      	mov	sp, r7
 80207ee:	b002      	add	sp, #8
 80207f0:	bd80      	pop	{r7, pc}

080207f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80207f2:	b580      	push	{r7, lr}
 80207f4:	b084      	sub	sp, #16
 80207f6:	af00      	add	r7, sp, #0
 80207f8:	60f8      	str	r0, [r7, #12]
 80207fa:	60b9      	str	r1, [r7, #8]
 80207fc:	607a      	str	r2, [r7, #4]
	return 0;
 80207fe:	2300      	movs	r3, #0
}
 8020800:	0018      	movs	r0, r3
 8020802:	46bd      	mov	sp, r7
 8020804:	b004      	add	sp, #16
 8020806:	bd80      	pop	{r7, pc}

08020808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8020808:	b580      	push	{r7, lr}
 802080a:	b086      	sub	sp, #24
 802080c:	af00      	add	r7, sp, #0
 802080e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8020810:	4a14      	ldr	r2, [pc, #80]	; (8020864 <_sbrk+0x5c>)
 8020812:	4b15      	ldr	r3, [pc, #84]	; (8020868 <_sbrk+0x60>)
 8020814:	1ad3      	subs	r3, r2, r3
 8020816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8020818:	697b      	ldr	r3, [r7, #20]
 802081a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 802081c:	4b13      	ldr	r3, [pc, #76]	; (802086c <_sbrk+0x64>)
 802081e:	681b      	ldr	r3, [r3, #0]
 8020820:	2b00      	cmp	r3, #0
 8020822:	d102      	bne.n	802082a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8020824:	4b11      	ldr	r3, [pc, #68]	; (802086c <_sbrk+0x64>)
 8020826:	4a12      	ldr	r2, [pc, #72]	; (8020870 <_sbrk+0x68>)
 8020828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 802082a:	4b10      	ldr	r3, [pc, #64]	; (802086c <_sbrk+0x64>)
 802082c:	681a      	ldr	r2, [r3, #0]
 802082e:	687b      	ldr	r3, [r7, #4]
 8020830:	18d3      	adds	r3, r2, r3
 8020832:	693a      	ldr	r2, [r7, #16]
 8020834:	429a      	cmp	r2, r3
 8020836:	d207      	bcs.n	8020848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8020838:	f002 f956 	bl	8022ae8 <__errno>
 802083c:	0003      	movs	r3, r0
 802083e:	220c      	movs	r2, #12
 8020840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8020842:	2301      	movs	r3, #1
 8020844:	425b      	negs	r3, r3
 8020846:	e009      	b.n	802085c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8020848:	4b08      	ldr	r3, [pc, #32]	; (802086c <_sbrk+0x64>)
 802084a:	681b      	ldr	r3, [r3, #0]
 802084c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 802084e:	4b07      	ldr	r3, [pc, #28]	; (802086c <_sbrk+0x64>)
 8020850:	681a      	ldr	r2, [r3, #0]
 8020852:	687b      	ldr	r3, [r7, #4]
 8020854:	18d2      	adds	r2, r2, r3
 8020856:	4b05      	ldr	r3, [pc, #20]	; (802086c <_sbrk+0x64>)
 8020858:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 802085a:	68fb      	ldr	r3, [r7, #12]
}
 802085c:	0018      	movs	r0, r3
 802085e:	46bd      	mov	sp, r7
 8020860:	b006      	add	sp, #24
 8020862:	bd80      	pop	{r7, pc}
 8020864:	20005000 	.word	0x20005000
 8020868:	00000400 	.word	0x00000400
 802086c:	2000008c 	.word	0x2000008c
 8020870:	20000238 	.word	0x20000238

08020874 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8020874:	b580      	push	{r7, lr}
 8020876:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8020878:	4b02      	ldr	r3, [pc, #8]	; (8020884 <SystemInit+0x10>)
 802087a:	4a03      	ldr	r2, [pc, #12]	; (8020888 <SystemInit+0x14>)
 802087c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 802087e:	46c0      	nop			; (mov r8, r8)
 8020880:	46bd      	mov	sp, r7
 8020882:	bd80      	pop	{r7, pc}
 8020884:	e000ed00 	.word	0xe000ed00
 8020888:	08020000 	.word	0x08020000

0802088c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart4;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 802088c:	b580      	push	{r7, lr}
 802088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8020890:	4b14      	ldr	r3, [pc, #80]	; (80208e4 <MX_USART1_UART_Init+0x58>)
 8020892:	4a15      	ldr	r2, [pc, #84]	; (80208e8 <MX_USART1_UART_Init+0x5c>)
 8020894:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8020896:	4b13      	ldr	r3, [pc, #76]	; (80208e4 <MX_USART1_UART_Init+0x58>)
 8020898:	2296      	movs	r2, #150	; 0x96
 802089a:	0192      	lsls	r2, r2, #6
 802089c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 802089e:	4b11      	ldr	r3, [pc, #68]	; (80208e4 <MX_USART1_UART_Init+0x58>)
 80208a0:	2200      	movs	r2, #0
 80208a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80208a4:	4b0f      	ldr	r3, [pc, #60]	; (80208e4 <MX_USART1_UART_Init+0x58>)
 80208a6:	2200      	movs	r2, #0
 80208a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80208aa:	4b0e      	ldr	r3, [pc, #56]	; (80208e4 <MX_USART1_UART_Init+0x58>)
 80208ac:	2200      	movs	r2, #0
 80208ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80208b0:	4b0c      	ldr	r3, [pc, #48]	; (80208e4 <MX_USART1_UART_Init+0x58>)
 80208b2:	220c      	movs	r2, #12
 80208b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80208b6:	4b0b      	ldr	r3, [pc, #44]	; (80208e4 <MX_USART1_UART_Init+0x58>)
 80208b8:	2200      	movs	r2, #0
 80208ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80208bc:	4b09      	ldr	r3, [pc, #36]	; (80208e4 <MX_USART1_UART_Init+0x58>)
 80208be:	2200      	movs	r2, #0
 80208c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80208c2:	4b08      	ldr	r3, [pc, #32]	; (80208e4 <MX_USART1_UART_Init+0x58>)
 80208c4:	2200      	movs	r2, #0
 80208c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80208c8:	4b06      	ldr	r3, [pc, #24]	; (80208e4 <MX_USART1_UART_Init+0x58>)
 80208ca:	2200      	movs	r2, #0
 80208cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80208ce:	4b05      	ldr	r3, [pc, #20]	; (80208e4 <MX_USART1_UART_Init+0x58>)
 80208d0:	0018      	movs	r0, r3
 80208d2:	f001 fb8f 	bl	8021ff4 <HAL_UART_Init>
 80208d6:	1e03      	subs	r3, r0, #0
 80208d8:	d001      	beq.n	80208de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80208da:	f7ff feff 	bl	80206dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80208de:	46c0      	nop			; (mov r8, r8)
 80208e0:	46bd      	mov	sp, r7
 80208e2:	bd80      	pop	{r7, pc}
 80208e4:	20000098 	.word	0x20000098
 80208e8:	40013800 	.word	0x40013800

080208ec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80208ec:	b580      	push	{r7, lr}
 80208ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80208f0:	4b14      	ldr	r3, [pc, #80]	; (8020944 <MX_USART2_UART_Init+0x58>)
 80208f2:	4a15      	ldr	r2, [pc, #84]	; (8020948 <MX_USART2_UART_Init+0x5c>)
 80208f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80208f6:	4b13      	ldr	r3, [pc, #76]	; (8020944 <MX_USART2_UART_Init+0x58>)
 80208f8:	2296      	movs	r2, #150	; 0x96
 80208fa:	0192      	lsls	r2, r2, #6
 80208fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80208fe:	4b11      	ldr	r3, [pc, #68]	; (8020944 <MX_USART2_UART_Init+0x58>)
 8020900:	2200      	movs	r2, #0
 8020902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8020904:	4b0f      	ldr	r3, [pc, #60]	; (8020944 <MX_USART2_UART_Init+0x58>)
 8020906:	2200      	movs	r2, #0
 8020908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 802090a:	4b0e      	ldr	r3, [pc, #56]	; (8020944 <MX_USART2_UART_Init+0x58>)
 802090c:	2200      	movs	r2, #0
 802090e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8020910:	4b0c      	ldr	r3, [pc, #48]	; (8020944 <MX_USART2_UART_Init+0x58>)
 8020912:	220c      	movs	r2, #12
 8020914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020916:	4b0b      	ldr	r3, [pc, #44]	; (8020944 <MX_USART2_UART_Init+0x58>)
 8020918:	2200      	movs	r2, #0
 802091a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 802091c:	4b09      	ldr	r3, [pc, #36]	; (8020944 <MX_USART2_UART_Init+0x58>)
 802091e:	2200      	movs	r2, #0
 8020920:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8020922:	4b08      	ldr	r3, [pc, #32]	; (8020944 <MX_USART2_UART_Init+0x58>)
 8020924:	2200      	movs	r2, #0
 8020926:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8020928:	4b06      	ldr	r3, [pc, #24]	; (8020944 <MX_USART2_UART_Init+0x58>)
 802092a:	2200      	movs	r2, #0
 802092c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 802092e:	4b05      	ldr	r3, [pc, #20]	; (8020944 <MX_USART2_UART_Init+0x58>)
 8020930:	0018      	movs	r0, r3
 8020932:	f001 fb5f 	bl	8021ff4 <HAL_UART_Init>
 8020936:	1e03      	subs	r3, r0, #0
 8020938:	d001      	beq.n	802093e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 802093a:	f7ff fecf 	bl	80206dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 802093e:	46c0      	nop			; (mov r8, r8)
 8020940:	46bd      	mov	sp, r7
 8020942:	bd80      	pop	{r7, pc}
 8020944:	2000011c 	.word	0x2000011c
 8020948:	40004400 	.word	0x40004400

0802094c <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 802094c:	b580      	push	{r7, lr}
 802094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8020950:	4b14      	ldr	r3, [pc, #80]	; (80209a4 <MX_USART4_UART_Init+0x58>)
 8020952:	4a15      	ldr	r2, [pc, #84]	; (80209a8 <MX_USART4_UART_Init+0x5c>)
 8020954:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8020956:	4b13      	ldr	r3, [pc, #76]	; (80209a4 <MX_USART4_UART_Init+0x58>)
 8020958:	2296      	movs	r2, #150	; 0x96
 802095a:	0192      	lsls	r2, r2, #6
 802095c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 802095e:	4b11      	ldr	r3, [pc, #68]	; (80209a4 <MX_USART4_UART_Init+0x58>)
 8020960:	2200      	movs	r2, #0
 8020962:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8020964:	4b0f      	ldr	r3, [pc, #60]	; (80209a4 <MX_USART4_UART_Init+0x58>)
 8020966:	2200      	movs	r2, #0
 8020968:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 802096a:	4b0e      	ldr	r3, [pc, #56]	; (80209a4 <MX_USART4_UART_Init+0x58>)
 802096c:	2200      	movs	r2, #0
 802096e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8020970:	4b0c      	ldr	r3, [pc, #48]	; (80209a4 <MX_USART4_UART_Init+0x58>)
 8020972:	220c      	movs	r2, #12
 8020974:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020976:	4b0b      	ldr	r3, [pc, #44]	; (80209a4 <MX_USART4_UART_Init+0x58>)
 8020978:	2200      	movs	r2, #0
 802097a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 802097c:	4b09      	ldr	r3, [pc, #36]	; (80209a4 <MX_USART4_UART_Init+0x58>)
 802097e:	2200      	movs	r2, #0
 8020980:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8020982:	4b08      	ldr	r3, [pc, #32]	; (80209a4 <MX_USART4_UART_Init+0x58>)
 8020984:	2200      	movs	r2, #0
 8020986:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8020988:	4b06      	ldr	r3, [pc, #24]	; (80209a4 <MX_USART4_UART_Init+0x58>)
 802098a:	2200      	movs	r2, #0
 802098c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 802098e:	4b05      	ldr	r3, [pc, #20]	; (80209a4 <MX_USART4_UART_Init+0x58>)
 8020990:	0018      	movs	r0, r3
 8020992:	f001 fb2f 	bl	8021ff4 <HAL_UART_Init>
 8020996:	1e03      	subs	r3, r0, #0
 8020998:	d001      	beq.n	802099e <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 802099a:	f7ff fe9f 	bl	80206dc <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 802099e:	46c0      	nop			; (mov r8, r8)
 80209a0:	46bd      	mov	sp, r7
 80209a2:	bd80      	pop	{r7, pc}
 80209a4:	200001a0 	.word	0x200001a0
 80209a8:	40004c00 	.word	0x40004c00

080209ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80209ac:	b590      	push	{r4, r7, lr}
 80209ae:	b08b      	sub	sp, #44	; 0x2c
 80209b0:	af00      	add	r7, sp, #0
 80209b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80209b4:	2414      	movs	r4, #20
 80209b6:	193b      	adds	r3, r7, r4
 80209b8:	0018      	movs	r0, r3
 80209ba:	2314      	movs	r3, #20
 80209bc:	001a      	movs	r2, r3
 80209be:	2100      	movs	r1, #0
 80209c0:	f002 f8bc 	bl	8022b3c <memset>
  if(uartHandle->Instance==USART1)
 80209c4:	687b      	ldr	r3, [r7, #4]
 80209c6:	681b      	ldr	r3, [r3, #0]
 80209c8:	4a48      	ldr	r2, [pc, #288]	; (8020aec <HAL_UART_MspInit+0x140>)
 80209ca:	4293      	cmp	r3, r2
 80209cc:	d12b      	bne.n	8020a26 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80209ce:	4b48      	ldr	r3, [pc, #288]	; (8020af0 <HAL_UART_MspInit+0x144>)
 80209d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80209d2:	4b47      	ldr	r3, [pc, #284]	; (8020af0 <HAL_UART_MspInit+0x144>)
 80209d4:	2180      	movs	r1, #128	; 0x80
 80209d6:	01c9      	lsls	r1, r1, #7
 80209d8:	430a      	orrs	r2, r1
 80209da:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80209dc:	4b44      	ldr	r3, [pc, #272]	; (8020af0 <HAL_UART_MspInit+0x144>)
 80209de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80209e0:	4b43      	ldr	r3, [pc, #268]	; (8020af0 <HAL_UART_MspInit+0x144>)
 80209e2:	2101      	movs	r1, #1
 80209e4:	430a      	orrs	r2, r1
 80209e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80209e8:	4b41      	ldr	r3, [pc, #260]	; (8020af0 <HAL_UART_MspInit+0x144>)
 80209ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80209ec:	2201      	movs	r2, #1
 80209ee:	4013      	ands	r3, r2
 80209f0:	613b      	str	r3, [r7, #16]
 80209f2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80209f4:	193b      	adds	r3, r7, r4
 80209f6:	22c0      	movs	r2, #192	; 0xc0
 80209f8:	00d2      	lsls	r2, r2, #3
 80209fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80209fc:	0021      	movs	r1, r4
 80209fe:	187b      	adds	r3, r7, r1
 8020a00:	2202      	movs	r2, #2
 8020a02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020a04:	187b      	adds	r3, r7, r1
 8020a06:	2200      	movs	r2, #0
 8020a08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020a0a:	187b      	adds	r3, r7, r1
 8020a0c:	2203      	movs	r2, #3
 8020a0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8020a10:	187b      	adds	r3, r7, r1
 8020a12:	2204      	movs	r2, #4
 8020a14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020a16:	187a      	adds	r2, r7, r1
 8020a18:	23a0      	movs	r3, #160	; 0xa0
 8020a1a:	05db      	lsls	r3, r3, #23
 8020a1c:	0011      	movs	r1, r2
 8020a1e:	0018      	movs	r0, r3
 8020a20:	f000 f9e0 	bl	8020de4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8020a24:	e05e      	b.n	8020ae4 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART2)
 8020a26:	687b      	ldr	r3, [r7, #4]
 8020a28:	681b      	ldr	r3, [r3, #0]
 8020a2a:	4a32      	ldr	r2, [pc, #200]	; (8020af4 <HAL_UART_MspInit+0x148>)
 8020a2c:	4293      	cmp	r3, r2
 8020a2e:	d12a      	bne.n	8020a86 <HAL_UART_MspInit+0xda>
    __HAL_RCC_USART2_CLK_ENABLE();
 8020a30:	4b2f      	ldr	r3, [pc, #188]	; (8020af0 <HAL_UART_MspInit+0x144>)
 8020a32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020a34:	4b2e      	ldr	r3, [pc, #184]	; (8020af0 <HAL_UART_MspInit+0x144>)
 8020a36:	2180      	movs	r1, #128	; 0x80
 8020a38:	0289      	lsls	r1, r1, #10
 8020a3a:	430a      	orrs	r2, r1
 8020a3c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020a3e:	4b2c      	ldr	r3, [pc, #176]	; (8020af0 <HAL_UART_MspInit+0x144>)
 8020a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020a42:	4b2b      	ldr	r3, [pc, #172]	; (8020af0 <HAL_UART_MspInit+0x144>)
 8020a44:	2101      	movs	r1, #1
 8020a46:	430a      	orrs	r2, r1
 8020a48:	62da      	str	r2, [r3, #44]	; 0x2c
 8020a4a:	4b29      	ldr	r3, [pc, #164]	; (8020af0 <HAL_UART_MspInit+0x144>)
 8020a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020a4e:	2201      	movs	r2, #1
 8020a50:	4013      	ands	r3, r2
 8020a52:	60fb      	str	r3, [r7, #12]
 8020a54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8020a56:	2114      	movs	r1, #20
 8020a58:	187b      	adds	r3, r7, r1
 8020a5a:	220c      	movs	r2, #12
 8020a5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020a5e:	187b      	adds	r3, r7, r1
 8020a60:	2202      	movs	r2, #2
 8020a62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020a64:	187b      	adds	r3, r7, r1
 8020a66:	2200      	movs	r2, #0
 8020a68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020a6a:	187b      	adds	r3, r7, r1
 8020a6c:	2203      	movs	r2, #3
 8020a6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8020a70:	187b      	adds	r3, r7, r1
 8020a72:	2204      	movs	r2, #4
 8020a74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020a76:	187a      	adds	r2, r7, r1
 8020a78:	23a0      	movs	r3, #160	; 0xa0
 8020a7a:	05db      	lsls	r3, r3, #23
 8020a7c:	0011      	movs	r1, r2
 8020a7e:	0018      	movs	r0, r3
 8020a80:	f000 f9b0 	bl	8020de4 <HAL_GPIO_Init>
}
 8020a84:	e02e      	b.n	8020ae4 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART4)
 8020a86:	687b      	ldr	r3, [r7, #4]
 8020a88:	681b      	ldr	r3, [r3, #0]
 8020a8a:	4a1b      	ldr	r2, [pc, #108]	; (8020af8 <HAL_UART_MspInit+0x14c>)
 8020a8c:	4293      	cmp	r3, r2
 8020a8e:	d129      	bne.n	8020ae4 <HAL_UART_MspInit+0x138>
    __HAL_RCC_USART4_CLK_ENABLE();
 8020a90:	4b17      	ldr	r3, [pc, #92]	; (8020af0 <HAL_UART_MspInit+0x144>)
 8020a92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020a94:	4b16      	ldr	r3, [pc, #88]	; (8020af0 <HAL_UART_MspInit+0x144>)
 8020a96:	2180      	movs	r1, #128	; 0x80
 8020a98:	0309      	lsls	r1, r1, #12
 8020a9a:	430a      	orrs	r2, r1
 8020a9c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8020a9e:	4b14      	ldr	r3, [pc, #80]	; (8020af0 <HAL_UART_MspInit+0x144>)
 8020aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020aa2:	4b13      	ldr	r3, [pc, #76]	; (8020af0 <HAL_UART_MspInit+0x144>)
 8020aa4:	2104      	movs	r1, #4
 8020aa6:	430a      	orrs	r2, r1
 8020aa8:	62da      	str	r2, [r3, #44]	; 0x2c
 8020aaa:	4b11      	ldr	r3, [pc, #68]	; (8020af0 <HAL_UART_MspInit+0x144>)
 8020aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020aae:	2204      	movs	r2, #4
 8020ab0:	4013      	ands	r3, r2
 8020ab2:	60bb      	str	r3, [r7, #8]
 8020ab4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8020ab6:	2114      	movs	r1, #20
 8020ab8:	187b      	adds	r3, r7, r1
 8020aba:	22c0      	movs	r2, #192	; 0xc0
 8020abc:	0112      	lsls	r2, r2, #4
 8020abe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020ac0:	187b      	adds	r3, r7, r1
 8020ac2:	2202      	movs	r2, #2
 8020ac4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020ac6:	187b      	adds	r3, r7, r1
 8020ac8:	2200      	movs	r2, #0
 8020aca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020acc:	187b      	adds	r3, r7, r1
 8020ace:	2203      	movs	r2, #3
 8020ad0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8020ad2:	187b      	adds	r3, r7, r1
 8020ad4:	2206      	movs	r2, #6
 8020ad6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020ad8:	187b      	adds	r3, r7, r1
 8020ada:	4a08      	ldr	r2, [pc, #32]	; (8020afc <HAL_UART_MspInit+0x150>)
 8020adc:	0019      	movs	r1, r3
 8020ade:	0010      	movs	r0, r2
 8020ae0:	f000 f980 	bl	8020de4 <HAL_GPIO_Init>
}
 8020ae4:	46c0      	nop			; (mov r8, r8)
 8020ae6:	46bd      	mov	sp, r7
 8020ae8:	b00b      	add	sp, #44	; 0x2c
 8020aea:	bd90      	pop	{r4, r7, pc}
 8020aec:	40013800 	.word	0x40013800
 8020af0:	40021000 	.word	0x40021000
 8020af4:	40004400 	.word	0x40004400
 8020af8:	40004c00 	.word	0x40004c00
 8020afc:	50000800 	.word	0x50000800

08020b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8020b00:	480d      	ldr	r0, [pc, #52]	; (8020b38 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8020b02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8020b04:	480d      	ldr	r0, [pc, #52]	; (8020b3c <LoopForever+0x6>)
  ldr r1, =_edata
 8020b06:	490e      	ldr	r1, [pc, #56]	; (8020b40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8020b08:	4a0e      	ldr	r2, [pc, #56]	; (8020b44 <LoopForever+0xe>)
  movs r3, #0
 8020b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8020b0c:	e002      	b.n	8020b14 <LoopCopyDataInit>

08020b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8020b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8020b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8020b12:	3304      	adds	r3, #4

08020b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8020b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8020b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8020b18:	d3f9      	bcc.n	8020b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8020b1a:	4a0b      	ldr	r2, [pc, #44]	; (8020b48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8020b1c:	4c0b      	ldr	r4, [pc, #44]	; (8020b4c <LoopForever+0x16>)
  movs r3, #0
 8020b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8020b20:	e001      	b.n	8020b26 <LoopFillZerobss>

08020b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8020b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8020b24:	3204      	adds	r2, #4

08020b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8020b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8020b28:	d3fb      	bcc.n	8020b22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8020b2a:	f7ff fea3 	bl	8020874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8020b2e:	f001 ffe1 	bl	8022af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8020b32:	f7ff fd21 	bl	8020578 <main>

08020b36 <LoopForever>:

LoopForever:
    b LoopForever
 8020b36:	e7fe      	b.n	8020b36 <LoopForever>
   ldr   r0, =_estack
 8020b38:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8020b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8020b40:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8020b44:	08023bdc 	.word	0x08023bdc
  ldr r2, =_sbss
 8020b48:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8020b4c:	20000238 	.word	0x20000238

08020b50 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8020b50:	e7fe      	b.n	8020b50 <ADC1_COMP_IRQHandler>
	...

08020b54 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8020b54:	b580      	push	{r7, lr}
 8020b56:	b082      	sub	sp, #8
 8020b58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8020b5a:	1dfb      	adds	r3, r7, #7
 8020b5c:	2200      	movs	r2, #0
 8020b5e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8020b60:	4b0b      	ldr	r3, [pc, #44]	; (8020b90 <HAL_Init+0x3c>)
 8020b62:	681a      	ldr	r2, [r3, #0]
 8020b64:	4b0a      	ldr	r3, [pc, #40]	; (8020b90 <HAL_Init+0x3c>)
 8020b66:	2140      	movs	r1, #64	; 0x40
 8020b68:	430a      	orrs	r2, r1
 8020b6a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8020b6c:	2000      	movs	r0, #0
 8020b6e:	f000 f811 	bl	8020b94 <HAL_InitTick>
 8020b72:	1e03      	subs	r3, r0, #0
 8020b74:	d003      	beq.n	8020b7e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8020b76:	1dfb      	adds	r3, r7, #7
 8020b78:	2201      	movs	r2, #1
 8020b7a:	701a      	strb	r2, [r3, #0]
 8020b7c:	e001      	b.n	8020b82 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8020b7e:	f7ff fdb3 	bl	80206e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8020b82:	1dfb      	adds	r3, r7, #7
 8020b84:	781b      	ldrb	r3, [r3, #0]
}
 8020b86:	0018      	movs	r0, r3
 8020b88:	46bd      	mov	sp, r7
 8020b8a:	b002      	add	sp, #8
 8020b8c:	bd80      	pop	{r7, pc}
 8020b8e:	46c0      	nop			; (mov r8, r8)
 8020b90:	40022000 	.word	0x40022000

08020b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8020b94:	b590      	push	{r4, r7, lr}
 8020b96:	b083      	sub	sp, #12
 8020b98:	af00      	add	r7, sp, #0
 8020b9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8020b9c:	4b14      	ldr	r3, [pc, #80]	; (8020bf0 <HAL_InitTick+0x5c>)
 8020b9e:	681c      	ldr	r4, [r3, #0]
 8020ba0:	4b14      	ldr	r3, [pc, #80]	; (8020bf4 <HAL_InitTick+0x60>)
 8020ba2:	781b      	ldrb	r3, [r3, #0]
 8020ba4:	0019      	movs	r1, r3
 8020ba6:	23fa      	movs	r3, #250	; 0xfa
 8020ba8:	0098      	lsls	r0, r3, #2
 8020baa:	f7ff fab7 	bl	802011c <__udivsi3>
 8020bae:	0003      	movs	r3, r0
 8020bb0:	0019      	movs	r1, r3
 8020bb2:	0020      	movs	r0, r4
 8020bb4:	f7ff fab2 	bl	802011c <__udivsi3>
 8020bb8:	0003      	movs	r3, r0
 8020bba:	0018      	movs	r0, r3
 8020bbc:	f000 f905 	bl	8020dca <HAL_SYSTICK_Config>
 8020bc0:	1e03      	subs	r3, r0, #0
 8020bc2:	d001      	beq.n	8020bc8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8020bc4:	2301      	movs	r3, #1
 8020bc6:	e00f      	b.n	8020be8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020bc8:	687b      	ldr	r3, [r7, #4]
 8020bca:	2b03      	cmp	r3, #3
 8020bcc:	d80b      	bhi.n	8020be6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8020bce:	6879      	ldr	r1, [r7, #4]
 8020bd0:	2301      	movs	r3, #1
 8020bd2:	425b      	negs	r3, r3
 8020bd4:	2200      	movs	r2, #0
 8020bd6:	0018      	movs	r0, r3
 8020bd8:	f000 f8e2 	bl	8020da0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8020bdc:	4b06      	ldr	r3, [pc, #24]	; (8020bf8 <HAL_InitTick+0x64>)
 8020bde:	687a      	ldr	r2, [r7, #4]
 8020be0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8020be2:	2300      	movs	r3, #0
 8020be4:	e000      	b.n	8020be8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8020be6:	2301      	movs	r3, #1
}
 8020be8:	0018      	movs	r0, r3
 8020bea:	46bd      	mov	sp, r7
 8020bec:	b003      	add	sp, #12
 8020bee:	bd90      	pop	{r4, r7, pc}
 8020bf0:	20000000 	.word	0x20000000
 8020bf4:	20000008 	.word	0x20000008
 8020bf8:	20000004 	.word	0x20000004

08020bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8020bfc:	b580      	push	{r7, lr}
 8020bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8020c00:	4b05      	ldr	r3, [pc, #20]	; (8020c18 <HAL_IncTick+0x1c>)
 8020c02:	781b      	ldrb	r3, [r3, #0]
 8020c04:	001a      	movs	r2, r3
 8020c06:	4b05      	ldr	r3, [pc, #20]	; (8020c1c <HAL_IncTick+0x20>)
 8020c08:	681b      	ldr	r3, [r3, #0]
 8020c0a:	18d2      	adds	r2, r2, r3
 8020c0c:	4b03      	ldr	r3, [pc, #12]	; (8020c1c <HAL_IncTick+0x20>)
 8020c0e:	601a      	str	r2, [r3, #0]
}
 8020c10:	46c0      	nop			; (mov r8, r8)
 8020c12:	46bd      	mov	sp, r7
 8020c14:	bd80      	pop	{r7, pc}
 8020c16:	46c0      	nop			; (mov r8, r8)
 8020c18:	20000008 	.word	0x20000008
 8020c1c:	20000224 	.word	0x20000224

08020c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8020c20:	b580      	push	{r7, lr}
 8020c22:	af00      	add	r7, sp, #0
  return uwTick;
 8020c24:	4b02      	ldr	r3, [pc, #8]	; (8020c30 <HAL_GetTick+0x10>)
 8020c26:	681b      	ldr	r3, [r3, #0]
}
 8020c28:	0018      	movs	r0, r3
 8020c2a:	46bd      	mov	sp, r7
 8020c2c:	bd80      	pop	{r7, pc}
 8020c2e:	46c0      	nop			; (mov r8, r8)
 8020c30:	20000224 	.word	0x20000224

08020c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8020c34:	b580      	push	{r7, lr}
 8020c36:	b084      	sub	sp, #16
 8020c38:	af00      	add	r7, sp, #0
 8020c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8020c3c:	f7ff fff0 	bl	8020c20 <HAL_GetTick>
 8020c40:	0003      	movs	r3, r0
 8020c42:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8020c44:	687b      	ldr	r3, [r7, #4]
 8020c46:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8020c48:	68fb      	ldr	r3, [r7, #12]
 8020c4a:	3301      	adds	r3, #1
 8020c4c:	d005      	beq.n	8020c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8020c4e:	4b0a      	ldr	r3, [pc, #40]	; (8020c78 <HAL_Delay+0x44>)
 8020c50:	781b      	ldrb	r3, [r3, #0]
 8020c52:	001a      	movs	r2, r3
 8020c54:	68fb      	ldr	r3, [r7, #12]
 8020c56:	189b      	adds	r3, r3, r2
 8020c58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8020c5a:	46c0      	nop			; (mov r8, r8)
 8020c5c:	f7ff ffe0 	bl	8020c20 <HAL_GetTick>
 8020c60:	0002      	movs	r2, r0
 8020c62:	68bb      	ldr	r3, [r7, #8]
 8020c64:	1ad3      	subs	r3, r2, r3
 8020c66:	68fa      	ldr	r2, [r7, #12]
 8020c68:	429a      	cmp	r2, r3
 8020c6a:	d8f7      	bhi.n	8020c5c <HAL_Delay+0x28>
  {
  }
}
 8020c6c:	46c0      	nop			; (mov r8, r8)
 8020c6e:	46c0      	nop			; (mov r8, r8)
 8020c70:	46bd      	mov	sp, r7
 8020c72:	b004      	add	sp, #16
 8020c74:	bd80      	pop	{r7, pc}
 8020c76:	46c0      	nop			; (mov r8, r8)
 8020c78:	20000008 	.word	0x20000008

08020c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8020c7c:	b590      	push	{r4, r7, lr}
 8020c7e:	b083      	sub	sp, #12
 8020c80:	af00      	add	r7, sp, #0
 8020c82:	0002      	movs	r2, r0
 8020c84:	6039      	str	r1, [r7, #0]
 8020c86:	1dfb      	adds	r3, r7, #7
 8020c88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8020c8a:	1dfb      	adds	r3, r7, #7
 8020c8c:	781b      	ldrb	r3, [r3, #0]
 8020c8e:	2b7f      	cmp	r3, #127	; 0x7f
 8020c90:	d828      	bhi.n	8020ce4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8020c92:	4a2f      	ldr	r2, [pc, #188]	; (8020d50 <__NVIC_SetPriority+0xd4>)
 8020c94:	1dfb      	adds	r3, r7, #7
 8020c96:	781b      	ldrb	r3, [r3, #0]
 8020c98:	b25b      	sxtb	r3, r3
 8020c9a:	089b      	lsrs	r3, r3, #2
 8020c9c:	33c0      	adds	r3, #192	; 0xc0
 8020c9e:	009b      	lsls	r3, r3, #2
 8020ca0:	589b      	ldr	r3, [r3, r2]
 8020ca2:	1dfa      	adds	r2, r7, #7
 8020ca4:	7812      	ldrb	r2, [r2, #0]
 8020ca6:	0011      	movs	r1, r2
 8020ca8:	2203      	movs	r2, #3
 8020caa:	400a      	ands	r2, r1
 8020cac:	00d2      	lsls	r2, r2, #3
 8020cae:	21ff      	movs	r1, #255	; 0xff
 8020cb0:	4091      	lsls	r1, r2
 8020cb2:	000a      	movs	r2, r1
 8020cb4:	43d2      	mvns	r2, r2
 8020cb6:	401a      	ands	r2, r3
 8020cb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8020cba:	683b      	ldr	r3, [r7, #0]
 8020cbc:	019b      	lsls	r3, r3, #6
 8020cbe:	22ff      	movs	r2, #255	; 0xff
 8020cc0:	401a      	ands	r2, r3
 8020cc2:	1dfb      	adds	r3, r7, #7
 8020cc4:	781b      	ldrb	r3, [r3, #0]
 8020cc6:	0018      	movs	r0, r3
 8020cc8:	2303      	movs	r3, #3
 8020cca:	4003      	ands	r3, r0
 8020ccc:	00db      	lsls	r3, r3, #3
 8020cce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8020cd0:	481f      	ldr	r0, [pc, #124]	; (8020d50 <__NVIC_SetPriority+0xd4>)
 8020cd2:	1dfb      	adds	r3, r7, #7
 8020cd4:	781b      	ldrb	r3, [r3, #0]
 8020cd6:	b25b      	sxtb	r3, r3
 8020cd8:	089b      	lsrs	r3, r3, #2
 8020cda:	430a      	orrs	r2, r1
 8020cdc:	33c0      	adds	r3, #192	; 0xc0
 8020cde:	009b      	lsls	r3, r3, #2
 8020ce0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8020ce2:	e031      	b.n	8020d48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8020ce4:	4a1b      	ldr	r2, [pc, #108]	; (8020d54 <__NVIC_SetPriority+0xd8>)
 8020ce6:	1dfb      	adds	r3, r7, #7
 8020ce8:	781b      	ldrb	r3, [r3, #0]
 8020cea:	0019      	movs	r1, r3
 8020cec:	230f      	movs	r3, #15
 8020cee:	400b      	ands	r3, r1
 8020cf0:	3b08      	subs	r3, #8
 8020cf2:	089b      	lsrs	r3, r3, #2
 8020cf4:	3306      	adds	r3, #6
 8020cf6:	009b      	lsls	r3, r3, #2
 8020cf8:	18d3      	adds	r3, r2, r3
 8020cfa:	3304      	adds	r3, #4
 8020cfc:	681b      	ldr	r3, [r3, #0]
 8020cfe:	1dfa      	adds	r2, r7, #7
 8020d00:	7812      	ldrb	r2, [r2, #0]
 8020d02:	0011      	movs	r1, r2
 8020d04:	2203      	movs	r2, #3
 8020d06:	400a      	ands	r2, r1
 8020d08:	00d2      	lsls	r2, r2, #3
 8020d0a:	21ff      	movs	r1, #255	; 0xff
 8020d0c:	4091      	lsls	r1, r2
 8020d0e:	000a      	movs	r2, r1
 8020d10:	43d2      	mvns	r2, r2
 8020d12:	401a      	ands	r2, r3
 8020d14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8020d16:	683b      	ldr	r3, [r7, #0]
 8020d18:	019b      	lsls	r3, r3, #6
 8020d1a:	22ff      	movs	r2, #255	; 0xff
 8020d1c:	401a      	ands	r2, r3
 8020d1e:	1dfb      	adds	r3, r7, #7
 8020d20:	781b      	ldrb	r3, [r3, #0]
 8020d22:	0018      	movs	r0, r3
 8020d24:	2303      	movs	r3, #3
 8020d26:	4003      	ands	r3, r0
 8020d28:	00db      	lsls	r3, r3, #3
 8020d2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8020d2c:	4809      	ldr	r0, [pc, #36]	; (8020d54 <__NVIC_SetPriority+0xd8>)
 8020d2e:	1dfb      	adds	r3, r7, #7
 8020d30:	781b      	ldrb	r3, [r3, #0]
 8020d32:	001c      	movs	r4, r3
 8020d34:	230f      	movs	r3, #15
 8020d36:	4023      	ands	r3, r4
 8020d38:	3b08      	subs	r3, #8
 8020d3a:	089b      	lsrs	r3, r3, #2
 8020d3c:	430a      	orrs	r2, r1
 8020d3e:	3306      	adds	r3, #6
 8020d40:	009b      	lsls	r3, r3, #2
 8020d42:	18c3      	adds	r3, r0, r3
 8020d44:	3304      	adds	r3, #4
 8020d46:	601a      	str	r2, [r3, #0]
}
 8020d48:	46c0      	nop			; (mov r8, r8)
 8020d4a:	46bd      	mov	sp, r7
 8020d4c:	b003      	add	sp, #12
 8020d4e:	bd90      	pop	{r4, r7, pc}
 8020d50:	e000e100 	.word	0xe000e100
 8020d54:	e000ed00 	.word	0xe000ed00

08020d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8020d58:	b580      	push	{r7, lr}
 8020d5a:	b082      	sub	sp, #8
 8020d5c:	af00      	add	r7, sp, #0
 8020d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8020d60:	687b      	ldr	r3, [r7, #4]
 8020d62:	1e5a      	subs	r2, r3, #1
 8020d64:	2380      	movs	r3, #128	; 0x80
 8020d66:	045b      	lsls	r3, r3, #17
 8020d68:	429a      	cmp	r2, r3
 8020d6a:	d301      	bcc.n	8020d70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8020d6c:	2301      	movs	r3, #1
 8020d6e:	e010      	b.n	8020d92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8020d70:	4b0a      	ldr	r3, [pc, #40]	; (8020d9c <SysTick_Config+0x44>)
 8020d72:	687a      	ldr	r2, [r7, #4]
 8020d74:	3a01      	subs	r2, #1
 8020d76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8020d78:	2301      	movs	r3, #1
 8020d7a:	425b      	negs	r3, r3
 8020d7c:	2103      	movs	r1, #3
 8020d7e:	0018      	movs	r0, r3
 8020d80:	f7ff ff7c 	bl	8020c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8020d84:	4b05      	ldr	r3, [pc, #20]	; (8020d9c <SysTick_Config+0x44>)
 8020d86:	2200      	movs	r2, #0
 8020d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8020d8a:	4b04      	ldr	r3, [pc, #16]	; (8020d9c <SysTick_Config+0x44>)
 8020d8c:	2207      	movs	r2, #7
 8020d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8020d90:	2300      	movs	r3, #0
}
 8020d92:	0018      	movs	r0, r3
 8020d94:	46bd      	mov	sp, r7
 8020d96:	b002      	add	sp, #8
 8020d98:	bd80      	pop	{r7, pc}
 8020d9a:	46c0      	nop			; (mov r8, r8)
 8020d9c:	e000e010 	.word	0xe000e010

08020da0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8020da0:	b580      	push	{r7, lr}
 8020da2:	b084      	sub	sp, #16
 8020da4:	af00      	add	r7, sp, #0
 8020da6:	60b9      	str	r1, [r7, #8]
 8020da8:	607a      	str	r2, [r7, #4]
 8020daa:	210f      	movs	r1, #15
 8020dac:	187b      	adds	r3, r7, r1
 8020dae:	1c02      	adds	r2, r0, #0
 8020db0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8020db2:	68ba      	ldr	r2, [r7, #8]
 8020db4:	187b      	adds	r3, r7, r1
 8020db6:	781b      	ldrb	r3, [r3, #0]
 8020db8:	b25b      	sxtb	r3, r3
 8020dba:	0011      	movs	r1, r2
 8020dbc:	0018      	movs	r0, r3
 8020dbe:	f7ff ff5d 	bl	8020c7c <__NVIC_SetPriority>
}
 8020dc2:	46c0      	nop			; (mov r8, r8)
 8020dc4:	46bd      	mov	sp, r7
 8020dc6:	b004      	add	sp, #16
 8020dc8:	bd80      	pop	{r7, pc}

08020dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8020dca:	b580      	push	{r7, lr}
 8020dcc:	b082      	sub	sp, #8
 8020dce:	af00      	add	r7, sp, #0
 8020dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8020dd2:	687b      	ldr	r3, [r7, #4]
 8020dd4:	0018      	movs	r0, r3
 8020dd6:	f7ff ffbf 	bl	8020d58 <SysTick_Config>
 8020dda:	0003      	movs	r3, r0
}
 8020ddc:	0018      	movs	r0, r3
 8020dde:	46bd      	mov	sp, r7
 8020de0:	b002      	add	sp, #8
 8020de2:	bd80      	pop	{r7, pc}

08020de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8020de4:	b580      	push	{r7, lr}
 8020de6:	b086      	sub	sp, #24
 8020de8:	af00      	add	r7, sp, #0
 8020dea:	6078      	str	r0, [r7, #4]
 8020dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8020dee:	2300      	movs	r3, #0
 8020df0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8020df2:	2300      	movs	r3, #0
 8020df4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8020df6:	2300      	movs	r3, #0
 8020df8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8020dfa:	e155      	b.n	80210a8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8020dfc:	683b      	ldr	r3, [r7, #0]
 8020dfe:	681b      	ldr	r3, [r3, #0]
 8020e00:	2101      	movs	r1, #1
 8020e02:	697a      	ldr	r2, [r7, #20]
 8020e04:	4091      	lsls	r1, r2
 8020e06:	000a      	movs	r2, r1
 8020e08:	4013      	ands	r3, r2
 8020e0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8020e0c:	68fb      	ldr	r3, [r7, #12]
 8020e0e:	2b00      	cmp	r3, #0
 8020e10:	d100      	bne.n	8020e14 <HAL_GPIO_Init+0x30>
 8020e12:	e146      	b.n	80210a2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8020e14:	683b      	ldr	r3, [r7, #0]
 8020e16:	685b      	ldr	r3, [r3, #4]
 8020e18:	2203      	movs	r2, #3
 8020e1a:	4013      	ands	r3, r2
 8020e1c:	2b01      	cmp	r3, #1
 8020e1e:	d005      	beq.n	8020e2c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8020e20:	683b      	ldr	r3, [r7, #0]
 8020e22:	685b      	ldr	r3, [r3, #4]
 8020e24:	2203      	movs	r2, #3
 8020e26:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8020e28:	2b02      	cmp	r3, #2
 8020e2a:	d130      	bne.n	8020e8e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8020e2c:	687b      	ldr	r3, [r7, #4]
 8020e2e:	689b      	ldr	r3, [r3, #8]
 8020e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8020e32:	697b      	ldr	r3, [r7, #20]
 8020e34:	005b      	lsls	r3, r3, #1
 8020e36:	2203      	movs	r2, #3
 8020e38:	409a      	lsls	r2, r3
 8020e3a:	0013      	movs	r3, r2
 8020e3c:	43da      	mvns	r2, r3
 8020e3e:	693b      	ldr	r3, [r7, #16]
 8020e40:	4013      	ands	r3, r2
 8020e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8020e44:	683b      	ldr	r3, [r7, #0]
 8020e46:	68da      	ldr	r2, [r3, #12]
 8020e48:	697b      	ldr	r3, [r7, #20]
 8020e4a:	005b      	lsls	r3, r3, #1
 8020e4c:	409a      	lsls	r2, r3
 8020e4e:	0013      	movs	r3, r2
 8020e50:	693a      	ldr	r2, [r7, #16]
 8020e52:	4313      	orrs	r3, r2
 8020e54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8020e56:	687b      	ldr	r3, [r7, #4]
 8020e58:	693a      	ldr	r2, [r7, #16]
 8020e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8020e5c:	687b      	ldr	r3, [r7, #4]
 8020e5e:	685b      	ldr	r3, [r3, #4]
 8020e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8020e62:	2201      	movs	r2, #1
 8020e64:	697b      	ldr	r3, [r7, #20]
 8020e66:	409a      	lsls	r2, r3
 8020e68:	0013      	movs	r3, r2
 8020e6a:	43da      	mvns	r2, r3
 8020e6c:	693b      	ldr	r3, [r7, #16]
 8020e6e:	4013      	ands	r3, r2
 8020e70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8020e72:	683b      	ldr	r3, [r7, #0]
 8020e74:	685b      	ldr	r3, [r3, #4]
 8020e76:	091b      	lsrs	r3, r3, #4
 8020e78:	2201      	movs	r2, #1
 8020e7a:	401a      	ands	r2, r3
 8020e7c:	697b      	ldr	r3, [r7, #20]
 8020e7e:	409a      	lsls	r2, r3
 8020e80:	0013      	movs	r3, r2
 8020e82:	693a      	ldr	r2, [r7, #16]
 8020e84:	4313      	orrs	r3, r2
 8020e86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8020e88:	687b      	ldr	r3, [r7, #4]
 8020e8a:	693a      	ldr	r2, [r7, #16]
 8020e8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8020e8e:	683b      	ldr	r3, [r7, #0]
 8020e90:	685b      	ldr	r3, [r3, #4]
 8020e92:	2203      	movs	r2, #3
 8020e94:	4013      	ands	r3, r2
 8020e96:	2b03      	cmp	r3, #3
 8020e98:	d017      	beq.n	8020eca <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8020e9a:	687b      	ldr	r3, [r7, #4]
 8020e9c:	68db      	ldr	r3, [r3, #12]
 8020e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8020ea0:	697b      	ldr	r3, [r7, #20]
 8020ea2:	005b      	lsls	r3, r3, #1
 8020ea4:	2203      	movs	r2, #3
 8020ea6:	409a      	lsls	r2, r3
 8020ea8:	0013      	movs	r3, r2
 8020eaa:	43da      	mvns	r2, r3
 8020eac:	693b      	ldr	r3, [r7, #16]
 8020eae:	4013      	ands	r3, r2
 8020eb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8020eb2:	683b      	ldr	r3, [r7, #0]
 8020eb4:	689a      	ldr	r2, [r3, #8]
 8020eb6:	697b      	ldr	r3, [r7, #20]
 8020eb8:	005b      	lsls	r3, r3, #1
 8020eba:	409a      	lsls	r2, r3
 8020ebc:	0013      	movs	r3, r2
 8020ebe:	693a      	ldr	r2, [r7, #16]
 8020ec0:	4313      	orrs	r3, r2
 8020ec2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8020ec4:	687b      	ldr	r3, [r7, #4]
 8020ec6:	693a      	ldr	r2, [r7, #16]
 8020ec8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8020eca:	683b      	ldr	r3, [r7, #0]
 8020ecc:	685b      	ldr	r3, [r3, #4]
 8020ece:	2203      	movs	r2, #3
 8020ed0:	4013      	ands	r3, r2
 8020ed2:	2b02      	cmp	r3, #2
 8020ed4:	d123      	bne.n	8020f1e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8020ed6:	697b      	ldr	r3, [r7, #20]
 8020ed8:	08da      	lsrs	r2, r3, #3
 8020eda:	687b      	ldr	r3, [r7, #4]
 8020edc:	3208      	adds	r2, #8
 8020ede:	0092      	lsls	r2, r2, #2
 8020ee0:	58d3      	ldr	r3, [r2, r3]
 8020ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8020ee4:	697b      	ldr	r3, [r7, #20]
 8020ee6:	2207      	movs	r2, #7
 8020ee8:	4013      	ands	r3, r2
 8020eea:	009b      	lsls	r3, r3, #2
 8020eec:	220f      	movs	r2, #15
 8020eee:	409a      	lsls	r2, r3
 8020ef0:	0013      	movs	r3, r2
 8020ef2:	43da      	mvns	r2, r3
 8020ef4:	693b      	ldr	r3, [r7, #16]
 8020ef6:	4013      	ands	r3, r2
 8020ef8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8020efa:	683b      	ldr	r3, [r7, #0]
 8020efc:	691a      	ldr	r2, [r3, #16]
 8020efe:	697b      	ldr	r3, [r7, #20]
 8020f00:	2107      	movs	r1, #7
 8020f02:	400b      	ands	r3, r1
 8020f04:	009b      	lsls	r3, r3, #2
 8020f06:	409a      	lsls	r2, r3
 8020f08:	0013      	movs	r3, r2
 8020f0a:	693a      	ldr	r2, [r7, #16]
 8020f0c:	4313      	orrs	r3, r2
 8020f0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8020f10:	697b      	ldr	r3, [r7, #20]
 8020f12:	08da      	lsrs	r2, r3, #3
 8020f14:	687b      	ldr	r3, [r7, #4]
 8020f16:	3208      	adds	r2, #8
 8020f18:	0092      	lsls	r2, r2, #2
 8020f1a:	6939      	ldr	r1, [r7, #16]
 8020f1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8020f1e:	687b      	ldr	r3, [r7, #4]
 8020f20:	681b      	ldr	r3, [r3, #0]
 8020f22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8020f24:	697b      	ldr	r3, [r7, #20]
 8020f26:	005b      	lsls	r3, r3, #1
 8020f28:	2203      	movs	r2, #3
 8020f2a:	409a      	lsls	r2, r3
 8020f2c:	0013      	movs	r3, r2
 8020f2e:	43da      	mvns	r2, r3
 8020f30:	693b      	ldr	r3, [r7, #16]
 8020f32:	4013      	ands	r3, r2
 8020f34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8020f36:	683b      	ldr	r3, [r7, #0]
 8020f38:	685b      	ldr	r3, [r3, #4]
 8020f3a:	2203      	movs	r2, #3
 8020f3c:	401a      	ands	r2, r3
 8020f3e:	697b      	ldr	r3, [r7, #20]
 8020f40:	005b      	lsls	r3, r3, #1
 8020f42:	409a      	lsls	r2, r3
 8020f44:	0013      	movs	r3, r2
 8020f46:	693a      	ldr	r2, [r7, #16]
 8020f48:	4313      	orrs	r3, r2
 8020f4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8020f4c:	687b      	ldr	r3, [r7, #4]
 8020f4e:	693a      	ldr	r2, [r7, #16]
 8020f50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8020f52:	683b      	ldr	r3, [r7, #0]
 8020f54:	685a      	ldr	r2, [r3, #4]
 8020f56:	23c0      	movs	r3, #192	; 0xc0
 8020f58:	029b      	lsls	r3, r3, #10
 8020f5a:	4013      	ands	r3, r2
 8020f5c:	d100      	bne.n	8020f60 <HAL_GPIO_Init+0x17c>
 8020f5e:	e0a0      	b.n	80210a2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020f60:	4b57      	ldr	r3, [pc, #348]	; (80210c0 <HAL_GPIO_Init+0x2dc>)
 8020f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8020f64:	4b56      	ldr	r3, [pc, #344]	; (80210c0 <HAL_GPIO_Init+0x2dc>)
 8020f66:	2101      	movs	r1, #1
 8020f68:	430a      	orrs	r2, r1
 8020f6a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8020f6c:	4a55      	ldr	r2, [pc, #340]	; (80210c4 <HAL_GPIO_Init+0x2e0>)
 8020f6e:	697b      	ldr	r3, [r7, #20]
 8020f70:	089b      	lsrs	r3, r3, #2
 8020f72:	3302      	adds	r3, #2
 8020f74:	009b      	lsls	r3, r3, #2
 8020f76:	589b      	ldr	r3, [r3, r2]
 8020f78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8020f7a:	697b      	ldr	r3, [r7, #20]
 8020f7c:	2203      	movs	r2, #3
 8020f7e:	4013      	ands	r3, r2
 8020f80:	009b      	lsls	r3, r3, #2
 8020f82:	220f      	movs	r2, #15
 8020f84:	409a      	lsls	r2, r3
 8020f86:	0013      	movs	r3, r2
 8020f88:	43da      	mvns	r2, r3
 8020f8a:	693b      	ldr	r3, [r7, #16]
 8020f8c:	4013      	ands	r3, r2
 8020f8e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8020f90:	687a      	ldr	r2, [r7, #4]
 8020f92:	23a0      	movs	r3, #160	; 0xa0
 8020f94:	05db      	lsls	r3, r3, #23
 8020f96:	429a      	cmp	r2, r3
 8020f98:	d01f      	beq.n	8020fda <HAL_GPIO_Init+0x1f6>
 8020f9a:	687b      	ldr	r3, [r7, #4]
 8020f9c:	4a4a      	ldr	r2, [pc, #296]	; (80210c8 <HAL_GPIO_Init+0x2e4>)
 8020f9e:	4293      	cmp	r3, r2
 8020fa0:	d019      	beq.n	8020fd6 <HAL_GPIO_Init+0x1f2>
 8020fa2:	687b      	ldr	r3, [r7, #4]
 8020fa4:	4a49      	ldr	r2, [pc, #292]	; (80210cc <HAL_GPIO_Init+0x2e8>)
 8020fa6:	4293      	cmp	r3, r2
 8020fa8:	d013      	beq.n	8020fd2 <HAL_GPIO_Init+0x1ee>
 8020faa:	687b      	ldr	r3, [r7, #4]
 8020fac:	4a48      	ldr	r2, [pc, #288]	; (80210d0 <HAL_GPIO_Init+0x2ec>)
 8020fae:	4293      	cmp	r3, r2
 8020fb0:	d00d      	beq.n	8020fce <HAL_GPIO_Init+0x1ea>
 8020fb2:	687b      	ldr	r3, [r7, #4]
 8020fb4:	4a47      	ldr	r2, [pc, #284]	; (80210d4 <HAL_GPIO_Init+0x2f0>)
 8020fb6:	4293      	cmp	r3, r2
 8020fb8:	d007      	beq.n	8020fca <HAL_GPIO_Init+0x1e6>
 8020fba:	687b      	ldr	r3, [r7, #4]
 8020fbc:	4a46      	ldr	r2, [pc, #280]	; (80210d8 <HAL_GPIO_Init+0x2f4>)
 8020fbe:	4293      	cmp	r3, r2
 8020fc0:	d101      	bne.n	8020fc6 <HAL_GPIO_Init+0x1e2>
 8020fc2:	2305      	movs	r3, #5
 8020fc4:	e00a      	b.n	8020fdc <HAL_GPIO_Init+0x1f8>
 8020fc6:	2306      	movs	r3, #6
 8020fc8:	e008      	b.n	8020fdc <HAL_GPIO_Init+0x1f8>
 8020fca:	2304      	movs	r3, #4
 8020fcc:	e006      	b.n	8020fdc <HAL_GPIO_Init+0x1f8>
 8020fce:	2303      	movs	r3, #3
 8020fd0:	e004      	b.n	8020fdc <HAL_GPIO_Init+0x1f8>
 8020fd2:	2302      	movs	r3, #2
 8020fd4:	e002      	b.n	8020fdc <HAL_GPIO_Init+0x1f8>
 8020fd6:	2301      	movs	r3, #1
 8020fd8:	e000      	b.n	8020fdc <HAL_GPIO_Init+0x1f8>
 8020fda:	2300      	movs	r3, #0
 8020fdc:	697a      	ldr	r2, [r7, #20]
 8020fde:	2103      	movs	r1, #3
 8020fe0:	400a      	ands	r2, r1
 8020fe2:	0092      	lsls	r2, r2, #2
 8020fe4:	4093      	lsls	r3, r2
 8020fe6:	693a      	ldr	r2, [r7, #16]
 8020fe8:	4313      	orrs	r3, r2
 8020fea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8020fec:	4935      	ldr	r1, [pc, #212]	; (80210c4 <HAL_GPIO_Init+0x2e0>)
 8020fee:	697b      	ldr	r3, [r7, #20]
 8020ff0:	089b      	lsrs	r3, r3, #2
 8020ff2:	3302      	adds	r3, #2
 8020ff4:	009b      	lsls	r3, r3, #2
 8020ff6:	693a      	ldr	r2, [r7, #16]
 8020ff8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8020ffa:	4b38      	ldr	r3, [pc, #224]	; (80210dc <HAL_GPIO_Init+0x2f8>)
 8020ffc:	681b      	ldr	r3, [r3, #0]
 8020ffe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8021000:	68fb      	ldr	r3, [r7, #12]
 8021002:	43da      	mvns	r2, r3
 8021004:	693b      	ldr	r3, [r7, #16]
 8021006:	4013      	ands	r3, r2
 8021008:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 802100a:	683b      	ldr	r3, [r7, #0]
 802100c:	685a      	ldr	r2, [r3, #4]
 802100e:	2380      	movs	r3, #128	; 0x80
 8021010:	025b      	lsls	r3, r3, #9
 8021012:	4013      	ands	r3, r2
 8021014:	d003      	beq.n	802101e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8021016:	693a      	ldr	r2, [r7, #16]
 8021018:	68fb      	ldr	r3, [r7, #12]
 802101a:	4313      	orrs	r3, r2
 802101c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 802101e:	4b2f      	ldr	r3, [pc, #188]	; (80210dc <HAL_GPIO_Init+0x2f8>)
 8021020:	693a      	ldr	r2, [r7, #16]
 8021022:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8021024:	4b2d      	ldr	r3, [pc, #180]	; (80210dc <HAL_GPIO_Init+0x2f8>)
 8021026:	685b      	ldr	r3, [r3, #4]
 8021028:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 802102a:	68fb      	ldr	r3, [r7, #12]
 802102c:	43da      	mvns	r2, r3
 802102e:	693b      	ldr	r3, [r7, #16]
 8021030:	4013      	ands	r3, r2
 8021032:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8021034:	683b      	ldr	r3, [r7, #0]
 8021036:	685a      	ldr	r2, [r3, #4]
 8021038:	2380      	movs	r3, #128	; 0x80
 802103a:	029b      	lsls	r3, r3, #10
 802103c:	4013      	ands	r3, r2
 802103e:	d003      	beq.n	8021048 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8021040:	693a      	ldr	r2, [r7, #16]
 8021042:	68fb      	ldr	r3, [r7, #12]
 8021044:	4313      	orrs	r3, r2
 8021046:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8021048:	4b24      	ldr	r3, [pc, #144]	; (80210dc <HAL_GPIO_Init+0x2f8>)
 802104a:	693a      	ldr	r2, [r7, #16]
 802104c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 802104e:	4b23      	ldr	r3, [pc, #140]	; (80210dc <HAL_GPIO_Init+0x2f8>)
 8021050:	689b      	ldr	r3, [r3, #8]
 8021052:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8021054:	68fb      	ldr	r3, [r7, #12]
 8021056:	43da      	mvns	r2, r3
 8021058:	693b      	ldr	r3, [r7, #16]
 802105a:	4013      	ands	r3, r2
 802105c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 802105e:	683b      	ldr	r3, [r7, #0]
 8021060:	685a      	ldr	r2, [r3, #4]
 8021062:	2380      	movs	r3, #128	; 0x80
 8021064:	035b      	lsls	r3, r3, #13
 8021066:	4013      	ands	r3, r2
 8021068:	d003      	beq.n	8021072 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 802106a:	693a      	ldr	r2, [r7, #16]
 802106c:	68fb      	ldr	r3, [r7, #12]
 802106e:	4313      	orrs	r3, r2
 8021070:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8021072:	4b1a      	ldr	r3, [pc, #104]	; (80210dc <HAL_GPIO_Init+0x2f8>)
 8021074:	693a      	ldr	r2, [r7, #16]
 8021076:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8021078:	4b18      	ldr	r3, [pc, #96]	; (80210dc <HAL_GPIO_Init+0x2f8>)
 802107a:	68db      	ldr	r3, [r3, #12]
 802107c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 802107e:	68fb      	ldr	r3, [r7, #12]
 8021080:	43da      	mvns	r2, r3
 8021082:	693b      	ldr	r3, [r7, #16]
 8021084:	4013      	ands	r3, r2
 8021086:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8021088:	683b      	ldr	r3, [r7, #0]
 802108a:	685a      	ldr	r2, [r3, #4]
 802108c:	2380      	movs	r3, #128	; 0x80
 802108e:	039b      	lsls	r3, r3, #14
 8021090:	4013      	ands	r3, r2
 8021092:	d003      	beq.n	802109c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8021094:	693a      	ldr	r2, [r7, #16]
 8021096:	68fb      	ldr	r3, [r7, #12]
 8021098:	4313      	orrs	r3, r2
 802109a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 802109c:	4b0f      	ldr	r3, [pc, #60]	; (80210dc <HAL_GPIO_Init+0x2f8>)
 802109e:	693a      	ldr	r2, [r7, #16]
 80210a0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80210a2:	697b      	ldr	r3, [r7, #20]
 80210a4:	3301      	adds	r3, #1
 80210a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80210a8:	683b      	ldr	r3, [r7, #0]
 80210aa:	681a      	ldr	r2, [r3, #0]
 80210ac:	697b      	ldr	r3, [r7, #20]
 80210ae:	40da      	lsrs	r2, r3
 80210b0:	1e13      	subs	r3, r2, #0
 80210b2:	d000      	beq.n	80210b6 <HAL_GPIO_Init+0x2d2>
 80210b4:	e6a2      	b.n	8020dfc <HAL_GPIO_Init+0x18>
  }
}
 80210b6:	46c0      	nop			; (mov r8, r8)
 80210b8:	46c0      	nop			; (mov r8, r8)
 80210ba:	46bd      	mov	sp, r7
 80210bc:	b006      	add	sp, #24
 80210be:	bd80      	pop	{r7, pc}
 80210c0:	40021000 	.word	0x40021000
 80210c4:	40010000 	.word	0x40010000
 80210c8:	50000400 	.word	0x50000400
 80210cc:	50000800 	.word	0x50000800
 80210d0:	50000c00 	.word	0x50000c00
 80210d4:	50001000 	.word	0x50001000
 80210d8:	50001c00 	.word	0x50001c00
 80210dc:	40010400 	.word	0x40010400

080210e0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80210e0:	b580      	push	{r7, lr}
 80210e2:	b082      	sub	sp, #8
 80210e4:	af00      	add	r7, sp, #0
 80210e6:	6078      	str	r0, [r7, #4]
 80210e8:	0008      	movs	r0, r1
 80210ea:	0011      	movs	r1, r2
 80210ec:	1cbb      	adds	r3, r7, #2
 80210ee:	1c02      	adds	r2, r0, #0
 80210f0:	801a      	strh	r2, [r3, #0]
 80210f2:	1c7b      	adds	r3, r7, #1
 80210f4:	1c0a      	adds	r2, r1, #0
 80210f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80210f8:	1c7b      	adds	r3, r7, #1
 80210fa:	781b      	ldrb	r3, [r3, #0]
 80210fc:	2b00      	cmp	r3, #0
 80210fe:	d004      	beq.n	802110a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8021100:	1cbb      	adds	r3, r7, #2
 8021102:	881a      	ldrh	r2, [r3, #0]
 8021104:	687b      	ldr	r3, [r7, #4]
 8021106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8021108:	e003      	b.n	8021112 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 802110a:	1cbb      	adds	r3, r7, #2
 802110c:	881a      	ldrh	r2, [r3, #0]
 802110e:	687b      	ldr	r3, [r7, #4]
 8021110:	629a      	str	r2, [r3, #40]	; 0x28
}
 8021112:	46c0      	nop			; (mov r8, r8)
 8021114:	46bd      	mov	sp, r7
 8021116:	b002      	add	sp, #8
 8021118:	bd80      	pop	{r7, pc}
	...

0802111c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 802111c:	b5b0      	push	{r4, r5, r7, lr}
 802111e:	b08a      	sub	sp, #40	; 0x28
 8021120:	af00      	add	r7, sp, #0
 8021122:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8021124:	687b      	ldr	r3, [r7, #4]
 8021126:	2b00      	cmp	r3, #0
 8021128:	d102      	bne.n	8021130 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 802112a:	2301      	movs	r3, #1
 802112c:	f000 fbbf 	bl	80218ae <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8021130:	4bc9      	ldr	r3, [pc, #804]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 8021132:	68db      	ldr	r3, [r3, #12]
 8021134:	220c      	movs	r2, #12
 8021136:	4013      	ands	r3, r2
 8021138:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 802113a:	4bc7      	ldr	r3, [pc, #796]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 802113c:	68da      	ldr	r2, [r3, #12]
 802113e:	2380      	movs	r3, #128	; 0x80
 8021140:	025b      	lsls	r3, r3, #9
 8021142:	4013      	ands	r3, r2
 8021144:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8021146:	687b      	ldr	r3, [r7, #4]
 8021148:	681b      	ldr	r3, [r3, #0]
 802114a:	2201      	movs	r2, #1
 802114c:	4013      	ands	r3, r2
 802114e:	d100      	bne.n	8021152 <HAL_RCC_OscConfig+0x36>
 8021150:	e07e      	b.n	8021250 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8021152:	69fb      	ldr	r3, [r7, #28]
 8021154:	2b08      	cmp	r3, #8
 8021156:	d007      	beq.n	8021168 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8021158:	69fb      	ldr	r3, [r7, #28]
 802115a:	2b0c      	cmp	r3, #12
 802115c:	d112      	bne.n	8021184 <HAL_RCC_OscConfig+0x68>
 802115e:	69ba      	ldr	r2, [r7, #24]
 8021160:	2380      	movs	r3, #128	; 0x80
 8021162:	025b      	lsls	r3, r3, #9
 8021164:	429a      	cmp	r2, r3
 8021166:	d10d      	bne.n	8021184 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021168:	4bbb      	ldr	r3, [pc, #748]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 802116a:	681a      	ldr	r2, [r3, #0]
 802116c:	2380      	movs	r3, #128	; 0x80
 802116e:	029b      	lsls	r3, r3, #10
 8021170:	4013      	ands	r3, r2
 8021172:	d100      	bne.n	8021176 <HAL_RCC_OscConfig+0x5a>
 8021174:	e06b      	b.n	802124e <HAL_RCC_OscConfig+0x132>
 8021176:	687b      	ldr	r3, [r7, #4]
 8021178:	685b      	ldr	r3, [r3, #4]
 802117a:	2b00      	cmp	r3, #0
 802117c:	d167      	bne.n	802124e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 802117e:	2301      	movs	r3, #1
 8021180:	f000 fb95 	bl	80218ae <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8021184:	687b      	ldr	r3, [r7, #4]
 8021186:	685a      	ldr	r2, [r3, #4]
 8021188:	2380      	movs	r3, #128	; 0x80
 802118a:	025b      	lsls	r3, r3, #9
 802118c:	429a      	cmp	r2, r3
 802118e:	d107      	bne.n	80211a0 <HAL_RCC_OscConfig+0x84>
 8021190:	4bb1      	ldr	r3, [pc, #708]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 8021192:	681a      	ldr	r2, [r3, #0]
 8021194:	4bb0      	ldr	r3, [pc, #704]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 8021196:	2180      	movs	r1, #128	; 0x80
 8021198:	0249      	lsls	r1, r1, #9
 802119a:	430a      	orrs	r2, r1
 802119c:	601a      	str	r2, [r3, #0]
 802119e:	e027      	b.n	80211f0 <HAL_RCC_OscConfig+0xd4>
 80211a0:	687b      	ldr	r3, [r7, #4]
 80211a2:	685a      	ldr	r2, [r3, #4]
 80211a4:	23a0      	movs	r3, #160	; 0xa0
 80211a6:	02db      	lsls	r3, r3, #11
 80211a8:	429a      	cmp	r2, r3
 80211aa:	d10e      	bne.n	80211ca <HAL_RCC_OscConfig+0xae>
 80211ac:	4baa      	ldr	r3, [pc, #680]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 80211ae:	681a      	ldr	r2, [r3, #0]
 80211b0:	4ba9      	ldr	r3, [pc, #676]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 80211b2:	2180      	movs	r1, #128	; 0x80
 80211b4:	02c9      	lsls	r1, r1, #11
 80211b6:	430a      	orrs	r2, r1
 80211b8:	601a      	str	r2, [r3, #0]
 80211ba:	4ba7      	ldr	r3, [pc, #668]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 80211bc:	681a      	ldr	r2, [r3, #0]
 80211be:	4ba6      	ldr	r3, [pc, #664]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 80211c0:	2180      	movs	r1, #128	; 0x80
 80211c2:	0249      	lsls	r1, r1, #9
 80211c4:	430a      	orrs	r2, r1
 80211c6:	601a      	str	r2, [r3, #0]
 80211c8:	e012      	b.n	80211f0 <HAL_RCC_OscConfig+0xd4>
 80211ca:	4ba3      	ldr	r3, [pc, #652]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 80211cc:	681a      	ldr	r2, [r3, #0]
 80211ce:	4ba2      	ldr	r3, [pc, #648]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 80211d0:	49a2      	ldr	r1, [pc, #648]	; (802145c <HAL_RCC_OscConfig+0x340>)
 80211d2:	400a      	ands	r2, r1
 80211d4:	601a      	str	r2, [r3, #0]
 80211d6:	4ba0      	ldr	r3, [pc, #640]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 80211d8:	681a      	ldr	r2, [r3, #0]
 80211da:	2380      	movs	r3, #128	; 0x80
 80211dc:	025b      	lsls	r3, r3, #9
 80211de:	4013      	ands	r3, r2
 80211e0:	60fb      	str	r3, [r7, #12]
 80211e2:	68fb      	ldr	r3, [r7, #12]
 80211e4:	4b9c      	ldr	r3, [pc, #624]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 80211e6:	681a      	ldr	r2, [r3, #0]
 80211e8:	4b9b      	ldr	r3, [pc, #620]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 80211ea:	499d      	ldr	r1, [pc, #628]	; (8021460 <HAL_RCC_OscConfig+0x344>)
 80211ec:	400a      	ands	r2, r1
 80211ee:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80211f0:	687b      	ldr	r3, [r7, #4]
 80211f2:	685b      	ldr	r3, [r3, #4]
 80211f4:	2b00      	cmp	r3, #0
 80211f6:	d015      	beq.n	8021224 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80211f8:	f7ff fd12 	bl	8020c20 <HAL_GetTick>
 80211fc:	0003      	movs	r3, r0
 80211fe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8021200:	e009      	b.n	8021216 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8021202:	f7ff fd0d 	bl	8020c20 <HAL_GetTick>
 8021206:	0002      	movs	r2, r0
 8021208:	697b      	ldr	r3, [r7, #20]
 802120a:	1ad3      	subs	r3, r2, r3
 802120c:	2b64      	cmp	r3, #100	; 0x64
 802120e:	d902      	bls.n	8021216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8021210:	2303      	movs	r3, #3
 8021212:	f000 fb4c 	bl	80218ae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8021216:	4b90      	ldr	r3, [pc, #576]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 8021218:	681a      	ldr	r2, [r3, #0]
 802121a:	2380      	movs	r3, #128	; 0x80
 802121c:	029b      	lsls	r3, r3, #10
 802121e:	4013      	ands	r3, r2
 8021220:	d0ef      	beq.n	8021202 <HAL_RCC_OscConfig+0xe6>
 8021222:	e015      	b.n	8021250 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8021224:	f7ff fcfc 	bl	8020c20 <HAL_GetTick>
 8021228:	0003      	movs	r3, r0
 802122a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 802122c:	e008      	b.n	8021240 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802122e:	f7ff fcf7 	bl	8020c20 <HAL_GetTick>
 8021232:	0002      	movs	r2, r0
 8021234:	697b      	ldr	r3, [r7, #20]
 8021236:	1ad3      	subs	r3, r2, r3
 8021238:	2b64      	cmp	r3, #100	; 0x64
 802123a:	d901      	bls.n	8021240 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 802123c:	2303      	movs	r3, #3
 802123e:	e336      	b.n	80218ae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8021240:	4b85      	ldr	r3, [pc, #532]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 8021242:	681a      	ldr	r2, [r3, #0]
 8021244:	2380      	movs	r3, #128	; 0x80
 8021246:	029b      	lsls	r3, r3, #10
 8021248:	4013      	ands	r3, r2
 802124a:	d1f0      	bne.n	802122e <HAL_RCC_OscConfig+0x112>
 802124c:	e000      	b.n	8021250 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802124e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8021250:	687b      	ldr	r3, [r7, #4]
 8021252:	681b      	ldr	r3, [r3, #0]
 8021254:	2202      	movs	r2, #2
 8021256:	4013      	ands	r3, r2
 8021258:	d100      	bne.n	802125c <HAL_RCC_OscConfig+0x140>
 802125a:	e099      	b.n	8021390 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 802125c:	687b      	ldr	r3, [r7, #4]
 802125e:	68db      	ldr	r3, [r3, #12]
 8021260:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8021262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021264:	2220      	movs	r2, #32
 8021266:	4013      	ands	r3, r2
 8021268:	d009      	beq.n	802127e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 802126a:	4b7b      	ldr	r3, [pc, #492]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 802126c:	681a      	ldr	r2, [r3, #0]
 802126e:	4b7a      	ldr	r3, [pc, #488]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 8021270:	2120      	movs	r1, #32
 8021272:	430a      	orrs	r2, r1
 8021274:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8021276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021278:	2220      	movs	r2, #32
 802127a:	4393      	bics	r3, r2
 802127c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 802127e:	69fb      	ldr	r3, [r7, #28]
 8021280:	2b04      	cmp	r3, #4
 8021282:	d005      	beq.n	8021290 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8021284:	69fb      	ldr	r3, [r7, #28]
 8021286:	2b0c      	cmp	r3, #12
 8021288:	d13e      	bne.n	8021308 <HAL_RCC_OscConfig+0x1ec>
 802128a:	69bb      	ldr	r3, [r7, #24]
 802128c:	2b00      	cmp	r3, #0
 802128e:	d13b      	bne.n	8021308 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8021290:	4b71      	ldr	r3, [pc, #452]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 8021292:	681b      	ldr	r3, [r3, #0]
 8021294:	2204      	movs	r2, #4
 8021296:	4013      	ands	r3, r2
 8021298:	d004      	beq.n	80212a4 <HAL_RCC_OscConfig+0x188>
 802129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802129c:	2b00      	cmp	r3, #0
 802129e:	d101      	bne.n	80212a4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80212a0:	2301      	movs	r3, #1
 80212a2:	e304      	b.n	80218ae <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80212a4:	4b6c      	ldr	r3, [pc, #432]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 80212a6:	685b      	ldr	r3, [r3, #4]
 80212a8:	4a6e      	ldr	r2, [pc, #440]	; (8021464 <HAL_RCC_OscConfig+0x348>)
 80212aa:	4013      	ands	r3, r2
 80212ac:	0019      	movs	r1, r3
 80212ae:	687b      	ldr	r3, [r7, #4]
 80212b0:	691b      	ldr	r3, [r3, #16]
 80212b2:	021a      	lsls	r2, r3, #8
 80212b4:	4b68      	ldr	r3, [pc, #416]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 80212b6:	430a      	orrs	r2, r1
 80212b8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80212ba:	4b67      	ldr	r3, [pc, #412]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 80212bc:	681b      	ldr	r3, [r3, #0]
 80212be:	2209      	movs	r2, #9
 80212c0:	4393      	bics	r3, r2
 80212c2:	0019      	movs	r1, r3
 80212c4:	4b64      	ldr	r3, [pc, #400]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 80212c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80212c8:	430a      	orrs	r2, r1
 80212ca:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80212cc:	f000 fc42 	bl	8021b54 <HAL_RCC_GetSysClockFreq>
 80212d0:	0001      	movs	r1, r0
 80212d2:	4b61      	ldr	r3, [pc, #388]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 80212d4:	68db      	ldr	r3, [r3, #12]
 80212d6:	091b      	lsrs	r3, r3, #4
 80212d8:	220f      	movs	r2, #15
 80212da:	4013      	ands	r3, r2
 80212dc:	4a62      	ldr	r2, [pc, #392]	; (8021468 <HAL_RCC_OscConfig+0x34c>)
 80212de:	5cd3      	ldrb	r3, [r2, r3]
 80212e0:	000a      	movs	r2, r1
 80212e2:	40da      	lsrs	r2, r3
 80212e4:	4b61      	ldr	r3, [pc, #388]	; (802146c <HAL_RCC_OscConfig+0x350>)
 80212e6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80212e8:	4b61      	ldr	r3, [pc, #388]	; (8021470 <HAL_RCC_OscConfig+0x354>)
 80212ea:	681b      	ldr	r3, [r3, #0]
 80212ec:	2513      	movs	r5, #19
 80212ee:	197c      	adds	r4, r7, r5
 80212f0:	0018      	movs	r0, r3
 80212f2:	f7ff fc4f 	bl	8020b94 <HAL_InitTick>
 80212f6:	0003      	movs	r3, r0
 80212f8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80212fa:	197b      	adds	r3, r7, r5
 80212fc:	781b      	ldrb	r3, [r3, #0]
 80212fe:	2b00      	cmp	r3, #0
 8021300:	d046      	beq.n	8021390 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8021302:	197b      	adds	r3, r7, r5
 8021304:	781b      	ldrb	r3, [r3, #0]
 8021306:	e2d2      	b.n	80218ae <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8021308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802130a:	2b00      	cmp	r3, #0
 802130c:	d027      	beq.n	802135e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 802130e:	4b52      	ldr	r3, [pc, #328]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 8021310:	681b      	ldr	r3, [r3, #0]
 8021312:	2209      	movs	r2, #9
 8021314:	4393      	bics	r3, r2
 8021316:	0019      	movs	r1, r3
 8021318:	4b4f      	ldr	r3, [pc, #316]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 802131a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802131c:	430a      	orrs	r2, r1
 802131e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8021320:	f7ff fc7e 	bl	8020c20 <HAL_GetTick>
 8021324:	0003      	movs	r3, r0
 8021326:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8021328:	e008      	b.n	802133c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802132a:	f7ff fc79 	bl	8020c20 <HAL_GetTick>
 802132e:	0002      	movs	r2, r0
 8021330:	697b      	ldr	r3, [r7, #20]
 8021332:	1ad3      	subs	r3, r2, r3
 8021334:	2b02      	cmp	r3, #2
 8021336:	d901      	bls.n	802133c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8021338:	2303      	movs	r3, #3
 802133a:	e2b8      	b.n	80218ae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 802133c:	4b46      	ldr	r3, [pc, #280]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 802133e:	681b      	ldr	r3, [r3, #0]
 8021340:	2204      	movs	r2, #4
 8021342:	4013      	ands	r3, r2
 8021344:	d0f1      	beq.n	802132a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021346:	4b44      	ldr	r3, [pc, #272]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 8021348:	685b      	ldr	r3, [r3, #4]
 802134a:	4a46      	ldr	r2, [pc, #280]	; (8021464 <HAL_RCC_OscConfig+0x348>)
 802134c:	4013      	ands	r3, r2
 802134e:	0019      	movs	r1, r3
 8021350:	687b      	ldr	r3, [r7, #4]
 8021352:	691b      	ldr	r3, [r3, #16]
 8021354:	021a      	lsls	r2, r3, #8
 8021356:	4b40      	ldr	r3, [pc, #256]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 8021358:	430a      	orrs	r2, r1
 802135a:	605a      	str	r2, [r3, #4]
 802135c:	e018      	b.n	8021390 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802135e:	4b3e      	ldr	r3, [pc, #248]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 8021360:	681a      	ldr	r2, [r3, #0]
 8021362:	4b3d      	ldr	r3, [pc, #244]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 8021364:	2101      	movs	r1, #1
 8021366:	438a      	bics	r2, r1
 8021368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802136a:	f7ff fc59 	bl	8020c20 <HAL_GetTick>
 802136e:	0003      	movs	r3, r0
 8021370:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8021372:	e008      	b.n	8021386 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8021374:	f7ff fc54 	bl	8020c20 <HAL_GetTick>
 8021378:	0002      	movs	r2, r0
 802137a:	697b      	ldr	r3, [r7, #20]
 802137c:	1ad3      	subs	r3, r2, r3
 802137e:	2b02      	cmp	r3, #2
 8021380:	d901      	bls.n	8021386 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8021382:	2303      	movs	r3, #3
 8021384:	e293      	b.n	80218ae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8021386:	4b34      	ldr	r3, [pc, #208]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 8021388:	681b      	ldr	r3, [r3, #0]
 802138a:	2204      	movs	r2, #4
 802138c:	4013      	ands	r3, r2
 802138e:	d1f1      	bne.n	8021374 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8021390:	687b      	ldr	r3, [r7, #4]
 8021392:	681b      	ldr	r3, [r3, #0]
 8021394:	2210      	movs	r2, #16
 8021396:	4013      	ands	r3, r2
 8021398:	d100      	bne.n	802139c <HAL_RCC_OscConfig+0x280>
 802139a:	e0a2      	b.n	80214e2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 802139c:	69fb      	ldr	r3, [r7, #28]
 802139e:	2b00      	cmp	r3, #0
 80213a0:	d140      	bne.n	8021424 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80213a2:	4b2d      	ldr	r3, [pc, #180]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 80213a4:	681a      	ldr	r2, [r3, #0]
 80213a6:	2380      	movs	r3, #128	; 0x80
 80213a8:	009b      	lsls	r3, r3, #2
 80213aa:	4013      	ands	r3, r2
 80213ac:	d005      	beq.n	80213ba <HAL_RCC_OscConfig+0x29e>
 80213ae:	687b      	ldr	r3, [r7, #4]
 80213b0:	69db      	ldr	r3, [r3, #28]
 80213b2:	2b00      	cmp	r3, #0
 80213b4:	d101      	bne.n	80213ba <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80213b6:	2301      	movs	r3, #1
 80213b8:	e279      	b.n	80218ae <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80213ba:	4b27      	ldr	r3, [pc, #156]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 80213bc:	685b      	ldr	r3, [r3, #4]
 80213be:	4a2d      	ldr	r2, [pc, #180]	; (8021474 <HAL_RCC_OscConfig+0x358>)
 80213c0:	4013      	ands	r3, r2
 80213c2:	0019      	movs	r1, r3
 80213c4:	687b      	ldr	r3, [r7, #4]
 80213c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80213c8:	4b23      	ldr	r3, [pc, #140]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 80213ca:	430a      	orrs	r2, r1
 80213cc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80213ce:	4b22      	ldr	r3, [pc, #136]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 80213d0:	685b      	ldr	r3, [r3, #4]
 80213d2:	021b      	lsls	r3, r3, #8
 80213d4:	0a19      	lsrs	r1, r3, #8
 80213d6:	687b      	ldr	r3, [r7, #4]
 80213d8:	6a1b      	ldr	r3, [r3, #32]
 80213da:	061a      	lsls	r2, r3, #24
 80213dc:	4b1e      	ldr	r3, [pc, #120]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 80213de:	430a      	orrs	r2, r1
 80213e0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80213e2:	687b      	ldr	r3, [r7, #4]
 80213e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80213e6:	0b5b      	lsrs	r3, r3, #13
 80213e8:	3301      	adds	r3, #1
 80213ea:	2280      	movs	r2, #128	; 0x80
 80213ec:	0212      	lsls	r2, r2, #8
 80213ee:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80213f0:	4b19      	ldr	r3, [pc, #100]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 80213f2:	68db      	ldr	r3, [r3, #12]
 80213f4:	091b      	lsrs	r3, r3, #4
 80213f6:	210f      	movs	r1, #15
 80213f8:	400b      	ands	r3, r1
 80213fa:	491b      	ldr	r1, [pc, #108]	; (8021468 <HAL_RCC_OscConfig+0x34c>)
 80213fc:	5ccb      	ldrb	r3, [r1, r3]
 80213fe:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8021400:	4b1a      	ldr	r3, [pc, #104]	; (802146c <HAL_RCC_OscConfig+0x350>)
 8021402:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8021404:	4b1a      	ldr	r3, [pc, #104]	; (8021470 <HAL_RCC_OscConfig+0x354>)
 8021406:	681b      	ldr	r3, [r3, #0]
 8021408:	2513      	movs	r5, #19
 802140a:	197c      	adds	r4, r7, r5
 802140c:	0018      	movs	r0, r3
 802140e:	f7ff fbc1 	bl	8020b94 <HAL_InitTick>
 8021412:	0003      	movs	r3, r0
 8021414:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8021416:	197b      	adds	r3, r7, r5
 8021418:	781b      	ldrb	r3, [r3, #0]
 802141a:	2b00      	cmp	r3, #0
 802141c:	d061      	beq.n	80214e2 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 802141e:	197b      	adds	r3, r7, r5
 8021420:	781b      	ldrb	r3, [r3, #0]
 8021422:	e244      	b.n	80218ae <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8021424:	687b      	ldr	r3, [r7, #4]
 8021426:	69db      	ldr	r3, [r3, #28]
 8021428:	2b00      	cmp	r3, #0
 802142a:	d040      	beq.n	80214ae <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 802142c:	4b0a      	ldr	r3, [pc, #40]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 802142e:	681a      	ldr	r2, [r3, #0]
 8021430:	4b09      	ldr	r3, [pc, #36]	; (8021458 <HAL_RCC_OscConfig+0x33c>)
 8021432:	2180      	movs	r1, #128	; 0x80
 8021434:	0049      	lsls	r1, r1, #1
 8021436:	430a      	orrs	r2, r1
 8021438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802143a:	f7ff fbf1 	bl	8020c20 <HAL_GetTick>
 802143e:	0003      	movs	r3, r0
 8021440:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8021442:	e019      	b.n	8021478 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8021444:	f7ff fbec 	bl	8020c20 <HAL_GetTick>
 8021448:	0002      	movs	r2, r0
 802144a:	697b      	ldr	r3, [r7, #20]
 802144c:	1ad3      	subs	r3, r2, r3
 802144e:	2b02      	cmp	r3, #2
 8021450:	d912      	bls.n	8021478 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8021452:	2303      	movs	r3, #3
 8021454:	e22b      	b.n	80218ae <HAL_RCC_OscConfig+0x792>
 8021456:	46c0      	nop			; (mov r8, r8)
 8021458:	40021000 	.word	0x40021000
 802145c:	fffeffff 	.word	0xfffeffff
 8021460:	fffbffff 	.word	0xfffbffff
 8021464:	ffffe0ff 	.word	0xffffe0ff
 8021468:	08023ac8 	.word	0x08023ac8
 802146c:	20000000 	.word	0x20000000
 8021470:	20000004 	.word	0x20000004
 8021474:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8021478:	4bca      	ldr	r3, [pc, #808]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 802147a:	681a      	ldr	r2, [r3, #0]
 802147c:	2380      	movs	r3, #128	; 0x80
 802147e:	009b      	lsls	r3, r3, #2
 8021480:	4013      	ands	r3, r2
 8021482:	d0df      	beq.n	8021444 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8021484:	4bc7      	ldr	r3, [pc, #796]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 8021486:	685b      	ldr	r3, [r3, #4]
 8021488:	4ac7      	ldr	r2, [pc, #796]	; (80217a8 <HAL_RCC_OscConfig+0x68c>)
 802148a:	4013      	ands	r3, r2
 802148c:	0019      	movs	r1, r3
 802148e:	687b      	ldr	r3, [r7, #4]
 8021490:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8021492:	4bc4      	ldr	r3, [pc, #784]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 8021494:	430a      	orrs	r2, r1
 8021496:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8021498:	4bc2      	ldr	r3, [pc, #776]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 802149a:	685b      	ldr	r3, [r3, #4]
 802149c:	021b      	lsls	r3, r3, #8
 802149e:	0a19      	lsrs	r1, r3, #8
 80214a0:	687b      	ldr	r3, [r7, #4]
 80214a2:	6a1b      	ldr	r3, [r3, #32]
 80214a4:	061a      	lsls	r2, r3, #24
 80214a6:	4bbf      	ldr	r3, [pc, #764]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 80214a8:	430a      	orrs	r2, r1
 80214aa:	605a      	str	r2, [r3, #4]
 80214ac:	e019      	b.n	80214e2 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80214ae:	4bbd      	ldr	r3, [pc, #756]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 80214b0:	681a      	ldr	r2, [r3, #0]
 80214b2:	4bbc      	ldr	r3, [pc, #752]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 80214b4:	49bd      	ldr	r1, [pc, #756]	; (80217ac <HAL_RCC_OscConfig+0x690>)
 80214b6:	400a      	ands	r2, r1
 80214b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80214ba:	f7ff fbb1 	bl	8020c20 <HAL_GetTick>
 80214be:	0003      	movs	r3, r0
 80214c0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80214c2:	e008      	b.n	80214d6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80214c4:	f7ff fbac 	bl	8020c20 <HAL_GetTick>
 80214c8:	0002      	movs	r2, r0
 80214ca:	697b      	ldr	r3, [r7, #20]
 80214cc:	1ad3      	subs	r3, r2, r3
 80214ce:	2b02      	cmp	r3, #2
 80214d0:	d901      	bls.n	80214d6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80214d2:	2303      	movs	r3, #3
 80214d4:	e1eb      	b.n	80218ae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80214d6:	4bb3      	ldr	r3, [pc, #716]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 80214d8:	681a      	ldr	r2, [r3, #0]
 80214da:	2380      	movs	r3, #128	; 0x80
 80214dc:	009b      	lsls	r3, r3, #2
 80214de:	4013      	ands	r3, r2
 80214e0:	d1f0      	bne.n	80214c4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80214e2:	687b      	ldr	r3, [r7, #4]
 80214e4:	681b      	ldr	r3, [r3, #0]
 80214e6:	2208      	movs	r2, #8
 80214e8:	4013      	ands	r3, r2
 80214ea:	d036      	beq.n	802155a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80214ec:	687b      	ldr	r3, [r7, #4]
 80214ee:	695b      	ldr	r3, [r3, #20]
 80214f0:	2b00      	cmp	r3, #0
 80214f2:	d019      	beq.n	8021528 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80214f4:	4bab      	ldr	r3, [pc, #684]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 80214f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80214f8:	4baa      	ldr	r3, [pc, #680]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 80214fa:	2101      	movs	r1, #1
 80214fc:	430a      	orrs	r2, r1
 80214fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8021500:	f7ff fb8e 	bl	8020c20 <HAL_GetTick>
 8021504:	0003      	movs	r3, r0
 8021506:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8021508:	e008      	b.n	802151c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802150a:	f7ff fb89 	bl	8020c20 <HAL_GetTick>
 802150e:	0002      	movs	r2, r0
 8021510:	697b      	ldr	r3, [r7, #20]
 8021512:	1ad3      	subs	r3, r2, r3
 8021514:	2b02      	cmp	r3, #2
 8021516:	d901      	bls.n	802151c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8021518:	2303      	movs	r3, #3
 802151a:	e1c8      	b.n	80218ae <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 802151c:	4ba1      	ldr	r3, [pc, #644]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 802151e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021520:	2202      	movs	r2, #2
 8021522:	4013      	ands	r3, r2
 8021524:	d0f1      	beq.n	802150a <HAL_RCC_OscConfig+0x3ee>
 8021526:	e018      	b.n	802155a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8021528:	4b9e      	ldr	r3, [pc, #632]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 802152a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802152c:	4b9d      	ldr	r3, [pc, #628]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 802152e:	2101      	movs	r1, #1
 8021530:	438a      	bics	r2, r1
 8021532:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8021534:	f7ff fb74 	bl	8020c20 <HAL_GetTick>
 8021538:	0003      	movs	r3, r0
 802153a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 802153c:	e008      	b.n	8021550 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802153e:	f7ff fb6f 	bl	8020c20 <HAL_GetTick>
 8021542:	0002      	movs	r2, r0
 8021544:	697b      	ldr	r3, [r7, #20]
 8021546:	1ad3      	subs	r3, r2, r3
 8021548:	2b02      	cmp	r3, #2
 802154a:	d901      	bls.n	8021550 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 802154c:	2303      	movs	r3, #3
 802154e:	e1ae      	b.n	80218ae <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8021550:	4b94      	ldr	r3, [pc, #592]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 8021552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021554:	2202      	movs	r2, #2
 8021556:	4013      	ands	r3, r2
 8021558:	d1f1      	bne.n	802153e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802155a:	687b      	ldr	r3, [r7, #4]
 802155c:	681b      	ldr	r3, [r3, #0]
 802155e:	2204      	movs	r2, #4
 8021560:	4013      	ands	r3, r2
 8021562:	d100      	bne.n	8021566 <HAL_RCC_OscConfig+0x44a>
 8021564:	e0ae      	b.n	80216c4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8021566:	2023      	movs	r0, #35	; 0x23
 8021568:	183b      	adds	r3, r7, r0
 802156a:	2200      	movs	r2, #0
 802156c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 802156e:	4b8d      	ldr	r3, [pc, #564]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 8021570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8021572:	2380      	movs	r3, #128	; 0x80
 8021574:	055b      	lsls	r3, r3, #21
 8021576:	4013      	ands	r3, r2
 8021578:	d109      	bne.n	802158e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 802157a:	4b8a      	ldr	r3, [pc, #552]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 802157c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802157e:	4b89      	ldr	r3, [pc, #548]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 8021580:	2180      	movs	r1, #128	; 0x80
 8021582:	0549      	lsls	r1, r1, #21
 8021584:	430a      	orrs	r2, r1
 8021586:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8021588:	183b      	adds	r3, r7, r0
 802158a:	2201      	movs	r2, #1
 802158c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802158e:	4b88      	ldr	r3, [pc, #544]	; (80217b0 <HAL_RCC_OscConfig+0x694>)
 8021590:	681a      	ldr	r2, [r3, #0]
 8021592:	2380      	movs	r3, #128	; 0x80
 8021594:	005b      	lsls	r3, r3, #1
 8021596:	4013      	ands	r3, r2
 8021598:	d11a      	bne.n	80215d0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 802159a:	4b85      	ldr	r3, [pc, #532]	; (80217b0 <HAL_RCC_OscConfig+0x694>)
 802159c:	681a      	ldr	r2, [r3, #0]
 802159e:	4b84      	ldr	r3, [pc, #528]	; (80217b0 <HAL_RCC_OscConfig+0x694>)
 80215a0:	2180      	movs	r1, #128	; 0x80
 80215a2:	0049      	lsls	r1, r1, #1
 80215a4:	430a      	orrs	r2, r1
 80215a6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80215a8:	f7ff fb3a 	bl	8020c20 <HAL_GetTick>
 80215ac:	0003      	movs	r3, r0
 80215ae:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80215b0:	e008      	b.n	80215c4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80215b2:	f7ff fb35 	bl	8020c20 <HAL_GetTick>
 80215b6:	0002      	movs	r2, r0
 80215b8:	697b      	ldr	r3, [r7, #20]
 80215ba:	1ad3      	subs	r3, r2, r3
 80215bc:	2b64      	cmp	r3, #100	; 0x64
 80215be:	d901      	bls.n	80215c4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80215c0:	2303      	movs	r3, #3
 80215c2:	e174      	b.n	80218ae <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80215c4:	4b7a      	ldr	r3, [pc, #488]	; (80217b0 <HAL_RCC_OscConfig+0x694>)
 80215c6:	681a      	ldr	r2, [r3, #0]
 80215c8:	2380      	movs	r3, #128	; 0x80
 80215ca:	005b      	lsls	r3, r3, #1
 80215cc:	4013      	ands	r3, r2
 80215ce:	d0f0      	beq.n	80215b2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80215d0:	687b      	ldr	r3, [r7, #4]
 80215d2:	689a      	ldr	r2, [r3, #8]
 80215d4:	2380      	movs	r3, #128	; 0x80
 80215d6:	005b      	lsls	r3, r3, #1
 80215d8:	429a      	cmp	r2, r3
 80215da:	d107      	bne.n	80215ec <HAL_RCC_OscConfig+0x4d0>
 80215dc:	4b71      	ldr	r3, [pc, #452]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 80215de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80215e0:	4b70      	ldr	r3, [pc, #448]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 80215e2:	2180      	movs	r1, #128	; 0x80
 80215e4:	0049      	lsls	r1, r1, #1
 80215e6:	430a      	orrs	r2, r1
 80215e8:	651a      	str	r2, [r3, #80]	; 0x50
 80215ea:	e031      	b.n	8021650 <HAL_RCC_OscConfig+0x534>
 80215ec:	687b      	ldr	r3, [r7, #4]
 80215ee:	689b      	ldr	r3, [r3, #8]
 80215f0:	2b00      	cmp	r3, #0
 80215f2:	d10c      	bne.n	802160e <HAL_RCC_OscConfig+0x4f2>
 80215f4:	4b6b      	ldr	r3, [pc, #428]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 80215f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80215f8:	4b6a      	ldr	r3, [pc, #424]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 80215fa:	496c      	ldr	r1, [pc, #432]	; (80217ac <HAL_RCC_OscConfig+0x690>)
 80215fc:	400a      	ands	r2, r1
 80215fe:	651a      	str	r2, [r3, #80]	; 0x50
 8021600:	4b68      	ldr	r3, [pc, #416]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 8021602:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8021604:	4b67      	ldr	r3, [pc, #412]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 8021606:	496b      	ldr	r1, [pc, #428]	; (80217b4 <HAL_RCC_OscConfig+0x698>)
 8021608:	400a      	ands	r2, r1
 802160a:	651a      	str	r2, [r3, #80]	; 0x50
 802160c:	e020      	b.n	8021650 <HAL_RCC_OscConfig+0x534>
 802160e:	687b      	ldr	r3, [r7, #4]
 8021610:	689a      	ldr	r2, [r3, #8]
 8021612:	23a0      	movs	r3, #160	; 0xa0
 8021614:	00db      	lsls	r3, r3, #3
 8021616:	429a      	cmp	r2, r3
 8021618:	d10e      	bne.n	8021638 <HAL_RCC_OscConfig+0x51c>
 802161a:	4b62      	ldr	r3, [pc, #392]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 802161c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802161e:	4b61      	ldr	r3, [pc, #388]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 8021620:	2180      	movs	r1, #128	; 0x80
 8021622:	00c9      	lsls	r1, r1, #3
 8021624:	430a      	orrs	r2, r1
 8021626:	651a      	str	r2, [r3, #80]	; 0x50
 8021628:	4b5e      	ldr	r3, [pc, #376]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 802162a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802162c:	4b5d      	ldr	r3, [pc, #372]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 802162e:	2180      	movs	r1, #128	; 0x80
 8021630:	0049      	lsls	r1, r1, #1
 8021632:	430a      	orrs	r2, r1
 8021634:	651a      	str	r2, [r3, #80]	; 0x50
 8021636:	e00b      	b.n	8021650 <HAL_RCC_OscConfig+0x534>
 8021638:	4b5a      	ldr	r3, [pc, #360]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 802163a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802163c:	4b59      	ldr	r3, [pc, #356]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 802163e:	495b      	ldr	r1, [pc, #364]	; (80217ac <HAL_RCC_OscConfig+0x690>)
 8021640:	400a      	ands	r2, r1
 8021642:	651a      	str	r2, [r3, #80]	; 0x50
 8021644:	4b57      	ldr	r3, [pc, #348]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 8021646:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8021648:	4b56      	ldr	r3, [pc, #344]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 802164a:	495a      	ldr	r1, [pc, #360]	; (80217b4 <HAL_RCC_OscConfig+0x698>)
 802164c:	400a      	ands	r2, r1
 802164e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8021650:	687b      	ldr	r3, [r7, #4]
 8021652:	689b      	ldr	r3, [r3, #8]
 8021654:	2b00      	cmp	r3, #0
 8021656:	d015      	beq.n	8021684 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8021658:	f7ff fae2 	bl	8020c20 <HAL_GetTick>
 802165c:	0003      	movs	r3, r0
 802165e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8021660:	e009      	b.n	8021676 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8021662:	f7ff fadd 	bl	8020c20 <HAL_GetTick>
 8021666:	0002      	movs	r2, r0
 8021668:	697b      	ldr	r3, [r7, #20]
 802166a:	1ad3      	subs	r3, r2, r3
 802166c:	4a52      	ldr	r2, [pc, #328]	; (80217b8 <HAL_RCC_OscConfig+0x69c>)
 802166e:	4293      	cmp	r3, r2
 8021670:	d901      	bls.n	8021676 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8021672:	2303      	movs	r3, #3
 8021674:	e11b      	b.n	80218ae <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8021676:	4b4b      	ldr	r3, [pc, #300]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 8021678:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 802167a:	2380      	movs	r3, #128	; 0x80
 802167c:	009b      	lsls	r3, r3, #2
 802167e:	4013      	ands	r3, r2
 8021680:	d0ef      	beq.n	8021662 <HAL_RCC_OscConfig+0x546>
 8021682:	e014      	b.n	80216ae <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8021684:	f7ff facc 	bl	8020c20 <HAL_GetTick>
 8021688:	0003      	movs	r3, r0
 802168a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 802168c:	e009      	b.n	80216a2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802168e:	f7ff fac7 	bl	8020c20 <HAL_GetTick>
 8021692:	0002      	movs	r2, r0
 8021694:	697b      	ldr	r3, [r7, #20]
 8021696:	1ad3      	subs	r3, r2, r3
 8021698:	4a47      	ldr	r2, [pc, #284]	; (80217b8 <HAL_RCC_OscConfig+0x69c>)
 802169a:	4293      	cmp	r3, r2
 802169c:	d901      	bls.n	80216a2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 802169e:	2303      	movs	r3, #3
 80216a0:	e105      	b.n	80218ae <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80216a2:	4b40      	ldr	r3, [pc, #256]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 80216a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80216a6:	2380      	movs	r3, #128	; 0x80
 80216a8:	009b      	lsls	r3, r3, #2
 80216aa:	4013      	ands	r3, r2
 80216ac:	d1ef      	bne.n	802168e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80216ae:	2323      	movs	r3, #35	; 0x23
 80216b0:	18fb      	adds	r3, r7, r3
 80216b2:	781b      	ldrb	r3, [r3, #0]
 80216b4:	2b01      	cmp	r3, #1
 80216b6:	d105      	bne.n	80216c4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80216b8:	4b3a      	ldr	r3, [pc, #232]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 80216ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80216bc:	4b39      	ldr	r3, [pc, #228]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 80216be:	493f      	ldr	r1, [pc, #252]	; (80217bc <HAL_RCC_OscConfig+0x6a0>)
 80216c0:	400a      	ands	r2, r1
 80216c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80216c4:	687b      	ldr	r3, [r7, #4]
 80216c6:	681b      	ldr	r3, [r3, #0]
 80216c8:	2220      	movs	r2, #32
 80216ca:	4013      	ands	r3, r2
 80216cc:	d049      	beq.n	8021762 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80216ce:	687b      	ldr	r3, [r7, #4]
 80216d0:	699b      	ldr	r3, [r3, #24]
 80216d2:	2b00      	cmp	r3, #0
 80216d4:	d026      	beq.n	8021724 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80216d6:	4b33      	ldr	r3, [pc, #204]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 80216d8:	689a      	ldr	r2, [r3, #8]
 80216da:	4b32      	ldr	r3, [pc, #200]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 80216dc:	2101      	movs	r1, #1
 80216de:	430a      	orrs	r2, r1
 80216e0:	609a      	str	r2, [r3, #8]
 80216e2:	4b30      	ldr	r3, [pc, #192]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 80216e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80216e6:	4b2f      	ldr	r3, [pc, #188]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 80216e8:	2101      	movs	r1, #1
 80216ea:	430a      	orrs	r2, r1
 80216ec:	635a      	str	r2, [r3, #52]	; 0x34
 80216ee:	4b34      	ldr	r3, [pc, #208]	; (80217c0 <HAL_RCC_OscConfig+0x6a4>)
 80216f0:	6a1a      	ldr	r2, [r3, #32]
 80216f2:	4b33      	ldr	r3, [pc, #204]	; (80217c0 <HAL_RCC_OscConfig+0x6a4>)
 80216f4:	2180      	movs	r1, #128	; 0x80
 80216f6:	0189      	lsls	r1, r1, #6
 80216f8:	430a      	orrs	r2, r1
 80216fa:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80216fc:	f7ff fa90 	bl	8020c20 <HAL_GetTick>
 8021700:	0003      	movs	r3, r0
 8021702:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8021704:	e008      	b.n	8021718 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8021706:	f7ff fa8b 	bl	8020c20 <HAL_GetTick>
 802170a:	0002      	movs	r2, r0
 802170c:	697b      	ldr	r3, [r7, #20]
 802170e:	1ad3      	subs	r3, r2, r3
 8021710:	2b02      	cmp	r3, #2
 8021712:	d901      	bls.n	8021718 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8021714:	2303      	movs	r3, #3
 8021716:	e0ca      	b.n	80218ae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8021718:	4b22      	ldr	r3, [pc, #136]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 802171a:	689b      	ldr	r3, [r3, #8]
 802171c:	2202      	movs	r2, #2
 802171e:	4013      	ands	r3, r2
 8021720:	d0f1      	beq.n	8021706 <HAL_RCC_OscConfig+0x5ea>
 8021722:	e01e      	b.n	8021762 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8021724:	4b1f      	ldr	r3, [pc, #124]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 8021726:	689a      	ldr	r2, [r3, #8]
 8021728:	4b1e      	ldr	r3, [pc, #120]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 802172a:	2101      	movs	r1, #1
 802172c:	438a      	bics	r2, r1
 802172e:	609a      	str	r2, [r3, #8]
 8021730:	4b23      	ldr	r3, [pc, #140]	; (80217c0 <HAL_RCC_OscConfig+0x6a4>)
 8021732:	6a1a      	ldr	r2, [r3, #32]
 8021734:	4b22      	ldr	r3, [pc, #136]	; (80217c0 <HAL_RCC_OscConfig+0x6a4>)
 8021736:	4923      	ldr	r1, [pc, #140]	; (80217c4 <HAL_RCC_OscConfig+0x6a8>)
 8021738:	400a      	ands	r2, r1
 802173a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802173c:	f7ff fa70 	bl	8020c20 <HAL_GetTick>
 8021740:	0003      	movs	r3, r0
 8021742:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8021744:	e008      	b.n	8021758 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8021746:	f7ff fa6b 	bl	8020c20 <HAL_GetTick>
 802174a:	0002      	movs	r2, r0
 802174c:	697b      	ldr	r3, [r7, #20]
 802174e:	1ad3      	subs	r3, r2, r3
 8021750:	2b02      	cmp	r3, #2
 8021752:	d901      	bls.n	8021758 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8021754:	2303      	movs	r3, #3
 8021756:	e0aa      	b.n	80218ae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8021758:	4b12      	ldr	r3, [pc, #72]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 802175a:	689b      	ldr	r3, [r3, #8]
 802175c:	2202      	movs	r2, #2
 802175e:	4013      	ands	r3, r2
 8021760:	d1f1      	bne.n	8021746 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8021762:	687b      	ldr	r3, [r7, #4]
 8021764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021766:	2b00      	cmp	r3, #0
 8021768:	d100      	bne.n	802176c <HAL_RCC_OscConfig+0x650>
 802176a:	e09f      	b.n	80218ac <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 802176c:	69fb      	ldr	r3, [r7, #28]
 802176e:	2b0c      	cmp	r3, #12
 8021770:	d100      	bne.n	8021774 <HAL_RCC_OscConfig+0x658>
 8021772:	e078      	b.n	8021866 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8021774:	687b      	ldr	r3, [r7, #4]
 8021776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021778:	2b02      	cmp	r3, #2
 802177a:	d159      	bne.n	8021830 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802177c:	4b09      	ldr	r3, [pc, #36]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 802177e:	681a      	ldr	r2, [r3, #0]
 8021780:	4b08      	ldr	r3, [pc, #32]	; (80217a4 <HAL_RCC_OscConfig+0x688>)
 8021782:	4911      	ldr	r1, [pc, #68]	; (80217c8 <HAL_RCC_OscConfig+0x6ac>)
 8021784:	400a      	ands	r2, r1
 8021786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8021788:	f7ff fa4a 	bl	8020c20 <HAL_GetTick>
 802178c:	0003      	movs	r3, r0
 802178e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8021790:	e01c      	b.n	80217cc <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8021792:	f7ff fa45 	bl	8020c20 <HAL_GetTick>
 8021796:	0002      	movs	r2, r0
 8021798:	697b      	ldr	r3, [r7, #20]
 802179a:	1ad3      	subs	r3, r2, r3
 802179c:	2b02      	cmp	r3, #2
 802179e:	d915      	bls.n	80217cc <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80217a0:	2303      	movs	r3, #3
 80217a2:	e084      	b.n	80218ae <HAL_RCC_OscConfig+0x792>
 80217a4:	40021000 	.word	0x40021000
 80217a8:	ffff1fff 	.word	0xffff1fff
 80217ac:	fffffeff 	.word	0xfffffeff
 80217b0:	40007000 	.word	0x40007000
 80217b4:	fffffbff 	.word	0xfffffbff
 80217b8:	00001388 	.word	0x00001388
 80217bc:	efffffff 	.word	0xefffffff
 80217c0:	40010000 	.word	0x40010000
 80217c4:	ffffdfff 	.word	0xffffdfff
 80217c8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80217cc:	4b3a      	ldr	r3, [pc, #232]	; (80218b8 <HAL_RCC_OscConfig+0x79c>)
 80217ce:	681a      	ldr	r2, [r3, #0]
 80217d0:	2380      	movs	r3, #128	; 0x80
 80217d2:	049b      	lsls	r3, r3, #18
 80217d4:	4013      	ands	r3, r2
 80217d6:	d1dc      	bne.n	8021792 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80217d8:	4b37      	ldr	r3, [pc, #220]	; (80218b8 <HAL_RCC_OscConfig+0x79c>)
 80217da:	68db      	ldr	r3, [r3, #12]
 80217dc:	4a37      	ldr	r2, [pc, #220]	; (80218bc <HAL_RCC_OscConfig+0x7a0>)
 80217de:	4013      	ands	r3, r2
 80217e0:	0019      	movs	r1, r3
 80217e2:	687b      	ldr	r3, [r7, #4]
 80217e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80217e6:	687b      	ldr	r3, [r7, #4]
 80217e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80217ea:	431a      	orrs	r2, r3
 80217ec:	687b      	ldr	r3, [r7, #4]
 80217ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80217f0:	431a      	orrs	r2, r3
 80217f2:	4b31      	ldr	r3, [pc, #196]	; (80218b8 <HAL_RCC_OscConfig+0x79c>)
 80217f4:	430a      	orrs	r2, r1
 80217f6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80217f8:	4b2f      	ldr	r3, [pc, #188]	; (80218b8 <HAL_RCC_OscConfig+0x79c>)
 80217fa:	681a      	ldr	r2, [r3, #0]
 80217fc:	4b2e      	ldr	r3, [pc, #184]	; (80218b8 <HAL_RCC_OscConfig+0x79c>)
 80217fe:	2180      	movs	r1, #128	; 0x80
 8021800:	0449      	lsls	r1, r1, #17
 8021802:	430a      	orrs	r2, r1
 8021804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8021806:	f7ff fa0b 	bl	8020c20 <HAL_GetTick>
 802180a:	0003      	movs	r3, r0
 802180c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 802180e:	e008      	b.n	8021822 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8021810:	f7ff fa06 	bl	8020c20 <HAL_GetTick>
 8021814:	0002      	movs	r2, r0
 8021816:	697b      	ldr	r3, [r7, #20]
 8021818:	1ad3      	subs	r3, r2, r3
 802181a:	2b02      	cmp	r3, #2
 802181c:	d901      	bls.n	8021822 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 802181e:	2303      	movs	r3, #3
 8021820:	e045      	b.n	80218ae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8021822:	4b25      	ldr	r3, [pc, #148]	; (80218b8 <HAL_RCC_OscConfig+0x79c>)
 8021824:	681a      	ldr	r2, [r3, #0]
 8021826:	2380      	movs	r3, #128	; 0x80
 8021828:	049b      	lsls	r3, r3, #18
 802182a:	4013      	ands	r3, r2
 802182c:	d0f0      	beq.n	8021810 <HAL_RCC_OscConfig+0x6f4>
 802182e:	e03d      	b.n	80218ac <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8021830:	4b21      	ldr	r3, [pc, #132]	; (80218b8 <HAL_RCC_OscConfig+0x79c>)
 8021832:	681a      	ldr	r2, [r3, #0]
 8021834:	4b20      	ldr	r3, [pc, #128]	; (80218b8 <HAL_RCC_OscConfig+0x79c>)
 8021836:	4922      	ldr	r1, [pc, #136]	; (80218c0 <HAL_RCC_OscConfig+0x7a4>)
 8021838:	400a      	ands	r2, r1
 802183a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802183c:	f7ff f9f0 	bl	8020c20 <HAL_GetTick>
 8021840:	0003      	movs	r3, r0
 8021842:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8021844:	e008      	b.n	8021858 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8021846:	f7ff f9eb 	bl	8020c20 <HAL_GetTick>
 802184a:	0002      	movs	r2, r0
 802184c:	697b      	ldr	r3, [r7, #20]
 802184e:	1ad3      	subs	r3, r2, r3
 8021850:	2b02      	cmp	r3, #2
 8021852:	d901      	bls.n	8021858 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8021854:	2303      	movs	r3, #3
 8021856:	e02a      	b.n	80218ae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8021858:	4b17      	ldr	r3, [pc, #92]	; (80218b8 <HAL_RCC_OscConfig+0x79c>)
 802185a:	681a      	ldr	r2, [r3, #0]
 802185c:	2380      	movs	r3, #128	; 0x80
 802185e:	049b      	lsls	r3, r3, #18
 8021860:	4013      	ands	r3, r2
 8021862:	d1f0      	bne.n	8021846 <HAL_RCC_OscConfig+0x72a>
 8021864:	e022      	b.n	80218ac <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8021866:	687b      	ldr	r3, [r7, #4]
 8021868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802186a:	2b01      	cmp	r3, #1
 802186c:	d101      	bne.n	8021872 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 802186e:	2301      	movs	r3, #1
 8021870:	e01d      	b.n	80218ae <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8021872:	4b11      	ldr	r3, [pc, #68]	; (80218b8 <HAL_RCC_OscConfig+0x79c>)
 8021874:	68db      	ldr	r3, [r3, #12]
 8021876:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8021878:	69ba      	ldr	r2, [r7, #24]
 802187a:	2380      	movs	r3, #128	; 0x80
 802187c:	025b      	lsls	r3, r3, #9
 802187e:	401a      	ands	r2, r3
 8021880:	687b      	ldr	r3, [r7, #4]
 8021882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021884:	429a      	cmp	r2, r3
 8021886:	d10f      	bne.n	80218a8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8021888:	69ba      	ldr	r2, [r7, #24]
 802188a:	23f0      	movs	r3, #240	; 0xf0
 802188c:	039b      	lsls	r3, r3, #14
 802188e:	401a      	ands	r2, r3
 8021890:	687b      	ldr	r3, [r7, #4]
 8021892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8021894:	429a      	cmp	r2, r3
 8021896:	d107      	bne.n	80218a8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8021898:	69ba      	ldr	r2, [r7, #24]
 802189a:	23c0      	movs	r3, #192	; 0xc0
 802189c:	041b      	lsls	r3, r3, #16
 802189e:	401a      	ands	r2, r3
 80218a0:	687b      	ldr	r3, [r7, #4]
 80218a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80218a4:	429a      	cmp	r2, r3
 80218a6:	d001      	beq.n	80218ac <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80218a8:	2301      	movs	r3, #1
 80218aa:	e000      	b.n	80218ae <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80218ac:	2300      	movs	r3, #0
}
 80218ae:	0018      	movs	r0, r3
 80218b0:	46bd      	mov	sp, r7
 80218b2:	b00a      	add	sp, #40	; 0x28
 80218b4:	bdb0      	pop	{r4, r5, r7, pc}
 80218b6:	46c0      	nop			; (mov r8, r8)
 80218b8:	40021000 	.word	0x40021000
 80218bc:	ff02ffff 	.word	0xff02ffff
 80218c0:	feffffff 	.word	0xfeffffff

080218c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80218c4:	b5b0      	push	{r4, r5, r7, lr}
 80218c6:	b084      	sub	sp, #16
 80218c8:	af00      	add	r7, sp, #0
 80218ca:	6078      	str	r0, [r7, #4]
 80218cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80218ce:	687b      	ldr	r3, [r7, #4]
 80218d0:	2b00      	cmp	r3, #0
 80218d2:	d101      	bne.n	80218d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80218d4:	2301      	movs	r3, #1
 80218d6:	e128      	b.n	8021b2a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80218d8:	4b96      	ldr	r3, [pc, #600]	; (8021b34 <HAL_RCC_ClockConfig+0x270>)
 80218da:	681b      	ldr	r3, [r3, #0]
 80218dc:	2201      	movs	r2, #1
 80218de:	4013      	ands	r3, r2
 80218e0:	683a      	ldr	r2, [r7, #0]
 80218e2:	429a      	cmp	r2, r3
 80218e4:	d91e      	bls.n	8021924 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80218e6:	4b93      	ldr	r3, [pc, #588]	; (8021b34 <HAL_RCC_ClockConfig+0x270>)
 80218e8:	681b      	ldr	r3, [r3, #0]
 80218ea:	2201      	movs	r2, #1
 80218ec:	4393      	bics	r3, r2
 80218ee:	0019      	movs	r1, r3
 80218f0:	4b90      	ldr	r3, [pc, #576]	; (8021b34 <HAL_RCC_ClockConfig+0x270>)
 80218f2:	683a      	ldr	r2, [r7, #0]
 80218f4:	430a      	orrs	r2, r1
 80218f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80218f8:	f7ff f992 	bl	8020c20 <HAL_GetTick>
 80218fc:	0003      	movs	r3, r0
 80218fe:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8021900:	e009      	b.n	8021916 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8021902:	f7ff f98d 	bl	8020c20 <HAL_GetTick>
 8021906:	0002      	movs	r2, r0
 8021908:	68fb      	ldr	r3, [r7, #12]
 802190a:	1ad3      	subs	r3, r2, r3
 802190c:	4a8a      	ldr	r2, [pc, #552]	; (8021b38 <HAL_RCC_ClockConfig+0x274>)
 802190e:	4293      	cmp	r3, r2
 8021910:	d901      	bls.n	8021916 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8021912:	2303      	movs	r3, #3
 8021914:	e109      	b.n	8021b2a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8021916:	4b87      	ldr	r3, [pc, #540]	; (8021b34 <HAL_RCC_ClockConfig+0x270>)
 8021918:	681b      	ldr	r3, [r3, #0]
 802191a:	2201      	movs	r2, #1
 802191c:	4013      	ands	r3, r2
 802191e:	683a      	ldr	r2, [r7, #0]
 8021920:	429a      	cmp	r2, r3
 8021922:	d1ee      	bne.n	8021902 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8021924:	687b      	ldr	r3, [r7, #4]
 8021926:	681b      	ldr	r3, [r3, #0]
 8021928:	2202      	movs	r2, #2
 802192a:	4013      	ands	r3, r2
 802192c:	d009      	beq.n	8021942 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802192e:	4b83      	ldr	r3, [pc, #524]	; (8021b3c <HAL_RCC_ClockConfig+0x278>)
 8021930:	68db      	ldr	r3, [r3, #12]
 8021932:	22f0      	movs	r2, #240	; 0xf0
 8021934:	4393      	bics	r3, r2
 8021936:	0019      	movs	r1, r3
 8021938:	687b      	ldr	r3, [r7, #4]
 802193a:	689a      	ldr	r2, [r3, #8]
 802193c:	4b7f      	ldr	r3, [pc, #508]	; (8021b3c <HAL_RCC_ClockConfig+0x278>)
 802193e:	430a      	orrs	r2, r1
 8021940:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8021942:	687b      	ldr	r3, [r7, #4]
 8021944:	681b      	ldr	r3, [r3, #0]
 8021946:	2201      	movs	r2, #1
 8021948:	4013      	ands	r3, r2
 802194a:	d100      	bne.n	802194e <HAL_RCC_ClockConfig+0x8a>
 802194c:	e089      	b.n	8021a62 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802194e:	687b      	ldr	r3, [r7, #4]
 8021950:	685b      	ldr	r3, [r3, #4]
 8021952:	2b02      	cmp	r3, #2
 8021954:	d107      	bne.n	8021966 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8021956:	4b79      	ldr	r3, [pc, #484]	; (8021b3c <HAL_RCC_ClockConfig+0x278>)
 8021958:	681a      	ldr	r2, [r3, #0]
 802195a:	2380      	movs	r3, #128	; 0x80
 802195c:	029b      	lsls	r3, r3, #10
 802195e:	4013      	ands	r3, r2
 8021960:	d120      	bne.n	80219a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8021962:	2301      	movs	r3, #1
 8021964:	e0e1      	b.n	8021b2a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8021966:	687b      	ldr	r3, [r7, #4]
 8021968:	685b      	ldr	r3, [r3, #4]
 802196a:	2b03      	cmp	r3, #3
 802196c:	d107      	bne.n	802197e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 802196e:	4b73      	ldr	r3, [pc, #460]	; (8021b3c <HAL_RCC_ClockConfig+0x278>)
 8021970:	681a      	ldr	r2, [r3, #0]
 8021972:	2380      	movs	r3, #128	; 0x80
 8021974:	049b      	lsls	r3, r3, #18
 8021976:	4013      	ands	r3, r2
 8021978:	d114      	bne.n	80219a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 802197a:	2301      	movs	r3, #1
 802197c:	e0d5      	b.n	8021b2a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 802197e:	687b      	ldr	r3, [r7, #4]
 8021980:	685b      	ldr	r3, [r3, #4]
 8021982:	2b01      	cmp	r3, #1
 8021984:	d106      	bne.n	8021994 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8021986:	4b6d      	ldr	r3, [pc, #436]	; (8021b3c <HAL_RCC_ClockConfig+0x278>)
 8021988:	681b      	ldr	r3, [r3, #0]
 802198a:	2204      	movs	r2, #4
 802198c:	4013      	ands	r3, r2
 802198e:	d109      	bne.n	80219a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8021990:	2301      	movs	r3, #1
 8021992:	e0ca      	b.n	8021b2a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8021994:	4b69      	ldr	r3, [pc, #420]	; (8021b3c <HAL_RCC_ClockConfig+0x278>)
 8021996:	681a      	ldr	r2, [r3, #0]
 8021998:	2380      	movs	r3, #128	; 0x80
 802199a:	009b      	lsls	r3, r3, #2
 802199c:	4013      	ands	r3, r2
 802199e:	d101      	bne.n	80219a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80219a0:	2301      	movs	r3, #1
 80219a2:	e0c2      	b.n	8021b2a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80219a4:	4b65      	ldr	r3, [pc, #404]	; (8021b3c <HAL_RCC_ClockConfig+0x278>)
 80219a6:	68db      	ldr	r3, [r3, #12]
 80219a8:	2203      	movs	r2, #3
 80219aa:	4393      	bics	r3, r2
 80219ac:	0019      	movs	r1, r3
 80219ae:	687b      	ldr	r3, [r7, #4]
 80219b0:	685a      	ldr	r2, [r3, #4]
 80219b2:	4b62      	ldr	r3, [pc, #392]	; (8021b3c <HAL_RCC_ClockConfig+0x278>)
 80219b4:	430a      	orrs	r2, r1
 80219b6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80219b8:	f7ff f932 	bl	8020c20 <HAL_GetTick>
 80219bc:	0003      	movs	r3, r0
 80219be:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80219c0:	687b      	ldr	r3, [r7, #4]
 80219c2:	685b      	ldr	r3, [r3, #4]
 80219c4:	2b02      	cmp	r3, #2
 80219c6:	d111      	bne.n	80219ec <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80219c8:	e009      	b.n	80219de <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80219ca:	f7ff f929 	bl	8020c20 <HAL_GetTick>
 80219ce:	0002      	movs	r2, r0
 80219d0:	68fb      	ldr	r3, [r7, #12]
 80219d2:	1ad3      	subs	r3, r2, r3
 80219d4:	4a58      	ldr	r2, [pc, #352]	; (8021b38 <HAL_RCC_ClockConfig+0x274>)
 80219d6:	4293      	cmp	r3, r2
 80219d8:	d901      	bls.n	80219de <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80219da:	2303      	movs	r3, #3
 80219dc:	e0a5      	b.n	8021b2a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80219de:	4b57      	ldr	r3, [pc, #348]	; (8021b3c <HAL_RCC_ClockConfig+0x278>)
 80219e0:	68db      	ldr	r3, [r3, #12]
 80219e2:	220c      	movs	r2, #12
 80219e4:	4013      	ands	r3, r2
 80219e6:	2b08      	cmp	r3, #8
 80219e8:	d1ef      	bne.n	80219ca <HAL_RCC_ClockConfig+0x106>
 80219ea:	e03a      	b.n	8021a62 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80219ec:	687b      	ldr	r3, [r7, #4]
 80219ee:	685b      	ldr	r3, [r3, #4]
 80219f0:	2b03      	cmp	r3, #3
 80219f2:	d111      	bne.n	8021a18 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80219f4:	e009      	b.n	8021a0a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80219f6:	f7ff f913 	bl	8020c20 <HAL_GetTick>
 80219fa:	0002      	movs	r2, r0
 80219fc:	68fb      	ldr	r3, [r7, #12]
 80219fe:	1ad3      	subs	r3, r2, r3
 8021a00:	4a4d      	ldr	r2, [pc, #308]	; (8021b38 <HAL_RCC_ClockConfig+0x274>)
 8021a02:	4293      	cmp	r3, r2
 8021a04:	d901      	bls.n	8021a0a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8021a06:	2303      	movs	r3, #3
 8021a08:	e08f      	b.n	8021b2a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8021a0a:	4b4c      	ldr	r3, [pc, #304]	; (8021b3c <HAL_RCC_ClockConfig+0x278>)
 8021a0c:	68db      	ldr	r3, [r3, #12]
 8021a0e:	220c      	movs	r2, #12
 8021a10:	4013      	ands	r3, r2
 8021a12:	2b0c      	cmp	r3, #12
 8021a14:	d1ef      	bne.n	80219f6 <HAL_RCC_ClockConfig+0x132>
 8021a16:	e024      	b.n	8021a62 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8021a18:	687b      	ldr	r3, [r7, #4]
 8021a1a:	685b      	ldr	r3, [r3, #4]
 8021a1c:	2b01      	cmp	r3, #1
 8021a1e:	d11b      	bne.n	8021a58 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8021a20:	e009      	b.n	8021a36 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8021a22:	f7ff f8fd 	bl	8020c20 <HAL_GetTick>
 8021a26:	0002      	movs	r2, r0
 8021a28:	68fb      	ldr	r3, [r7, #12]
 8021a2a:	1ad3      	subs	r3, r2, r3
 8021a2c:	4a42      	ldr	r2, [pc, #264]	; (8021b38 <HAL_RCC_ClockConfig+0x274>)
 8021a2e:	4293      	cmp	r3, r2
 8021a30:	d901      	bls.n	8021a36 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8021a32:	2303      	movs	r3, #3
 8021a34:	e079      	b.n	8021b2a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8021a36:	4b41      	ldr	r3, [pc, #260]	; (8021b3c <HAL_RCC_ClockConfig+0x278>)
 8021a38:	68db      	ldr	r3, [r3, #12]
 8021a3a:	220c      	movs	r2, #12
 8021a3c:	4013      	ands	r3, r2
 8021a3e:	2b04      	cmp	r3, #4
 8021a40:	d1ef      	bne.n	8021a22 <HAL_RCC_ClockConfig+0x15e>
 8021a42:	e00e      	b.n	8021a62 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8021a44:	f7ff f8ec 	bl	8020c20 <HAL_GetTick>
 8021a48:	0002      	movs	r2, r0
 8021a4a:	68fb      	ldr	r3, [r7, #12]
 8021a4c:	1ad3      	subs	r3, r2, r3
 8021a4e:	4a3a      	ldr	r2, [pc, #232]	; (8021b38 <HAL_RCC_ClockConfig+0x274>)
 8021a50:	4293      	cmp	r3, r2
 8021a52:	d901      	bls.n	8021a58 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8021a54:	2303      	movs	r3, #3
 8021a56:	e068      	b.n	8021b2a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8021a58:	4b38      	ldr	r3, [pc, #224]	; (8021b3c <HAL_RCC_ClockConfig+0x278>)
 8021a5a:	68db      	ldr	r3, [r3, #12]
 8021a5c:	220c      	movs	r2, #12
 8021a5e:	4013      	ands	r3, r2
 8021a60:	d1f0      	bne.n	8021a44 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8021a62:	4b34      	ldr	r3, [pc, #208]	; (8021b34 <HAL_RCC_ClockConfig+0x270>)
 8021a64:	681b      	ldr	r3, [r3, #0]
 8021a66:	2201      	movs	r2, #1
 8021a68:	4013      	ands	r3, r2
 8021a6a:	683a      	ldr	r2, [r7, #0]
 8021a6c:	429a      	cmp	r2, r3
 8021a6e:	d21e      	bcs.n	8021aae <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021a70:	4b30      	ldr	r3, [pc, #192]	; (8021b34 <HAL_RCC_ClockConfig+0x270>)
 8021a72:	681b      	ldr	r3, [r3, #0]
 8021a74:	2201      	movs	r2, #1
 8021a76:	4393      	bics	r3, r2
 8021a78:	0019      	movs	r1, r3
 8021a7a:	4b2e      	ldr	r3, [pc, #184]	; (8021b34 <HAL_RCC_ClockConfig+0x270>)
 8021a7c:	683a      	ldr	r2, [r7, #0]
 8021a7e:	430a      	orrs	r2, r1
 8021a80:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8021a82:	f7ff f8cd 	bl	8020c20 <HAL_GetTick>
 8021a86:	0003      	movs	r3, r0
 8021a88:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8021a8a:	e009      	b.n	8021aa0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8021a8c:	f7ff f8c8 	bl	8020c20 <HAL_GetTick>
 8021a90:	0002      	movs	r2, r0
 8021a92:	68fb      	ldr	r3, [r7, #12]
 8021a94:	1ad3      	subs	r3, r2, r3
 8021a96:	4a28      	ldr	r2, [pc, #160]	; (8021b38 <HAL_RCC_ClockConfig+0x274>)
 8021a98:	4293      	cmp	r3, r2
 8021a9a:	d901      	bls.n	8021aa0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8021a9c:	2303      	movs	r3, #3
 8021a9e:	e044      	b.n	8021b2a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8021aa0:	4b24      	ldr	r3, [pc, #144]	; (8021b34 <HAL_RCC_ClockConfig+0x270>)
 8021aa2:	681b      	ldr	r3, [r3, #0]
 8021aa4:	2201      	movs	r2, #1
 8021aa6:	4013      	ands	r3, r2
 8021aa8:	683a      	ldr	r2, [r7, #0]
 8021aaa:	429a      	cmp	r2, r3
 8021aac:	d1ee      	bne.n	8021a8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8021aae:	687b      	ldr	r3, [r7, #4]
 8021ab0:	681b      	ldr	r3, [r3, #0]
 8021ab2:	2204      	movs	r2, #4
 8021ab4:	4013      	ands	r3, r2
 8021ab6:	d009      	beq.n	8021acc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8021ab8:	4b20      	ldr	r3, [pc, #128]	; (8021b3c <HAL_RCC_ClockConfig+0x278>)
 8021aba:	68db      	ldr	r3, [r3, #12]
 8021abc:	4a20      	ldr	r2, [pc, #128]	; (8021b40 <HAL_RCC_ClockConfig+0x27c>)
 8021abe:	4013      	ands	r3, r2
 8021ac0:	0019      	movs	r1, r3
 8021ac2:	687b      	ldr	r3, [r7, #4]
 8021ac4:	68da      	ldr	r2, [r3, #12]
 8021ac6:	4b1d      	ldr	r3, [pc, #116]	; (8021b3c <HAL_RCC_ClockConfig+0x278>)
 8021ac8:	430a      	orrs	r2, r1
 8021aca:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8021acc:	687b      	ldr	r3, [r7, #4]
 8021ace:	681b      	ldr	r3, [r3, #0]
 8021ad0:	2208      	movs	r2, #8
 8021ad2:	4013      	ands	r3, r2
 8021ad4:	d00a      	beq.n	8021aec <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8021ad6:	4b19      	ldr	r3, [pc, #100]	; (8021b3c <HAL_RCC_ClockConfig+0x278>)
 8021ad8:	68db      	ldr	r3, [r3, #12]
 8021ada:	4a1a      	ldr	r2, [pc, #104]	; (8021b44 <HAL_RCC_ClockConfig+0x280>)
 8021adc:	4013      	ands	r3, r2
 8021ade:	0019      	movs	r1, r3
 8021ae0:	687b      	ldr	r3, [r7, #4]
 8021ae2:	691b      	ldr	r3, [r3, #16]
 8021ae4:	00da      	lsls	r2, r3, #3
 8021ae6:	4b15      	ldr	r3, [pc, #84]	; (8021b3c <HAL_RCC_ClockConfig+0x278>)
 8021ae8:	430a      	orrs	r2, r1
 8021aea:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8021aec:	f000 f832 	bl	8021b54 <HAL_RCC_GetSysClockFreq>
 8021af0:	0001      	movs	r1, r0
 8021af2:	4b12      	ldr	r3, [pc, #72]	; (8021b3c <HAL_RCC_ClockConfig+0x278>)
 8021af4:	68db      	ldr	r3, [r3, #12]
 8021af6:	091b      	lsrs	r3, r3, #4
 8021af8:	220f      	movs	r2, #15
 8021afa:	4013      	ands	r3, r2
 8021afc:	4a12      	ldr	r2, [pc, #72]	; (8021b48 <HAL_RCC_ClockConfig+0x284>)
 8021afe:	5cd3      	ldrb	r3, [r2, r3]
 8021b00:	000a      	movs	r2, r1
 8021b02:	40da      	lsrs	r2, r3
 8021b04:	4b11      	ldr	r3, [pc, #68]	; (8021b4c <HAL_RCC_ClockConfig+0x288>)
 8021b06:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8021b08:	4b11      	ldr	r3, [pc, #68]	; (8021b50 <HAL_RCC_ClockConfig+0x28c>)
 8021b0a:	681b      	ldr	r3, [r3, #0]
 8021b0c:	250b      	movs	r5, #11
 8021b0e:	197c      	adds	r4, r7, r5
 8021b10:	0018      	movs	r0, r3
 8021b12:	f7ff f83f 	bl	8020b94 <HAL_InitTick>
 8021b16:	0003      	movs	r3, r0
 8021b18:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8021b1a:	197b      	adds	r3, r7, r5
 8021b1c:	781b      	ldrb	r3, [r3, #0]
 8021b1e:	2b00      	cmp	r3, #0
 8021b20:	d002      	beq.n	8021b28 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8021b22:	197b      	adds	r3, r7, r5
 8021b24:	781b      	ldrb	r3, [r3, #0]
 8021b26:	e000      	b.n	8021b2a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8021b28:	2300      	movs	r3, #0
}
 8021b2a:	0018      	movs	r0, r3
 8021b2c:	46bd      	mov	sp, r7
 8021b2e:	b004      	add	sp, #16
 8021b30:	bdb0      	pop	{r4, r5, r7, pc}
 8021b32:	46c0      	nop			; (mov r8, r8)
 8021b34:	40022000 	.word	0x40022000
 8021b38:	00001388 	.word	0x00001388
 8021b3c:	40021000 	.word	0x40021000
 8021b40:	fffff8ff 	.word	0xfffff8ff
 8021b44:	ffffc7ff 	.word	0xffffc7ff
 8021b48:	08023ac8 	.word	0x08023ac8
 8021b4c:	20000000 	.word	0x20000000
 8021b50:	20000004 	.word	0x20000004

08021b54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8021b54:	b5b0      	push	{r4, r5, r7, lr}
 8021b56:	b08e      	sub	sp, #56	; 0x38
 8021b58:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8021b5a:	4b4c      	ldr	r3, [pc, #304]	; (8021c8c <HAL_RCC_GetSysClockFreq+0x138>)
 8021b5c:	68db      	ldr	r3, [r3, #12]
 8021b5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8021b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021b62:	230c      	movs	r3, #12
 8021b64:	4013      	ands	r3, r2
 8021b66:	2b0c      	cmp	r3, #12
 8021b68:	d014      	beq.n	8021b94 <HAL_RCC_GetSysClockFreq+0x40>
 8021b6a:	d900      	bls.n	8021b6e <HAL_RCC_GetSysClockFreq+0x1a>
 8021b6c:	e07b      	b.n	8021c66 <HAL_RCC_GetSysClockFreq+0x112>
 8021b6e:	2b04      	cmp	r3, #4
 8021b70:	d002      	beq.n	8021b78 <HAL_RCC_GetSysClockFreq+0x24>
 8021b72:	2b08      	cmp	r3, #8
 8021b74:	d00b      	beq.n	8021b8e <HAL_RCC_GetSysClockFreq+0x3a>
 8021b76:	e076      	b.n	8021c66 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8021b78:	4b44      	ldr	r3, [pc, #272]	; (8021c8c <HAL_RCC_GetSysClockFreq+0x138>)
 8021b7a:	681b      	ldr	r3, [r3, #0]
 8021b7c:	2210      	movs	r2, #16
 8021b7e:	4013      	ands	r3, r2
 8021b80:	d002      	beq.n	8021b88 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8021b82:	4b43      	ldr	r3, [pc, #268]	; (8021c90 <HAL_RCC_GetSysClockFreq+0x13c>)
 8021b84:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8021b86:	e07c      	b.n	8021c82 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8021b88:	4b42      	ldr	r3, [pc, #264]	; (8021c94 <HAL_RCC_GetSysClockFreq+0x140>)
 8021b8a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8021b8c:	e079      	b.n	8021c82 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8021b8e:	4b42      	ldr	r3, [pc, #264]	; (8021c98 <HAL_RCC_GetSysClockFreq+0x144>)
 8021b90:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8021b92:	e076      	b.n	8021c82 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8021b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b96:	0c9a      	lsrs	r2, r3, #18
 8021b98:	230f      	movs	r3, #15
 8021b9a:	401a      	ands	r2, r3
 8021b9c:	4b3f      	ldr	r3, [pc, #252]	; (8021c9c <HAL_RCC_GetSysClockFreq+0x148>)
 8021b9e:	5c9b      	ldrb	r3, [r3, r2]
 8021ba0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8021ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021ba4:	0d9a      	lsrs	r2, r3, #22
 8021ba6:	2303      	movs	r3, #3
 8021ba8:	4013      	ands	r3, r2
 8021baa:	3301      	adds	r3, #1
 8021bac:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8021bae:	4b37      	ldr	r3, [pc, #220]	; (8021c8c <HAL_RCC_GetSysClockFreq+0x138>)
 8021bb0:	68da      	ldr	r2, [r3, #12]
 8021bb2:	2380      	movs	r3, #128	; 0x80
 8021bb4:	025b      	lsls	r3, r3, #9
 8021bb6:	4013      	ands	r3, r2
 8021bb8:	d01a      	beq.n	8021bf0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8021bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021bbc:	61bb      	str	r3, [r7, #24]
 8021bbe:	2300      	movs	r3, #0
 8021bc0:	61fb      	str	r3, [r7, #28]
 8021bc2:	4a35      	ldr	r2, [pc, #212]	; (8021c98 <HAL_RCC_GetSysClockFreq+0x144>)
 8021bc4:	2300      	movs	r3, #0
 8021bc6:	69b8      	ldr	r0, [r7, #24]
 8021bc8:	69f9      	ldr	r1, [r7, #28]
 8021bca:	f7fe fb53 	bl	8020274 <__aeabi_lmul>
 8021bce:	0002      	movs	r2, r0
 8021bd0:	000b      	movs	r3, r1
 8021bd2:	0010      	movs	r0, r2
 8021bd4:	0019      	movs	r1, r3
 8021bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021bd8:	613b      	str	r3, [r7, #16]
 8021bda:	2300      	movs	r3, #0
 8021bdc:	617b      	str	r3, [r7, #20]
 8021bde:	693a      	ldr	r2, [r7, #16]
 8021be0:	697b      	ldr	r3, [r7, #20]
 8021be2:	f7fe fb27 	bl	8020234 <__aeabi_uldivmod>
 8021be6:	0002      	movs	r2, r0
 8021be8:	000b      	movs	r3, r1
 8021bea:	0013      	movs	r3, r2
 8021bec:	637b      	str	r3, [r7, #52]	; 0x34
 8021bee:	e037      	b.n	8021c60 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8021bf0:	4b26      	ldr	r3, [pc, #152]	; (8021c8c <HAL_RCC_GetSysClockFreq+0x138>)
 8021bf2:	681b      	ldr	r3, [r3, #0]
 8021bf4:	2210      	movs	r2, #16
 8021bf6:	4013      	ands	r3, r2
 8021bf8:	d01a      	beq.n	8021c30 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8021bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021bfc:	60bb      	str	r3, [r7, #8]
 8021bfe:	2300      	movs	r3, #0
 8021c00:	60fb      	str	r3, [r7, #12]
 8021c02:	4a23      	ldr	r2, [pc, #140]	; (8021c90 <HAL_RCC_GetSysClockFreq+0x13c>)
 8021c04:	2300      	movs	r3, #0
 8021c06:	68b8      	ldr	r0, [r7, #8]
 8021c08:	68f9      	ldr	r1, [r7, #12]
 8021c0a:	f7fe fb33 	bl	8020274 <__aeabi_lmul>
 8021c0e:	0002      	movs	r2, r0
 8021c10:	000b      	movs	r3, r1
 8021c12:	0010      	movs	r0, r2
 8021c14:	0019      	movs	r1, r3
 8021c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c18:	603b      	str	r3, [r7, #0]
 8021c1a:	2300      	movs	r3, #0
 8021c1c:	607b      	str	r3, [r7, #4]
 8021c1e:	683a      	ldr	r2, [r7, #0]
 8021c20:	687b      	ldr	r3, [r7, #4]
 8021c22:	f7fe fb07 	bl	8020234 <__aeabi_uldivmod>
 8021c26:	0002      	movs	r2, r0
 8021c28:	000b      	movs	r3, r1
 8021c2a:	0013      	movs	r3, r2
 8021c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8021c2e:	e017      	b.n	8021c60 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8021c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c32:	0018      	movs	r0, r3
 8021c34:	2300      	movs	r3, #0
 8021c36:	0019      	movs	r1, r3
 8021c38:	4a16      	ldr	r2, [pc, #88]	; (8021c94 <HAL_RCC_GetSysClockFreq+0x140>)
 8021c3a:	2300      	movs	r3, #0
 8021c3c:	f7fe fb1a 	bl	8020274 <__aeabi_lmul>
 8021c40:	0002      	movs	r2, r0
 8021c42:	000b      	movs	r3, r1
 8021c44:	0010      	movs	r0, r2
 8021c46:	0019      	movs	r1, r3
 8021c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c4a:	001c      	movs	r4, r3
 8021c4c:	2300      	movs	r3, #0
 8021c4e:	001d      	movs	r5, r3
 8021c50:	0022      	movs	r2, r4
 8021c52:	002b      	movs	r3, r5
 8021c54:	f7fe faee 	bl	8020234 <__aeabi_uldivmod>
 8021c58:	0002      	movs	r2, r0
 8021c5a:	000b      	movs	r3, r1
 8021c5c:	0013      	movs	r3, r2
 8021c5e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8021c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021c62:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8021c64:	e00d      	b.n	8021c82 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8021c66:	4b09      	ldr	r3, [pc, #36]	; (8021c8c <HAL_RCC_GetSysClockFreq+0x138>)
 8021c68:	685b      	ldr	r3, [r3, #4]
 8021c6a:	0b5b      	lsrs	r3, r3, #13
 8021c6c:	2207      	movs	r2, #7
 8021c6e:	4013      	ands	r3, r2
 8021c70:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8021c72:	6a3b      	ldr	r3, [r7, #32]
 8021c74:	3301      	adds	r3, #1
 8021c76:	2280      	movs	r2, #128	; 0x80
 8021c78:	0212      	lsls	r2, r2, #8
 8021c7a:	409a      	lsls	r2, r3
 8021c7c:	0013      	movs	r3, r2
 8021c7e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8021c80:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8021c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8021c84:	0018      	movs	r0, r3
 8021c86:	46bd      	mov	sp, r7
 8021c88:	b00e      	add	sp, #56	; 0x38
 8021c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8021c8c:	40021000 	.word	0x40021000
 8021c90:	003d0900 	.word	0x003d0900
 8021c94:	00f42400 	.word	0x00f42400
 8021c98:	007a1200 	.word	0x007a1200
 8021c9c:	08023ae0 	.word	0x08023ae0

08021ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8021ca0:	b580      	push	{r7, lr}
 8021ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8021ca4:	4b02      	ldr	r3, [pc, #8]	; (8021cb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8021ca6:	681b      	ldr	r3, [r3, #0]
}
 8021ca8:	0018      	movs	r0, r3
 8021caa:	46bd      	mov	sp, r7
 8021cac:	bd80      	pop	{r7, pc}
 8021cae:	46c0      	nop			; (mov r8, r8)
 8021cb0:	20000000 	.word	0x20000000

08021cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8021cb4:	b580      	push	{r7, lr}
 8021cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8021cb8:	f7ff fff2 	bl	8021ca0 <HAL_RCC_GetHCLKFreq>
 8021cbc:	0001      	movs	r1, r0
 8021cbe:	4b06      	ldr	r3, [pc, #24]	; (8021cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8021cc0:	68db      	ldr	r3, [r3, #12]
 8021cc2:	0a1b      	lsrs	r3, r3, #8
 8021cc4:	2207      	movs	r2, #7
 8021cc6:	4013      	ands	r3, r2
 8021cc8:	4a04      	ldr	r2, [pc, #16]	; (8021cdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8021cca:	5cd3      	ldrb	r3, [r2, r3]
 8021ccc:	40d9      	lsrs	r1, r3
 8021cce:	000b      	movs	r3, r1
}
 8021cd0:	0018      	movs	r0, r3
 8021cd2:	46bd      	mov	sp, r7
 8021cd4:	bd80      	pop	{r7, pc}
 8021cd6:	46c0      	nop			; (mov r8, r8)
 8021cd8:	40021000 	.word	0x40021000
 8021cdc:	08023ad8 	.word	0x08023ad8

08021ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8021ce0:	b580      	push	{r7, lr}
 8021ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8021ce4:	f7ff ffdc 	bl	8021ca0 <HAL_RCC_GetHCLKFreq>
 8021ce8:	0001      	movs	r1, r0
 8021cea:	4b06      	ldr	r3, [pc, #24]	; (8021d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8021cec:	68db      	ldr	r3, [r3, #12]
 8021cee:	0adb      	lsrs	r3, r3, #11
 8021cf0:	2207      	movs	r2, #7
 8021cf2:	4013      	ands	r3, r2
 8021cf4:	4a04      	ldr	r2, [pc, #16]	; (8021d08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8021cf6:	5cd3      	ldrb	r3, [r2, r3]
 8021cf8:	40d9      	lsrs	r1, r3
 8021cfa:	000b      	movs	r3, r1
}
 8021cfc:	0018      	movs	r0, r3
 8021cfe:	46bd      	mov	sp, r7
 8021d00:	bd80      	pop	{r7, pc}
 8021d02:	46c0      	nop			; (mov r8, r8)
 8021d04:	40021000 	.word	0x40021000
 8021d08:	08023ad8 	.word	0x08023ad8

08021d0c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8021d0c:	b580      	push	{r7, lr}
 8021d0e:	b086      	sub	sp, #24
 8021d10:	af00      	add	r7, sp, #0
 8021d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8021d14:	2317      	movs	r3, #23
 8021d16:	18fb      	adds	r3, r7, r3
 8021d18:	2200      	movs	r2, #0
 8021d1a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8021d1c:	687b      	ldr	r3, [r7, #4]
 8021d1e:	681b      	ldr	r3, [r3, #0]
 8021d20:	2220      	movs	r2, #32
 8021d22:	4013      	ands	r3, r2
 8021d24:	d106      	bne.n	8021d34 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8021d26:	687b      	ldr	r3, [r7, #4]
 8021d28:	681a      	ldr	r2, [r3, #0]
 8021d2a:	2380      	movs	r3, #128	; 0x80
 8021d2c:	011b      	lsls	r3, r3, #4
 8021d2e:	4013      	ands	r3, r2
 8021d30:	d100      	bne.n	8021d34 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8021d32:	e0d9      	b.n	8021ee8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8021d34:	4ba4      	ldr	r3, [pc, #656]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8021d38:	2380      	movs	r3, #128	; 0x80
 8021d3a:	055b      	lsls	r3, r3, #21
 8021d3c:	4013      	ands	r3, r2
 8021d3e:	d10a      	bne.n	8021d56 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8021d40:	4ba1      	ldr	r3, [pc, #644]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021d42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8021d44:	4ba0      	ldr	r3, [pc, #640]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021d46:	2180      	movs	r1, #128	; 0x80
 8021d48:	0549      	lsls	r1, r1, #21
 8021d4a:	430a      	orrs	r2, r1
 8021d4c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8021d4e:	2317      	movs	r3, #23
 8021d50:	18fb      	adds	r3, r7, r3
 8021d52:	2201      	movs	r2, #1
 8021d54:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8021d56:	4b9d      	ldr	r3, [pc, #628]	; (8021fcc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8021d58:	681a      	ldr	r2, [r3, #0]
 8021d5a:	2380      	movs	r3, #128	; 0x80
 8021d5c:	005b      	lsls	r3, r3, #1
 8021d5e:	4013      	ands	r3, r2
 8021d60:	d11a      	bne.n	8021d98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8021d62:	4b9a      	ldr	r3, [pc, #616]	; (8021fcc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8021d64:	681a      	ldr	r2, [r3, #0]
 8021d66:	4b99      	ldr	r3, [pc, #612]	; (8021fcc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8021d68:	2180      	movs	r1, #128	; 0x80
 8021d6a:	0049      	lsls	r1, r1, #1
 8021d6c:	430a      	orrs	r2, r1
 8021d6e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8021d70:	f7fe ff56 	bl	8020c20 <HAL_GetTick>
 8021d74:	0003      	movs	r3, r0
 8021d76:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8021d78:	e008      	b.n	8021d8c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8021d7a:	f7fe ff51 	bl	8020c20 <HAL_GetTick>
 8021d7e:	0002      	movs	r2, r0
 8021d80:	693b      	ldr	r3, [r7, #16]
 8021d82:	1ad3      	subs	r3, r2, r3
 8021d84:	2b64      	cmp	r3, #100	; 0x64
 8021d86:	d901      	bls.n	8021d8c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8021d88:	2303      	movs	r3, #3
 8021d8a:	e118      	b.n	8021fbe <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8021d8c:	4b8f      	ldr	r3, [pc, #572]	; (8021fcc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8021d8e:	681a      	ldr	r2, [r3, #0]
 8021d90:	2380      	movs	r3, #128	; 0x80
 8021d92:	005b      	lsls	r3, r3, #1
 8021d94:	4013      	ands	r3, r2
 8021d96:	d0f0      	beq.n	8021d7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8021d98:	4b8b      	ldr	r3, [pc, #556]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021d9a:	681a      	ldr	r2, [r3, #0]
 8021d9c:	23c0      	movs	r3, #192	; 0xc0
 8021d9e:	039b      	lsls	r3, r3, #14
 8021da0:	4013      	ands	r3, r2
 8021da2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8021da4:	687b      	ldr	r3, [r7, #4]
 8021da6:	685a      	ldr	r2, [r3, #4]
 8021da8:	23c0      	movs	r3, #192	; 0xc0
 8021daa:	039b      	lsls	r3, r3, #14
 8021dac:	4013      	ands	r3, r2
 8021dae:	68fa      	ldr	r2, [r7, #12]
 8021db0:	429a      	cmp	r2, r3
 8021db2:	d107      	bne.n	8021dc4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8021db4:	687b      	ldr	r3, [r7, #4]
 8021db6:	689a      	ldr	r2, [r3, #8]
 8021db8:	23c0      	movs	r3, #192	; 0xc0
 8021dba:	039b      	lsls	r3, r3, #14
 8021dbc:	4013      	ands	r3, r2
 8021dbe:	68fa      	ldr	r2, [r7, #12]
 8021dc0:	429a      	cmp	r2, r3
 8021dc2:	d013      	beq.n	8021dec <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8021dc4:	687b      	ldr	r3, [r7, #4]
 8021dc6:	685a      	ldr	r2, [r3, #4]
 8021dc8:	23c0      	movs	r3, #192	; 0xc0
 8021dca:	029b      	lsls	r3, r3, #10
 8021dcc:	401a      	ands	r2, r3
 8021dce:	23c0      	movs	r3, #192	; 0xc0
 8021dd0:	029b      	lsls	r3, r3, #10
 8021dd2:	429a      	cmp	r2, r3
 8021dd4:	d10a      	bne.n	8021dec <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8021dd6:	4b7c      	ldr	r3, [pc, #496]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021dd8:	681a      	ldr	r2, [r3, #0]
 8021dda:	2380      	movs	r3, #128	; 0x80
 8021ddc:	029b      	lsls	r3, r3, #10
 8021dde:	401a      	ands	r2, r3
 8021de0:	2380      	movs	r3, #128	; 0x80
 8021de2:	029b      	lsls	r3, r3, #10
 8021de4:	429a      	cmp	r2, r3
 8021de6:	d101      	bne.n	8021dec <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8021de8:	2301      	movs	r3, #1
 8021dea:	e0e8      	b.n	8021fbe <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8021dec:	4b76      	ldr	r3, [pc, #472]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021dee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8021df0:	23c0      	movs	r3, #192	; 0xc0
 8021df2:	029b      	lsls	r3, r3, #10
 8021df4:	4013      	ands	r3, r2
 8021df6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8021df8:	68fb      	ldr	r3, [r7, #12]
 8021dfa:	2b00      	cmp	r3, #0
 8021dfc:	d049      	beq.n	8021e92 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8021dfe:	687b      	ldr	r3, [r7, #4]
 8021e00:	685a      	ldr	r2, [r3, #4]
 8021e02:	23c0      	movs	r3, #192	; 0xc0
 8021e04:	029b      	lsls	r3, r3, #10
 8021e06:	4013      	ands	r3, r2
 8021e08:	68fa      	ldr	r2, [r7, #12]
 8021e0a:	429a      	cmp	r2, r3
 8021e0c:	d004      	beq.n	8021e18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8021e0e:	687b      	ldr	r3, [r7, #4]
 8021e10:	681b      	ldr	r3, [r3, #0]
 8021e12:	2220      	movs	r2, #32
 8021e14:	4013      	ands	r3, r2
 8021e16:	d10d      	bne.n	8021e34 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8021e18:	687b      	ldr	r3, [r7, #4]
 8021e1a:	689a      	ldr	r2, [r3, #8]
 8021e1c:	23c0      	movs	r3, #192	; 0xc0
 8021e1e:	029b      	lsls	r3, r3, #10
 8021e20:	4013      	ands	r3, r2
 8021e22:	68fa      	ldr	r2, [r7, #12]
 8021e24:	429a      	cmp	r2, r3
 8021e26:	d034      	beq.n	8021e92 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8021e28:	687b      	ldr	r3, [r7, #4]
 8021e2a:	681a      	ldr	r2, [r3, #0]
 8021e2c:	2380      	movs	r3, #128	; 0x80
 8021e2e:	011b      	lsls	r3, r3, #4
 8021e30:	4013      	ands	r3, r2
 8021e32:	d02e      	beq.n	8021e92 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8021e34:	4b64      	ldr	r3, [pc, #400]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021e38:	4a65      	ldr	r2, [pc, #404]	; (8021fd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8021e3a:	4013      	ands	r3, r2
 8021e3c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8021e3e:	4b62      	ldr	r3, [pc, #392]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021e40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8021e42:	4b61      	ldr	r3, [pc, #388]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021e44:	2180      	movs	r1, #128	; 0x80
 8021e46:	0309      	lsls	r1, r1, #12
 8021e48:	430a      	orrs	r2, r1
 8021e4a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8021e4c:	4b5e      	ldr	r3, [pc, #376]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021e4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8021e50:	4b5d      	ldr	r3, [pc, #372]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021e52:	4960      	ldr	r1, [pc, #384]	; (8021fd4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8021e54:	400a      	ands	r2, r1
 8021e56:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8021e58:	4b5b      	ldr	r3, [pc, #364]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021e5a:	68fa      	ldr	r2, [r7, #12]
 8021e5c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8021e5e:	68fa      	ldr	r2, [r7, #12]
 8021e60:	2380      	movs	r3, #128	; 0x80
 8021e62:	005b      	lsls	r3, r3, #1
 8021e64:	4013      	ands	r3, r2
 8021e66:	d014      	beq.n	8021e92 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8021e68:	f7fe feda 	bl	8020c20 <HAL_GetTick>
 8021e6c:	0003      	movs	r3, r0
 8021e6e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8021e70:	e009      	b.n	8021e86 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8021e72:	f7fe fed5 	bl	8020c20 <HAL_GetTick>
 8021e76:	0002      	movs	r2, r0
 8021e78:	693b      	ldr	r3, [r7, #16]
 8021e7a:	1ad3      	subs	r3, r2, r3
 8021e7c:	4a56      	ldr	r2, [pc, #344]	; (8021fd8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8021e7e:	4293      	cmp	r3, r2
 8021e80:	d901      	bls.n	8021e86 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8021e82:	2303      	movs	r3, #3
 8021e84:	e09b      	b.n	8021fbe <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8021e86:	4b50      	ldr	r3, [pc, #320]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021e88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8021e8a:	2380      	movs	r3, #128	; 0x80
 8021e8c:	009b      	lsls	r3, r3, #2
 8021e8e:	4013      	ands	r3, r2
 8021e90:	d0ef      	beq.n	8021e72 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8021e92:	687b      	ldr	r3, [r7, #4]
 8021e94:	685a      	ldr	r2, [r3, #4]
 8021e96:	23c0      	movs	r3, #192	; 0xc0
 8021e98:	029b      	lsls	r3, r3, #10
 8021e9a:	401a      	ands	r2, r3
 8021e9c:	23c0      	movs	r3, #192	; 0xc0
 8021e9e:	029b      	lsls	r3, r3, #10
 8021ea0:	429a      	cmp	r2, r3
 8021ea2:	d10c      	bne.n	8021ebe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8021ea4:	4b48      	ldr	r3, [pc, #288]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021ea6:	681b      	ldr	r3, [r3, #0]
 8021ea8:	4a4c      	ldr	r2, [pc, #304]	; (8021fdc <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8021eaa:	4013      	ands	r3, r2
 8021eac:	0019      	movs	r1, r3
 8021eae:	687b      	ldr	r3, [r7, #4]
 8021eb0:	685a      	ldr	r2, [r3, #4]
 8021eb2:	23c0      	movs	r3, #192	; 0xc0
 8021eb4:	039b      	lsls	r3, r3, #14
 8021eb6:	401a      	ands	r2, r3
 8021eb8:	4b43      	ldr	r3, [pc, #268]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021eba:	430a      	orrs	r2, r1
 8021ebc:	601a      	str	r2, [r3, #0]
 8021ebe:	4b42      	ldr	r3, [pc, #264]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021ec0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8021ec2:	687b      	ldr	r3, [r7, #4]
 8021ec4:	685a      	ldr	r2, [r3, #4]
 8021ec6:	23c0      	movs	r3, #192	; 0xc0
 8021ec8:	029b      	lsls	r3, r3, #10
 8021eca:	401a      	ands	r2, r3
 8021ecc:	4b3e      	ldr	r3, [pc, #248]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021ece:	430a      	orrs	r2, r1
 8021ed0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8021ed2:	2317      	movs	r3, #23
 8021ed4:	18fb      	adds	r3, r7, r3
 8021ed6:	781b      	ldrb	r3, [r3, #0]
 8021ed8:	2b01      	cmp	r3, #1
 8021eda:	d105      	bne.n	8021ee8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8021edc:	4b3a      	ldr	r3, [pc, #232]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8021ee0:	4b39      	ldr	r3, [pc, #228]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021ee2:	493f      	ldr	r1, [pc, #252]	; (8021fe0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8021ee4:	400a      	ands	r2, r1
 8021ee6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8021ee8:	687b      	ldr	r3, [r7, #4]
 8021eea:	681b      	ldr	r3, [r3, #0]
 8021eec:	2201      	movs	r2, #1
 8021eee:	4013      	ands	r3, r2
 8021ef0:	d009      	beq.n	8021f06 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8021ef2:	4b35      	ldr	r3, [pc, #212]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021ef6:	2203      	movs	r2, #3
 8021ef8:	4393      	bics	r3, r2
 8021efa:	0019      	movs	r1, r3
 8021efc:	687b      	ldr	r3, [r7, #4]
 8021efe:	68da      	ldr	r2, [r3, #12]
 8021f00:	4b31      	ldr	r3, [pc, #196]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021f02:	430a      	orrs	r2, r1
 8021f04:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8021f06:	687b      	ldr	r3, [r7, #4]
 8021f08:	681b      	ldr	r3, [r3, #0]
 8021f0a:	2202      	movs	r2, #2
 8021f0c:	4013      	ands	r3, r2
 8021f0e:	d009      	beq.n	8021f24 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8021f10:	4b2d      	ldr	r3, [pc, #180]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021f14:	220c      	movs	r2, #12
 8021f16:	4393      	bics	r3, r2
 8021f18:	0019      	movs	r1, r3
 8021f1a:	687b      	ldr	r3, [r7, #4]
 8021f1c:	691a      	ldr	r2, [r3, #16]
 8021f1e:	4b2a      	ldr	r3, [pc, #168]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021f20:	430a      	orrs	r2, r1
 8021f22:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8021f24:	687b      	ldr	r3, [r7, #4]
 8021f26:	681b      	ldr	r3, [r3, #0]
 8021f28:	2204      	movs	r2, #4
 8021f2a:	4013      	ands	r3, r2
 8021f2c:	d009      	beq.n	8021f42 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8021f2e:	4b26      	ldr	r3, [pc, #152]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021f32:	4a2c      	ldr	r2, [pc, #176]	; (8021fe4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8021f34:	4013      	ands	r3, r2
 8021f36:	0019      	movs	r1, r3
 8021f38:	687b      	ldr	r3, [r7, #4]
 8021f3a:	695a      	ldr	r2, [r3, #20]
 8021f3c:	4b22      	ldr	r3, [pc, #136]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021f3e:	430a      	orrs	r2, r1
 8021f40:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8021f42:	687b      	ldr	r3, [r7, #4]
 8021f44:	681b      	ldr	r3, [r3, #0]
 8021f46:	2208      	movs	r2, #8
 8021f48:	4013      	ands	r3, r2
 8021f4a:	d009      	beq.n	8021f60 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8021f4c:	4b1e      	ldr	r3, [pc, #120]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021f50:	4a25      	ldr	r2, [pc, #148]	; (8021fe8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8021f52:	4013      	ands	r3, r2
 8021f54:	0019      	movs	r1, r3
 8021f56:	687b      	ldr	r3, [r7, #4]
 8021f58:	699a      	ldr	r2, [r3, #24]
 8021f5a:	4b1b      	ldr	r3, [pc, #108]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021f5c:	430a      	orrs	r2, r1
 8021f5e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8021f60:	687b      	ldr	r3, [r7, #4]
 8021f62:	681a      	ldr	r2, [r3, #0]
 8021f64:	2380      	movs	r3, #128	; 0x80
 8021f66:	005b      	lsls	r3, r3, #1
 8021f68:	4013      	ands	r3, r2
 8021f6a:	d009      	beq.n	8021f80 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8021f6c:	4b16      	ldr	r3, [pc, #88]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021f70:	4a17      	ldr	r2, [pc, #92]	; (8021fd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8021f72:	4013      	ands	r3, r2
 8021f74:	0019      	movs	r1, r3
 8021f76:	687b      	ldr	r3, [r7, #4]
 8021f78:	69da      	ldr	r2, [r3, #28]
 8021f7a:	4b13      	ldr	r3, [pc, #76]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021f7c:	430a      	orrs	r2, r1
 8021f7e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8021f80:	687b      	ldr	r3, [r7, #4]
 8021f82:	681b      	ldr	r3, [r3, #0]
 8021f84:	2240      	movs	r2, #64	; 0x40
 8021f86:	4013      	ands	r3, r2
 8021f88:	d009      	beq.n	8021f9e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8021f8a:	4b0f      	ldr	r3, [pc, #60]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021f8e:	4a17      	ldr	r2, [pc, #92]	; (8021fec <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8021f90:	4013      	ands	r3, r2
 8021f92:	0019      	movs	r1, r3
 8021f94:	687b      	ldr	r3, [r7, #4]
 8021f96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8021f98:	4b0b      	ldr	r3, [pc, #44]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021f9a:	430a      	orrs	r2, r1
 8021f9c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8021f9e:	687b      	ldr	r3, [r7, #4]
 8021fa0:	681b      	ldr	r3, [r3, #0]
 8021fa2:	2280      	movs	r2, #128	; 0x80
 8021fa4:	4013      	ands	r3, r2
 8021fa6:	d009      	beq.n	8021fbc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8021fa8:	4b07      	ldr	r3, [pc, #28]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021fac:	4a10      	ldr	r2, [pc, #64]	; (8021ff0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8021fae:	4013      	ands	r3, r2
 8021fb0:	0019      	movs	r1, r3
 8021fb2:	687b      	ldr	r3, [r7, #4]
 8021fb4:	6a1a      	ldr	r2, [r3, #32]
 8021fb6:	4b04      	ldr	r3, [pc, #16]	; (8021fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8021fb8:	430a      	orrs	r2, r1
 8021fba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8021fbc:	2300      	movs	r3, #0
}
 8021fbe:	0018      	movs	r0, r3
 8021fc0:	46bd      	mov	sp, r7
 8021fc2:	b006      	add	sp, #24
 8021fc4:	bd80      	pop	{r7, pc}
 8021fc6:	46c0      	nop			; (mov r8, r8)
 8021fc8:	40021000 	.word	0x40021000
 8021fcc:	40007000 	.word	0x40007000
 8021fd0:	fffcffff 	.word	0xfffcffff
 8021fd4:	fff7ffff 	.word	0xfff7ffff
 8021fd8:	00001388 	.word	0x00001388
 8021fdc:	ffcfffff 	.word	0xffcfffff
 8021fe0:	efffffff 	.word	0xefffffff
 8021fe4:	fffff3ff 	.word	0xfffff3ff
 8021fe8:	ffffcfff 	.word	0xffffcfff
 8021fec:	fbffffff 	.word	0xfbffffff
 8021ff0:	fff3ffff 	.word	0xfff3ffff

08021ff4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8021ff4:	b580      	push	{r7, lr}
 8021ff6:	b082      	sub	sp, #8
 8021ff8:	af00      	add	r7, sp, #0
 8021ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8021ffc:	687b      	ldr	r3, [r7, #4]
 8021ffe:	2b00      	cmp	r3, #0
 8022000:	d101      	bne.n	8022006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8022002:	2301      	movs	r3, #1
 8022004:	e044      	b.n	8022090 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8022006:	687b      	ldr	r3, [r7, #4]
 8022008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802200a:	2b00      	cmp	r3, #0
 802200c:	d107      	bne.n	802201e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802200e:	687b      	ldr	r3, [r7, #4]
 8022010:	2274      	movs	r2, #116	; 0x74
 8022012:	2100      	movs	r1, #0
 8022014:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8022016:	687b      	ldr	r3, [r7, #4]
 8022018:	0018      	movs	r0, r3
 802201a:	f7fe fcc7 	bl	80209ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 802201e:	687b      	ldr	r3, [r7, #4]
 8022020:	2224      	movs	r2, #36	; 0x24
 8022022:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8022024:	687b      	ldr	r3, [r7, #4]
 8022026:	681b      	ldr	r3, [r3, #0]
 8022028:	681a      	ldr	r2, [r3, #0]
 802202a:	687b      	ldr	r3, [r7, #4]
 802202c:	681b      	ldr	r3, [r3, #0]
 802202e:	2101      	movs	r1, #1
 8022030:	438a      	bics	r2, r1
 8022032:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8022034:	687b      	ldr	r3, [r7, #4]
 8022036:	0018      	movs	r0, r3
 8022038:	f000 f8d8 	bl	80221ec <UART_SetConfig>
 802203c:	0003      	movs	r3, r0
 802203e:	2b01      	cmp	r3, #1
 8022040:	d101      	bne.n	8022046 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8022042:	2301      	movs	r3, #1
 8022044:	e024      	b.n	8022090 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8022046:	687b      	ldr	r3, [r7, #4]
 8022048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802204a:	2b00      	cmp	r3, #0
 802204c:	d003      	beq.n	8022056 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 802204e:	687b      	ldr	r3, [r7, #4]
 8022050:	0018      	movs	r0, r3
 8022052:	f000 fb89 	bl	8022768 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8022056:	687b      	ldr	r3, [r7, #4]
 8022058:	681b      	ldr	r3, [r3, #0]
 802205a:	685a      	ldr	r2, [r3, #4]
 802205c:	687b      	ldr	r3, [r7, #4]
 802205e:	681b      	ldr	r3, [r3, #0]
 8022060:	490d      	ldr	r1, [pc, #52]	; (8022098 <HAL_UART_Init+0xa4>)
 8022062:	400a      	ands	r2, r1
 8022064:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8022066:	687b      	ldr	r3, [r7, #4]
 8022068:	681b      	ldr	r3, [r3, #0]
 802206a:	689a      	ldr	r2, [r3, #8]
 802206c:	687b      	ldr	r3, [r7, #4]
 802206e:	681b      	ldr	r3, [r3, #0]
 8022070:	212a      	movs	r1, #42	; 0x2a
 8022072:	438a      	bics	r2, r1
 8022074:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8022076:	687b      	ldr	r3, [r7, #4]
 8022078:	681b      	ldr	r3, [r3, #0]
 802207a:	681a      	ldr	r2, [r3, #0]
 802207c:	687b      	ldr	r3, [r7, #4]
 802207e:	681b      	ldr	r3, [r3, #0]
 8022080:	2101      	movs	r1, #1
 8022082:	430a      	orrs	r2, r1
 8022084:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8022086:	687b      	ldr	r3, [r7, #4]
 8022088:	0018      	movs	r0, r3
 802208a:	f000 fc21 	bl	80228d0 <UART_CheckIdleState>
 802208e:	0003      	movs	r3, r0
}
 8022090:	0018      	movs	r0, r3
 8022092:	46bd      	mov	sp, r7
 8022094:	b002      	add	sp, #8
 8022096:	bd80      	pop	{r7, pc}
 8022098:	ffffb7ff 	.word	0xffffb7ff

0802209c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802209c:	b580      	push	{r7, lr}
 802209e:	b08a      	sub	sp, #40	; 0x28
 80220a0:	af02      	add	r7, sp, #8
 80220a2:	60f8      	str	r0, [r7, #12]
 80220a4:	60b9      	str	r1, [r7, #8]
 80220a6:	603b      	str	r3, [r7, #0]
 80220a8:	1dbb      	adds	r3, r7, #6
 80220aa:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80220ac:	68fb      	ldr	r3, [r7, #12]
 80220ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80220b0:	2b20      	cmp	r3, #32
 80220b2:	d000      	beq.n	80220b6 <HAL_UART_Transmit+0x1a>
 80220b4:	e095      	b.n	80221e2 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80220b6:	68bb      	ldr	r3, [r7, #8]
 80220b8:	2b00      	cmp	r3, #0
 80220ba:	d003      	beq.n	80220c4 <HAL_UART_Transmit+0x28>
 80220bc:	1dbb      	adds	r3, r7, #6
 80220be:	881b      	ldrh	r3, [r3, #0]
 80220c0:	2b00      	cmp	r3, #0
 80220c2:	d101      	bne.n	80220c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80220c4:	2301      	movs	r3, #1
 80220c6:	e08d      	b.n	80221e4 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80220c8:	68fb      	ldr	r3, [r7, #12]
 80220ca:	689a      	ldr	r2, [r3, #8]
 80220cc:	2380      	movs	r3, #128	; 0x80
 80220ce:	015b      	lsls	r3, r3, #5
 80220d0:	429a      	cmp	r2, r3
 80220d2:	d109      	bne.n	80220e8 <HAL_UART_Transmit+0x4c>
 80220d4:	68fb      	ldr	r3, [r7, #12]
 80220d6:	691b      	ldr	r3, [r3, #16]
 80220d8:	2b00      	cmp	r3, #0
 80220da:	d105      	bne.n	80220e8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80220dc:	68bb      	ldr	r3, [r7, #8]
 80220de:	2201      	movs	r2, #1
 80220e0:	4013      	ands	r3, r2
 80220e2:	d001      	beq.n	80220e8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80220e4:	2301      	movs	r3, #1
 80220e6:	e07d      	b.n	80221e4 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80220e8:	68fb      	ldr	r3, [r7, #12]
 80220ea:	2274      	movs	r2, #116	; 0x74
 80220ec:	5c9b      	ldrb	r3, [r3, r2]
 80220ee:	2b01      	cmp	r3, #1
 80220f0:	d101      	bne.n	80220f6 <HAL_UART_Transmit+0x5a>
 80220f2:	2302      	movs	r3, #2
 80220f4:	e076      	b.n	80221e4 <HAL_UART_Transmit+0x148>
 80220f6:	68fb      	ldr	r3, [r7, #12]
 80220f8:	2274      	movs	r2, #116	; 0x74
 80220fa:	2101      	movs	r1, #1
 80220fc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80220fe:	68fb      	ldr	r3, [r7, #12]
 8022100:	2280      	movs	r2, #128	; 0x80
 8022102:	2100      	movs	r1, #0
 8022104:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8022106:	68fb      	ldr	r3, [r7, #12]
 8022108:	2221      	movs	r2, #33	; 0x21
 802210a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 802210c:	f7fe fd88 	bl	8020c20 <HAL_GetTick>
 8022110:	0003      	movs	r3, r0
 8022112:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8022114:	68fb      	ldr	r3, [r7, #12]
 8022116:	1dba      	adds	r2, r7, #6
 8022118:	2150      	movs	r1, #80	; 0x50
 802211a:	8812      	ldrh	r2, [r2, #0]
 802211c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 802211e:	68fb      	ldr	r3, [r7, #12]
 8022120:	1dba      	adds	r2, r7, #6
 8022122:	2152      	movs	r1, #82	; 0x52
 8022124:	8812      	ldrh	r2, [r2, #0]
 8022126:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8022128:	68fb      	ldr	r3, [r7, #12]
 802212a:	689a      	ldr	r2, [r3, #8]
 802212c:	2380      	movs	r3, #128	; 0x80
 802212e:	015b      	lsls	r3, r3, #5
 8022130:	429a      	cmp	r2, r3
 8022132:	d108      	bne.n	8022146 <HAL_UART_Transmit+0xaa>
 8022134:	68fb      	ldr	r3, [r7, #12]
 8022136:	691b      	ldr	r3, [r3, #16]
 8022138:	2b00      	cmp	r3, #0
 802213a:	d104      	bne.n	8022146 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 802213c:	2300      	movs	r3, #0
 802213e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8022140:	68bb      	ldr	r3, [r7, #8]
 8022142:	61bb      	str	r3, [r7, #24]
 8022144:	e003      	b.n	802214e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8022146:	68bb      	ldr	r3, [r7, #8]
 8022148:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 802214a:	2300      	movs	r3, #0
 802214c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 802214e:	68fb      	ldr	r3, [r7, #12]
 8022150:	2274      	movs	r2, #116	; 0x74
 8022152:	2100      	movs	r1, #0
 8022154:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8022156:	e02c      	b.n	80221b2 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8022158:	697a      	ldr	r2, [r7, #20]
 802215a:	68f8      	ldr	r0, [r7, #12]
 802215c:	683b      	ldr	r3, [r7, #0]
 802215e:	9300      	str	r3, [sp, #0]
 8022160:	0013      	movs	r3, r2
 8022162:	2200      	movs	r2, #0
 8022164:	2180      	movs	r1, #128	; 0x80
 8022166:	f000 fbfb 	bl	8022960 <UART_WaitOnFlagUntilTimeout>
 802216a:	1e03      	subs	r3, r0, #0
 802216c:	d001      	beq.n	8022172 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 802216e:	2303      	movs	r3, #3
 8022170:	e038      	b.n	80221e4 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8022172:	69fb      	ldr	r3, [r7, #28]
 8022174:	2b00      	cmp	r3, #0
 8022176:	d10b      	bne.n	8022190 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8022178:	69bb      	ldr	r3, [r7, #24]
 802217a:	881b      	ldrh	r3, [r3, #0]
 802217c:	001a      	movs	r2, r3
 802217e:	68fb      	ldr	r3, [r7, #12]
 8022180:	681b      	ldr	r3, [r3, #0]
 8022182:	05d2      	lsls	r2, r2, #23
 8022184:	0dd2      	lsrs	r2, r2, #23
 8022186:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8022188:	69bb      	ldr	r3, [r7, #24]
 802218a:	3302      	adds	r3, #2
 802218c:	61bb      	str	r3, [r7, #24]
 802218e:	e007      	b.n	80221a0 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8022190:	69fb      	ldr	r3, [r7, #28]
 8022192:	781a      	ldrb	r2, [r3, #0]
 8022194:	68fb      	ldr	r3, [r7, #12]
 8022196:	681b      	ldr	r3, [r3, #0]
 8022198:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 802219a:	69fb      	ldr	r3, [r7, #28]
 802219c:	3301      	adds	r3, #1
 802219e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80221a0:	68fb      	ldr	r3, [r7, #12]
 80221a2:	2252      	movs	r2, #82	; 0x52
 80221a4:	5a9b      	ldrh	r3, [r3, r2]
 80221a6:	b29b      	uxth	r3, r3
 80221a8:	3b01      	subs	r3, #1
 80221aa:	b299      	uxth	r1, r3
 80221ac:	68fb      	ldr	r3, [r7, #12]
 80221ae:	2252      	movs	r2, #82	; 0x52
 80221b0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80221b2:	68fb      	ldr	r3, [r7, #12]
 80221b4:	2252      	movs	r2, #82	; 0x52
 80221b6:	5a9b      	ldrh	r3, [r3, r2]
 80221b8:	b29b      	uxth	r3, r3
 80221ba:	2b00      	cmp	r3, #0
 80221bc:	d1cc      	bne.n	8022158 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80221be:	697a      	ldr	r2, [r7, #20]
 80221c0:	68f8      	ldr	r0, [r7, #12]
 80221c2:	683b      	ldr	r3, [r7, #0]
 80221c4:	9300      	str	r3, [sp, #0]
 80221c6:	0013      	movs	r3, r2
 80221c8:	2200      	movs	r2, #0
 80221ca:	2140      	movs	r1, #64	; 0x40
 80221cc:	f000 fbc8 	bl	8022960 <UART_WaitOnFlagUntilTimeout>
 80221d0:	1e03      	subs	r3, r0, #0
 80221d2:	d001      	beq.n	80221d8 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80221d4:	2303      	movs	r3, #3
 80221d6:	e005      	b.n	80221e4 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80221d8:	68fb      	ldr	r3, [r7, #12]
 80221da:	2220      	movs	r2, #32
 80221dc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80221de:	2300      	movs	r3, #0
 80221e0:	e000      	b.n	80221e4 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80221e2:	2302      	movs	r3, #2
  }
}
 80221e4:	0018      	movs	r0, r3
 80221e6:	46bd      	mov	sp, r7
 80221e8:	b008      	add	sp, #32
 80221ea:	bd80      	pop	{r7, pc}

080221ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80221ec:	b5b0      	push	{r4, r5, r7, lr}
 80221ee:	b08e      	sub	sp, #56	; 0x38
 80221f0:	af00      	add	r7, sp, #0
 80221f2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80221f4:	231a      	movs	r3, #26
 80221f6:	2218      	movs	r2, #24
 80221f8:	4694      	mov	ip, r2
 80221fa:	44bc      	add	ip, r7
 80221fc:	4463      	add	r3, ip
 80221fe:	2200      	movs	r2, #0
 8022200:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8022202:	69fb      	ldr	r3, [r7, #28]
 8022204:	689a      	ldr	r2, [r3, #8]
 8022206:	69fb      	ldr	r3, [r7, #28]
 8022208:	691b      	ldr	r3, [r3, #16]
 802220a:	431a      	orrs	r2, r3
 802220c:	69fb      	ldr	r3, [r7, #28]
 802220e:	695b      	ldr	r3, [r3, #20]
 8022210:	431a      	orrs	r2, r3
 8022212:	69fb      	ldr	r3, [r7, #28]
 8022214:	69db      	ldr	r3, [r3, #28]
 8022216:	4313      	orrs	r3, r2
 8022218:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 802221a:	69fb      	ldr	r3, [r7, #28]
 802221c:	681b      	ldr	r3, [r3, #0]
 802221e:	681b      	ldr	r3, [r3, #0]
 8022220:	4ab0      	ldr	r2, [pc, #704]	; (80224e4 <UART_SetConfig+0x2f8>)
 8022222:	4013      	ands	r3, r2
 8022224:	0019      	movs	r1, r3
 8022226:	69fb      	ldr	r3, [r7, #28]
 8022228:	681b      	ldr	r3, [r3, #0]
 802222a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802222c:	430a      	orrs	r2, r1
 802222e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8022230:	69fb      	ldr	r3, [r7, #28]
 8022232:	681b      	ldr	r3, [r3, #0]
 8022234:	685b      	ldr	r3, [r3, #4]
 8022236:	4aac      	ldr	r2, [pc, #688]	; (80224e8 <UART_SetConfig+0x2fc>)
 8022238:	4013      	ands	r3, r2
 802223a:	0019      	movs	r1, r3
 802223c:	69fb      	ldr	r3, [r7, #28]
 802223e:	68da      	ldr	r2, [r3, #12]
 8022240:	69fb      	ldr	r3, [r7, #28]
 8022242:	681b      	ldr	r3, [r3, #0]
 8022244:	430a      	orrs	r2, r1
 8022246:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8022248:	69fb      	ldr	r3, [r7, #28]
 802224a:	699b      	ldr	r3, [r3, #24]
 802224c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 802224e:	69fb      	ldr	r3, [r7, #28]
 8022250:	681b      	ldr	r3, [r3, #0]
 8022252:	4aa6      	ldr	r2, [pc, #664]	; (80224ec <UART_SetConfig+0x300>)
 8022254:	4293      	cmp	r3, r2
 8022256:	d004      	beq.n	8022262 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8022258:	69fb      	ldr	r3, [r7, #28]
 802225a:	6a1b      	ldr	r3, [r3, #32]
 802225c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802225e:	4313      	orrs	r3, r2
 8022260:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8022262:	69fb      	ldr	r3, [r7, #28]
 8022264:	681b      	ldr	r3, [r3, #0]
 8022266:	689b      	ldr	r3, [r3, #8]
 8022268:	4aa1      	ldr	r2, [pc, #644]	; (80224f0 <UART_SetConfig+0x304>)
 802226a:	4013      	ands	r3, r2
 802226c:	0019      	movs	r1, r3
 802226e:	69fb      	ldr	r3, [r7, #28]
 8022270:	681b      	ldr	r3, [r3, #0]
 8022272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8022274:	430a      	orrs	r2, r1
 8022276:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8022278:	69fb      	ldr	r3, [r7, #28]
 802227a:	681b      	ldr	r3, [r3, #0]
 802227c:	4a9d      	ldr	r2, [pc, #628]	; (80224f4 <UART_SetConfig+0x308>)
 802227e:	4293      	cmp	r3, r2
 8022280:	d136      	bne.n	80222f0 <UART_SetConfig+0x104>
 8022282:	4b9d      	ldr	r3, [pc, #628]	; (80224f8 <UART_SetConfig+0x30c>)
 8022284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022286:	2203      	movs	r2, #3
 8022288:	4013      	ands	r3, r2
 802228a:	2b03      	cmp	r3, #3
 802228c:	d020      	beq.n	80222d0 <UART_SetConfig+0xe4>
 802228e:	d827      	bhi.n	80222e0 <UART_SetConfig+0xf4>
 8022290:	2b02      	cmp	r3, #2
 8022292:	d00d      	beq.n	80222b0 <UART_SetConfig+0xc4>
 8022294:	d824      	bhi.n	80222e0 <UART_SetConfig+0xf4>
 8022296:	2b00      	cmp	r3, #0
 8022298:	d002      	beq.n	80222a0 <UART_SetConfig+0xb4>
 802229a:	2b01      	cmp	r3, #1
 802229c:	d010      	beq.n	80222c0 <UART_SetConfig+0xd4>
 802229e:	e01f      	b.n	80222e0 <UART_SetConfig+0xf4>
 80222a0:	231b      	movs	r3, #27
 80222a2:	2218      	movs	r2, #24
 80222a4:	4694      	mov	ip, r2
 80222a6:	44bc      	add	ip, r7
 80222a8:	4463      	add	r3, ip
 80222aa:	2201      	movs	r2, #1
 80222ac:	701a      	strb	r2, [r3, #0]
 80222ae:	e0c5      	b.n	802243c <UART_SetConfig+0x250>
 80222b0:	231b      	movs	r3, #27
 80222b2:	2218      	movs	r2, #24
 80222b4:	4694      	mov	ip, r2
 80222b6:	44bc      	add	ip, r7
 80222b8:	4463      	add	r3, ip
 80222ba:	2202      	movs	r2, #2
 80222bc:	701a      	strb	r2, [r3, #0]
 80222be:	e0bd      	b.n	802243c <UART_SetConfig+0x250>
 80222c0:	231b      	movs	r3, #27
 80222c2:	2218      	movs	r2, #24
 80222c4:	4694      	mov	ip, r2
 80222c6:	44bc      	add	ip, r7
 80222c8:	4463      	add	r3, ip
 80222ca:	2204      	movs	r2, #4
 80222cc:	701a      	strb	r2, [r3, #0]
 80222ce:	e0b5      	b.n	802243c <UART_SetConfig+0x250>
 80222d0:	231b      	movs	r3, #27
 80222d2:	2218      	movs	r2, #24
 80222d4:	4694      	mov	ip, r2
 80222d6:	44bc      	add	ip, r7
 80222d8:	4463      	add	r3, ip
 80222da:	2208      	movs	r2, #8
 80222dc:	701a      	strb	r2, [r3, #0]
 80222de:	e0ad      	b.n	802243c <UART_SetConfig+0x250>
 80222e0:	231b      	movs	r3, #27
 80222e2:	2218      	movs	r2, #24
 80222e4:	4694      	mov	ip, r2
 80222e6:	44bc      	add	ip, r7
 80222e8:	4463      	add	r3, ip
 80222ea:	2210      	movs	r2, #16
 80222ec:	701a      	strb	r2, [r3, #0]
 80222ee:	e0a5      	b.n	802243c <UART_SetConfig+0x250>
 80222f0:	69fb      	ldr	r3, [r7, #28]
 80222f2:	681b      	ldr	r3, [r3, #0]
 80222f4:	4a81      	ldr	r2, [pc, #516]	; (80224fc <UART_SetConfig+0x310>)
 80222f6:	4293      	cmp	r3, r2
 80222f8:	d136      	bne.n	8022368 <UART_SetConfig+0x17c>
 80222fa:	4b7f      	ldr	r3, [pc, #508]	; (80224f8 <UART_SetConfig+0x30c>)
 80222fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80222fe:	220c      	movs	r2, #12
 8022300:	4013      	ands	r3, r2
 8022302:	2b0c      	cmp	r3, #12
 8022304:	d020      	beq.n	8022348 <UART_SetConfig+0x15c>
 8022306:	d827      	bhi.n	8022358 <UART_SetConfig+0x16c>
 8022308:	2b08      	cmp	r3, #8
 802230a:	d00d      	beq.n	8022328 <UART_SetConfig+0x13c>
 802230c:	d824      	bhi.n	8022358 <UART_SetConfig+0x16c>
 802230e:	2b00      	cmp	r3, #0
 8022310:	d002      	beq.n	8022318 <UART_SetConfig+0x12c>
 8022312:	2b04      	cmp	r3, #4
 8022314:	d010      	beq.n	8022338 <UART_SetConfig+0x14c>
 8022316:	e01f      	b.n	8022358 <UART_SetConfig+0x16c>
 8022318:	231b      	movs	r3, #27
 802231a:	2218      	movs	r2, #24
 802231c:	4694      	mov	ip, r2
 802231e:	44bc      	add	ip, r7
 8022320:	4463      	add	r3, ip
 8022322:	2200      	movs	r2, #0
 8022324:	701a      	strb	r2, [r3, #0]
 8022326:	e089      	b.n	802243c <UART_SetConfig+0x250>
 8022328:	231b      	movs	r3, #27
 802232a:	2218      	movs	r2, #24
 802232c:	4694      	mov	ip, r2
 802232e:	44bc      	add	ip, r7
 8022330:	4463      	add	r3, ip
 8022332:	2202      	movs	r2, #2
 8022334:	701a      	strb	r2, [r3, #0]
 8022336:	e081      	b.n	802243c <UART_SetConfig+0x250>
 8022338:	231b      	movs	r3, #27
 802233a:	2218      	movs	r2, #24
 802233c:	4694      	mov	ip, r2
 802233e:	44bc      	add	ip, r7
 8022340:	4463      	add	r3, ip
 8022342:	2204      	movs	r2, #4
 8022344:	701a      	strb	r2, [r3, #0]
 8022346:	e079      	b.n	802243c <UART_SetConfig+0x250>
 8022348:	231b      	movs	r3, #27
 802234a:	2218      	movs	r2, #24
 802234c:	4694      	mov	ip, r2
 802234e:	44bc      	add	ip, r7
 8022350:	4463      	add	r3, ip
 8022352:	2208      	movs	r2, #8
 8022354:	701a      	strb	r2, [r3, #0]
 8022356:	e071      	b.n	802243c <UART_SetConfig+0x250>
 8022358:	231b      	movs	r3, #27
 802235a:	2218      	movs	r2, #24
 802235c:	4694      	mov	ip, r2
 802235e:	44bc      	add	ip, r7
 8022360:	4463      	add	r3, ip
 8022362:	2210      	movs	r2, #16
 8022364:	701a      	strb	r2, [r3, #0]
 8022366:	e069      	b.n	802243c <UART_SetConfig+0x250>
 8022368:	69fb      	ldr	r3, [r7, #28]
 802236a:	681b      	ldr	r3, [r3, #0]
 802236c:	4a64      	ldr	r2, [pc, #400]	; (8022500 <UART_SetConfig+0x314>)
 802236e:	4293      	cmp	r3, r2
 8022370:	d107      	bne.n	8022382 <UART_SetConfig+0x196>
 8022372:	231b      	movs	r3, #27
 8022374:	2218      	movs	r2, #24
 8022376:	4694      	mov	ip, r2
 8022378:	44bc      	add	ip, r7
 802237a:	4463      	add	r3, ip
 802237c:	2200      	movs	r2, #0
 802237e:	701a      	strb	r2, [r3, #0]
 8022380:	e05c      	b.n	802243c <UART_SetConfig+0x250>
 8022382:	69fb      	ldr	r3, [r7, #28]
 8022384:	681b      	ldr	r3, [r3, #0]
 8022386:	4a5f      	ldr	r2, [pc, #380]	; (8022504 <UART_SetConfig+0x318>)
 8022388:	4293      	cmp	r3, r2
 802238a:	d107      	bne.n	802239c <UART_SetConfig+0x1b0>
 802238c:	231b      	movs	r3, #27
 802238e:	2218      	movs	r2, #24
 8022390:	4694      	mov	ip, r2
 8022392:	44bc      	add	ip, r7
 8022394:	4463      	add	r3, ip
 8022396:	2200      	movs	r2, #0
 8022398:	701a      	strb	r2, [r3, #0]
 802239a:	e04f      	b.n	802243c <UART_SetConfig+0x250>
 802239c:	69fb      	ldr	r3, [r7, #28]
 802239e:	681b      	ldr	r3, [r3, #0]
 80223a0:	4a52      	ldr	r2, [pc, #328]	; (80224ec <UART_SetConfig+0x300>)
 80223a2:	4293      	cmp	r3, r2
 80223a4:	d143      	bne.n	802242e <UART_SetConfig+0x242>
 80223a6:	4b54      	ldr	r3, [pc, #336]	; (80224f8 <UART_SetConfig+0x30c>)
 80223a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80223aa:	23c0      	movs	r3, #192	; 0xc0
 80223ac:	011b      	lsls	r3, r3, #4
 80223ae:	4013      	ands	r3, r2
 80223b0:	22c0      	movs	r2, #192	; 0xc0
 80223b2:	0112      	lsls	r2, r2, #4
 80223b4:	4293      	cmp	r3, r2
 80223b6:	d02a      	beq.n	802240e <UART_SetConfig+0x222>
 80223b8:	22c0      	movs	r2, #192	; 0xc0
 80223ba:	0112      	lsls	r2, r2, #4
 80223bc:	4293      	cmp	r3, r2
 80223be:	d82e      	bhi.n	802241e <UART_SetConfig+0x232>
 80223c0:	2280      	movs	r2, #128	; 0x80
 80223c2:	0112      	lsls	r2, r2, #4
 80223c4:	4293      	cmp	r3, r2
 80223c6:	d012      	beq.n	80223ee <UART_SetConfig+0x202>
 80223c8:	2280      	movs	r2, #128	; 0x80
 80223ca:	0112      	lsls	r2, r2, #4
 80223cc:	4293      	cmp	r3, r2
 80223ce:	d826      	bhi.n	802241e <UART_SetConfig+0x232>
 80223d0:	2b00      	cmp	r3, #0
 80223d2:	d004      	beq.n	80223de <UART_SetConfig+0x1f2>
 80223d4:	2280      	movs	r2, #128	; 0x80
 80223d6:	00d2      	lsls	r2, r2, #3
 80223d8:	4293      	cmp	r3, r2
 80223da:	d010      	beq.n	80223fe <UART_SetConfig+0x212>
 80223dc:	e01f      	b.n	802241e <UART_SetConfig+0x232>
 80223de:	231b      	movs	r3, #27
 80223e0:	2218      	movs	r2, #24
 80223e2:	4694      	mov	ip, r2
 80223e4:	44bc      	add	ip, r7
 80223e6:	4463      	add	r3, ip
 80223e8:	2200      	movs	r2, #0
 80223ea:	701a      	strb	r2, [r3, #0]
 80223ec:	e026      	b.n	802243c <UART_SetConfig+0x250>
 80223ee:	231b      	movs	r3, #27
 80223f0:	2218      	movs	r2, #24
 80223f2:	4694      	mov	ip, r2
 80223f4:	44bc      	add	ip, r7
 80223f6:	4463      	add	r3, ip
 80223f8:	2202      	movs	r2, #2
 80223fa:	701a      	strb	r2, [r3, #0]
 80223fc:	e01e      	b.n	802243c <UART_SetConfig+0x250>
 80223fe:	231b      	movs	r3, #27
 8022400:	2218      	movs	r2, #24
 8022402:	4694      	mov	ip, r2
 8022404:	44bc      	add	ip, r7
 8022406:	4463      	add	r3, ip
 8022408:	2204      	movs	r2, #4
 802240a:	701a      	strb	r2, [r3, #0]
 802240c:	e016      	b.n	802243c <UART_SetConfig+0x250>
 802240e:	231b      	movs	r3, #27
 8022410:	2218      	movs	r2, #24
 8022412:	4694      	mov	ip, r2
 8022414:	44bc      	add	ip, r7
 8022416:	4463      	add	r3, ip
 8022418:	2208      	movs	r2, #8
 802241a:	701a      	strb	r2, [r3, #0]
 802241c:	e00e      	b.n	802243c <UART_SetConfig+0x250>
 802241e:	231b      	movs	r3, #27
 8022420:	2218      	movs	r2, #24
 8022422:	4694      	mov	ip, r2
 8022424:	44bc      	add	ip, r7
 8022426:	4463      	add	r3, ip
 8022428:	2210      	movs	r2, #16
 802242a:	701a      	strb	r2, [r3, #0]
 802242c:	e006      	b.n	802243c <UART_SetConfig+0x250>
 802242e:	231b      	movs	r3, #27
 8022430:	2218      	movs	r2, #24
 8022432:	4694      	mov	ip, r2
 8022434:	44bc      	add	ip, r7
 8022436:	4463      	add	r3, ip
 8022438:	2210      	movs	r2, #16
 802243a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 802243c:	69fb      	ldr	r3, [r7, #28]
 802243e:	681b      	ldr	r3, [r3, #0]
 8022440:	4a2a      	ldr	r2, [pc, #168]	; (80224ec <UART_SetConfig+0x300>)
 8022442:	4293      	cmp	r3, r2
 8022444:	d000      	beq.n	8022448 <UART_SetConfig+0x25c>
 8022446:	e09e      	b.n	8022586 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8022448:	231b      	movs	r3, #27
 802244a:	2218      	movs	r2, #24
 802244c:	4694      	mov	ip, r2
 802244e:	44bc      	add	ip, r7
 8022450:	4463      	add	r3, ip
 8022452:	781b      	ldrb	r3, [r3, #0]
 8022454:	2b08      	cmp	r3, #8
 8022456:	d01d      	beq.n	8022494 <UART_SetConfig+0x2a8>
 8022458:	dc20      	bgt.n	802249c <UART_SetConfig+0x2b0>
 802245a:	2b04      	cmp	r3, #4
 802245c:	d015      	beq.n	802248a <UART_SetConfig+0x29e>
 802245e:	dc1d      	bgt.n	802249c <UART_SetConfig+0x2b0>
 8022460:	2b00      	cmp	r3, #0
 8022462:	d002      	beq.n	802246a <UART_SetConfig+0x27e>
 8022464:	2b02      	cmp	r3, #2
 8022466:	d005      	beq.n	8022474 <UART_SetConfig+0x288>
 8022468:	e018      	b.n	802249c <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 802246a:	f7ff fc23 	bl	8021cb4 <HAL_RCC_GetPCLK1Freq>
 802246e:	0003      	movs	r3, r0
 8022470:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8022472:	e01d      	b.n	80224b0 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8022474:	4b20      	ldr	r3, [pc, #128]	; (80224f8 <UART_SetConfig+0x30c>)
 8022476:	681b      	ldr	r3, [r3, #0]
 8022478:	2210      	movs	r2, #16
 802247a:	4013      	ands	r3, r2
 802247c:	d002      	beq.n	8022484 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 802247e:	4b22      	ldr	r3, [pc, #136]	; (8022508 <UART_SetConfig+0x31c>)
 8022480:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8022482:	e015      	b.n	80224b0 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8022484:	4b21      	ldr	r3, [pc, #132]	; (802250c <UART_SetConfig+0x320>)
 8022486:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8022488:	e012      	b.n	80224b0 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 802248a:	f7ff fb63 	bl	8021b54 <HAL_RCC_GetSysClockFreq>
 802248e:	0003      	movs	r3, r0
 8022490:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8022492:	e00d      	b.n	80224b0 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8022494:	2380      	movs	r3, #128	; 0x80
 8022496:	021b      	lsls	r3, r3, #8
 8022498:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 802249a:	e009      	b.n	80224b0 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 802249c:	2300      	movs	r3, #0
 802249e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80224a0:	231a      	movs	r3, #26
 80224a2:	2218      	movs	r2, #24
 80224a4:	4694      	mov	ip, r2
 80224a6:	44bc      	add	ip, r7
 80224a8:	4463      	add	r3, ip
 80224aa:	2201      	movs	r2, #1
 80224ac:	701a      	strb	r2, [r3, #0]
        break;
 80224ae:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80224b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80224b2:	2b00      	cmp	r3, #0
 80224b4:	d100      	bne.n	80224b8 <UART_SetConfig+0x2cc>
 80224b6:	e13c      	b.n	8022732 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80224b8:	69fb      	ldr	r3, [r7, #28]
 80224ba:	685a      	ldr	r2, [r3, #4]
 80224bc:	0013      	movs	r3, r2
 80224be:	005b      	lsls	r3, r3, #1
 80224c0:	189b      	adds	r3, r3, r2
 80224c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80224c4:	429a      	cmp	r2, r3
 80224c6:	d305      	bcc.n	80224d4 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 80224c8:	69fb      	ldr	r3, [r7, #28]
 80224ca:	685b      	ldr	r3, [r3, #4]
 80224cc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80224ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80224d0:	429a      	cmp	r2, r3
 80224d2:	d91d      	bls.n	8022510 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 80224d4:	231a      	movs	r3, #26
 80224d6:	2218      	movs	r2, #24
 80224d8:	4694      	mov	ip, r2
 80224da:	44bc      	add	ip, r7
 80224dc:	4463      	add	r3, ip
 80224de:	2201      	movs	r2, #1
 80224e0:	701a      	strb	r2, [r3, #0]
 80224e2:	e126      	b.n	8022732 <UART_SetConfig+0x546>
 80224e4:	efff69f3 	.word	0xefff69f3
 80224e8:	ffffcfff 	.word	0xffffcfff
 80224ec:	40004800 	.word	0x40004800
 80224f0:	fffff4ff 	.word	0xfffff4ff
 80224f4:	40013800 	.word	0x40013800
 80224f8:	40021000 	.word	0x40021000
 80224fc:	40004400 	.word	0x40004400
 8022500:	40004c00 	.word	0x40004c00
 8022504:	40005000 	.word	0x40005000
 8022508:	003d0900 	.word	0x003d0900
 802250c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8022510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022512:	613b      	str	r3, [r7, #16]
 8022514:	2300      	movs	r3, #0
 8022516:	617b      	str	r3, [r7, #20]
 8022518:	6939      	ldr	r1, [r7, #16]
 802251a:	697a      	ldr	r2, [r7, #20]
 802251c:	000b      	movs	r3, r1
 802251e:	0e1b      	lsrs	r3, r3, #24
 8022520:	0010      	movs	r0, r2
 8022522:	0205      	lsls	r5, r0, #8
 8022524:	431d      	orrs	r5, r3
 8022526:	000b      	movs	r3, r1
 8022528:	021c      	lsls	r4, r3, #8
 802252a:	69fb      	ldr	r3, [r7, #28]
 802252c:	685b      	ldr	r3, [r3, #4]
 802252e:	085b      	lsrs	r3, r3, #1
 8022530:	60bb      	str	r3, [r7, #8]
 8022532:	2300      	movs	r3, #0
 8022534:	60fb      	str	r3, [r7, #12]
 8022536:	68b8      	ldr	r0, [r7, #8]
 8022538:	68f9      	ldr	r1, [r7, #12]
 802253a:	1900      	adds	r0, r0, r4
 802253c:	4169      	adcs	r1, r5
 802253e:	69fb      	ldr	r3, [r7, #28]
 8022540:	685b      	ldr	r3, [r3, #4]
 8022542:	603b      	str	r3, [r7, #0]
 8022544:	2300      	movs	r3, #0
 8022546:	607b      	str	r3, [r7, #4]
 8022548:	683a      	ldr	r2, [r7, #0]
 802254a:	687b      	ldr	r3, [r7, #4]
 802254c:	f7fd fe72 	bl	8020234 <__aeabi_uldivmod>
 8022550:	0002      	movs	r2, r0
 8022552:	000b      	movs	r3, r1
 8022554:	0013      	movs	r3, r2
 8022556:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8022558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802255a:	23c0      	movs	r3, #192	; 0xc0
 802255c:	009b      	lsls	r3, r3, #2
 802255e:	429a      	cmp	r2, r3
 8022560:	d309      	bcc.n	8022576 <UART_SetConfig+0x38a>
 8022562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022564:	2380      	movs	r3, #128	; 0x80
 8022566:	035b      	lsls	r3, r3, #13
 8022568:	429a      	cmp	r2, r3
 802256a:	d204      	bcs.n	8022576 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 802256c:	69fb      	ldr	r3, [r7, #28]
 802256e:	681b      	ldr	r3, [r3, #0]
 8022570:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022572:	60da      	str	r2, [r3, #12]
 8022574:	e0dd      	b.n	8022732 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8022576:	231a      	movs	r3, #26
 8022578:	2218      	movs	r2, #24
 802257a:	4694      	mov	ip, r2
 802257c:	44bc      	add	ip, r7
 802257e:	4463      	add	r3, ip
 8022580:	2201      	movs	r2, #1
 8022582:	701a      	strb	r2, [r3, #0]
 8022584:	e0d5      	b.n	8022732 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8022586:	69fb      	ldr	r3, [r7, #28]
 8022588:	69da      	ldr	r2, [r3, #28]
 802258a:	2380      	movs	r3, #128	; 0x80
 802258c:	021b      	lsls	r3, r3, #8
 802258e:	429a      	cmp	r2, r3
 8022590:	d000      	beq.n	8022594 <UART_SetConfig+0x3a8>
 8022592:	e074      	b.n	802267e <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8022594:	231b      	movs	r3, #27
 8022596:	2218      	movs	r2, #24
 8022598:	4694      	mov	ip, r2
 802259a:	44bc      	add	ip, r7
 802259c:	4463      	add	r3, ip
 802259e:	781b      	ldrb	r3, [r3, #0]
 80225a0:	2b08      	cmp	r3, #8
 80225a2:	d822      	bhi.n	80225ea <UART_SetConfig+0x3fe>
 80225a4:	009a      	lsls	r2, r3, #2
 80225a6:	4b6b      	ldr	r3, [pc, #428]	; (8022754 <UART_SetConfig+0x568>)
 80225a8:	18d3      	adds	r3, r2, r3
 80225aa:	681b      	ldr	r3, [r3, #0]
 80225ac:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80225ae:	f7ff fb81 	bl	8021cb4 <HAL_RCC_GetPCLK1Freq>
 80225b2:	0003      	movs	r3, r0
 80225b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80225b6:	e022      	b.n	80225fe <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80225b8:	f7ff fb92 	bl	8021ce0 <HAL_RCC_GetPCLK2Freq>
 80225bc:	0003      	movs	r3, r0
 80225be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80225c0:	e01d      	b.n	80225fe <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80225c2:	4b65      	ldr	r3, [pc, #404]	; (8022758 <UART_SetConfig+0x56c>)
 80225c4:	681b      	ldr	r3, [r3, #0]
 80225c6:	2210      	movs	r2, #16
 80225c8:	4013      	ands	r3, r2
 80225ca:	d002      	beq.n	80225d2 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80225cc:	4b63      	ldr	r3, [pc, #396]	; (802275c <UART_SetConfig+0x570>)
 80225ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80225d0:	e015      	b.n	80225fe <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 80225d2:	4b63      	ldr	r3, [pc, #396]	; (8022760 <UART_SetConfig+0x574>)
 80225d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80225d6:	e012      	b.n	80225fe <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80225d8:	f7ff fabc 	bl	8021b54 <HAL_RCC_GetSysClockFreq>
 80225dc:	0003      	movs	r3, r0
 80225de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80225e0:	e00d      	b.n	80225fe <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80225e2:	2380      	movs	r3, #128	; 0x80
 80225e4:	021b      	lsls	r3, r3, #8
 80225e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80225e8:	e009      	b.n	80225fe <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 80225ea:	2300      	movs	r3, #0
 80225ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80225ee:	231a      	movs	r3, #26
 80225f0:	2218      	movs	r2, #24
 80225f2:	4694      	mov	ip, r2
 80225f4:	44bc      	add	ip, r7
 80225f6:	4463      	add	r3, ip
 80225f8:	2201      	movs	r2, #1
 80225fa:	701a      	strb	r2, [r3, #0]
        break;
 80225fc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80225fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022600:	2b00      	cmp	r3, #0
 8022602:	d100      	bne.n	8022606 <UART_SetConfig+0x41a>
 8022604:	e095      	b.n	8022732 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8022606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022608:	005a      	lsls	r2, r3, #1
 802260a:	69fb      	ldr	r3, [r7, #28]
 802260c:	685b      	ldr	r3, [r3, #4]
 802260e:	085b      	lsrs	r3, r3, #1
 8022610:	18d2      	adds	r2, r2, r3
 8022612:	69fb      	ldr	r3, [r7, #28]
 8022614:	685b      	ldr	r3, [r3, #4]
 8022616:	0019      	movs	r1, r3
 8022618:	0010      	movs	r0, r2
 802261a:	f7fd fd7f 	bl	802011c <__udivsi3>
 802261e:	0003      	movs	r3, r0
 8022620:	b29b      	uxth	r3, r3
 8022622:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8022624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022626:	2b0f      	cmp	r3, #15
 8022628:	d921      	bls.n	802266e <UART_SetConfig+0x482>
 802262a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802262c:	2380      	movs	r3, #128	; 0x80
 802262e:	025b      	lsls	r3, r3, #9
 8022630:	429a      	cmp	r2, r3
 8022632:	d21c      	bcs.n	802266e <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8022634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022636:	b29a      	uxth	r2, r3
 8022638:	200e      	movs	r0, #14
 802263a:	2418      	movs	r4, #24
 802263c:	193b      	adds	r3, r7, r4
 802263e:	181b      	adds	r3, r3, r0
 8022640:	210f      	movs	r1, #15
 8022642:	438a      	bics	r2, r1
 8022644:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8022646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022648:	085b      	lsrs	r3, r3, #1
 802264a:	b29b      	uxth	r3, r3
 802264c:	2207      	movs	r2, #7
 802264e:	4013      	ands	r3, r2
 8022650:	b299      	uxth	r1, r3
 8022652:	193b      	adds	r3, r7, r4
 8022654:	181b      	adds	r3, r3, r0
 8022656:	193a      	adds	r2, r7, r4
 8022658:	1812      	adds	r2, r2, r0
 802265a:	8812      	ldrh	r2, [r2, #0]
 802265c:	430a      	orrs	r2, r1
 802265e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8022660:	69fb      	ldr	r3, [r7, #28]
 8022662:	681b      	ldr	r3, [r3, #0]
 8022664:	193a      	adds	r2, r7, r4
 8022666:	1812      	adds	r2, r2, r0
 8022668:	8812      	ldrh	r2, [r2, #0]
 802266a:	60da      	str	r2, [r3, #12]
 802266c:	e061      	b.n	8022732 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 802266e:	231a      	movs	r3, #26
 8022670:	2218      	movs	r2, #24
 8022672:	4694      	mov	ip, r2
 8022674:	44bc      	add	ip, r7
 8022676:	4463      	add	r3, ip
 8022678:	2201      	movs	r2, #1
 802267a:	701a      	strb	r2, [r3, #0]
 802267c:	e059      	b.n	8022732 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 802267e:	231b      	movs	r3, #27
 8022680:	2218      	movs	r2, #24
 8022682:	4694      	mov	ip, r2
 8022684:	44bc      	add	ip, r7
 8022686:	4463      	add	r3, ip
 8022688:	781b      	ldrb	r3, [r3, #0]
 802268a:	2b08      	cmp	r3, #8
 802268c:	d822      	bhi.n	80226d4 <UART_SetConfig+0x4e8>
 802268e:	009a      	lsls	r2, r3, #2
 8022690:	4b34      	ldr	r3, [pc, #208]	; (8022764 <UART_SetConfig+0x578>)
 8022692:	18d3      	adds	r3, r2, r3
 8022694:	681b      	ldr	r3, [r3, #0]
 8022696:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8022698:	f7ff fb0c 	bl	8021cb4 <HAL_RCC_GetPCLK1Freq>
 802269c:	0003      	movs	r3, r0
 802269e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80226a0:	e022      	b.n	80226e8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80226a2:	f7ff fb1d 	bl	8021ce0 <HAL_RCC_GetPCLK2Freq>
 80226a6:	0003      	movs	r3, r0
 80226a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80226aa:	e01d      	b.n	80226e8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80226ac:	4b2a      	ldr	r3, [pc, #168]	; (8022758 <UART_SetConfig+0x56c>)
 80226ae:	681b      	ldr	r3, [r3, #0]
 80226b0:	2210      	movs	r2, #16
 80226b2:	4013      	ands	r3, r2
 80226b4:	d002      	beq.n	80226bc <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80226b6:	4b29      	ldr	r3, [pc, #164]	; (802275c <UART_SetConfig+0x570>)
 80226b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80226ba:	e015      	b.n	80226e8 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 80226bc:	4b28      	ldr	r3, [pc, #160]	; (8022760 <UART_SetConfig+0x574>)
 80226be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80226c0:	e012      	b.n	80226e8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80226c2:	f7ff fa47 	bl	8021b54 <HAL_RCC_GetSysClockFreq>
 80226c6:	0003      	movs	r3, r0
 80226c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80226ca:	e00d      	b.n	80226e8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80226cc:	2380      	movs	r3, #128	; 0x80
 80226ce:	021b      	lsls	r3, r3, #8
 80226d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80226d2:	e009      	b.n	80226e8 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 80226d4:	2300      	movs	r3, #0
 80226d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80226d8:	231a      	movs	r3, #26
 80226da:	2218      	movs	r2, #24
 80226dc:	4694      	mov	ip, r2
 80226de:	44bc      	add	ip, r7
 80226e0:	4463      	add	r3, ip
 80226e2:	2201      	movs	r2, #1
 80226e4:	701a      	strb	r2, [r3, #0]
        break;
 80226e6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80226e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80226ea:	2b00      	cmp	r3, #0
 80226ec:	d021      	beq.n	8022732 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80226ee:	69fb      	ldr	r3, [r7, #28]
 80226f0:	685b      	ldr	r3, [r3, #4]
 80226f2:	085a      	lsrs	r2, r3, #1
 80226f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80226f6:	18d2      	adds	r2, r2, r3
 80226f8:	69fb      	ldr	r3, [r7, #28]
 80226fa:	685b      	ldr	r3, [r3, #4]
 80226fc:	0019      	movs	r1, r3
 80226fe:	0010      	movs	r0, r2
 8022700:	f7fd fd0c 	bl	802011c <__udivsi3>
 8022704:	0003      	movs	r3, r0
 8022706:	b29b      	uxth	r3, r3
 8022708:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 802270a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802270c:	2b0f      	cmp	r3, #15
 802270e:	d909      	bls.n	8022724 <UART_SetConfig+0x538>
 8022710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022712:	2380      	movs	r3, #128	; 0x80
 8022714:	025b      	lsls	r3, r3, #9
 8022716:	429a      	cmp	r2, r3
 8022718:	d204      	bcs.n	8022724 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 802271a:	69fb      	ldr	r3, [r7, #28]
 802271c:	681b      	ldr	r3, [r3, #0]
 802271e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022720:	60da      	str	r2, [r3, #12]
 8022722:	e006      	b.n	8022732 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8022724:	231a      	movs	r3, #26
 8022726:	2218      	movs	r2, #24
 8022728:	4694      	mov	ip, r2
 802272a:	44bc      	add	ip, r7
 802272c:	4463      	add	r3, ip
 802272e:	2201      	movs	r2, #1
 8022730:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8022732:	69fb      	ldr	r3, [r7, #28]
 8022734:	2200      	movs	r2, #0
 8022736:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8022738:	69fb      	ldr	r3, [r7, #28]
 802273a:	2200      	movs	r2, #0
 802273c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 802273e:	231a      	movs	r3, #26
 8022740:	2218      	movs	r2, #24
 8022742:	4694      	mov	ip, r2
 8022744:	44bc      	add	ip, r7
 8022746:	4463      	add	r3, ip
 8022748:	781b      	ldrb	r3, [r3, #0]
}
 802274a:	0018      	movs	r0, r3
 802274c:	46bd      	mov	sp, r7
 802274e:	b00e      	add	sp, #56	; 0x38
 8022750:	bdb0      	pop	{r4, r5, r7, pc}
 8022752:	46c0      	nop			; (mov r8, r8)
 8022754:	08023aec 	.word	0x08023aec
 8022758:	40021000 	.word	0x40021000
 802275c:	003d0900 	.word	0x003d0900
 8022760:	00f42400 	.word	0x00f42400
 8022764:	08023b10 	.word	0x08023b10

08022768 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8022768:	b580      	push	{r7, lr}
 802276a:	b082      	sub	sp, #8
 802276c:	af00      	add	r7, sp, #0
 802276e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8022770:	687b      	ldr	r3, [r7, #4]
 8022772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022774:	2201      	movs	r2, #1
 8022776:	4013      	ands	r3, r2
 8022778:	d00b      	beq.n	8022792 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 802277a:	687b      	ldr	r3, [r7, #4]
 802277c:	681b      	ldr	r3, [r3, #0]
 802277e:	685b      	ldr	r3, [r3, #4]
 8022780:	4a4a      	ldr	r2, [pc, #296]	; (80228ac <UART_AdvFeatureConfig+0x144>)
 8022782:	4013      	ands	r3, r2
 8022784:	0019      	movs	r1, r3
 8022786:	687b      	ldr	r3, [r7, #4]
 8022788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802278a:	687b      	ldr	r3, [r7, #4]
 802278c:	681b      	ldr	r3, [r3, #0]
 802278e:	430a      	orrs	r2, r1
 8022790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8022792:	687b      	ldr	r3, [r7, #4]
 8022794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022796:	2202      	movs	r2, #2
 8022798:	4013      	ands	r3, r2
 802279a:	d00b      	beq.n	80227b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 802279c:	687b      	ldr	r3, [r7, #4]
 802279e:	681b      	ldr	r3, [r3, #0]
 80227a0:	685b      	ldr	r3, [r3, #4]
 80227a2:	4a43      	ldr	r2, [pc, #268]	; (80228b0 <UART_AdvFeatureConfig+0x148>)
 80227a4:	4013      	ands	r3, r2
 80227a6:	0019      	movs	r1, r3
 80227a8:	687b      	ldr	r3, [r7, #4]
 80227aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80227ac:	687b      	ldr	r3, [r7, #4]
 80227ae:	681b      	ldr	r3, [r3, #0]
 80227b0:	430a      	orrs	r2, r1
 80227b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80227b4:	687b      	ldr	r3, [r7, #4]
 80227b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80227b8:	2204      	movs	r2, #4
 80227ba:	4013      	ands	r3, r2
 80227bc:	d00b      	beq.n	80227d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80227be:	687b      	ldr	r3, [r7, #4]
 80227c0:	681b      	ldr	r3, [r3, #0]
 80227c2:	685b      	ldr	r3, [r3, #4]
 80227c4:	4a3b      	ldr	r2, [pc, #236]	; (80228b4 <UART_AdvFeatureConfig+0x14c>)
 80227c6:	4013      	ands	r3, r2
 80227c8:	0019      	movs	r1, r3
 80227ca:	687b      	ldr	r3, [r7, #4]
 80227cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80227ce:	687b      	ldr	r3, [r7, #4]
 80227d0:	681b      	ldr	r3, [r3, #0]
 80227d2:	430a      	orrs	r2, r1
 80227d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80227d6:	687b      	ldr	r3, [r7, #4]
 80227d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80227da:	2208      	movs	r2, #8
 80227dc:	4013      	ands	r3, r2
 80227de:	d00b      	beq.n	80227f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80227e0:	687b      	ldr	r3, [r7, #4]
 80227e2:	681b      	ldr	r3, [r3, #0]
 80227e4:	685b      	ldr	r3, [r3, #4]
 80227e6:	4a34      	ldr	r2, [pc, #208]	; (80228b8 <UART_AdvFeatureConfig+0x150>)
 80227e8:	4013      	ands	r3, r2
 80227ea:	0019      	movs	r1, r3
 80227ec:	687b      	ldr	r3, [r7, #4]
 80227ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80227f0:	687b      	ldr	r3, [r7, #4]
 80227f2:	681b      	ldr	r3, [r3, #0]
 80227f4:	430a      	orrs	r2, r1
 80227f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80227f8:	687b      	ldr	r3, [r7, #4]
 80227fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80227fc:	2210      	movs	r2, #16
 80227fe:	4013      	ands	r3, r2
 8022800:	d00b      	beq.n	802281a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8022802:	687b      	ldr	r3, [r7, #4]
 8022804:	681b      	ldr	r3, [r3, #0]
 8022806:	689b      	ldr	r3, [r3, #8]
 8022808:	4a2c      	ldr	r2, [pc, #176]	; (80228bc <UART_AdvFeatureConfig+0x154>)
 802280a:	4013      	ands	r3, r2
 802280c:	0019      	movs	r1, r3
 802280e:	687b      	ldr	r3, [r7, #4]
 8022810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8022812:	687b      	ldr	r3, [r7, #4]
 8022814:	681b      	ldr	r3, [r3, #0]
 8022816:	430a      	orrs	r2, r1
 8022818:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 802281a:	687b      	ldr	r3, [r7, #4]
 802281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802281e:	2220      	movs	r2, #32
 8022820:	4013      	ands	r3, r2
 8022822:	d00b      	beq.n	802283c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8022824:	687b      	ldr	r3, [r7, #4]
 8022826:	681b      	ldr	r3, [r3, #0]
 8022828:	689b      	ldr	r3, [r3, #8]
 802282a:	4a25      	ldr	r2, [pc, #148]	; (80228c0 <UART_AdvFeatureConfig+0x158>)
 802282c:	4013      	ands	r3, r2
 802282e:	0019      	movs	r1, r3
 8022830:	687b      	ldr	r3, [r7, #4]
 8022832:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8022834:	687b      	ldr	r3, [r7, #4]
 8022836:	681b      	ldr	r3, [r3, #0]
 8022838:	430a      	orrs	r2, r1
 802283a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 802283c:	687b      	ldr	r3, [r7, #4]
 802283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022840:	2240      	movs	r2, #64	; 0x40
 8022842:	4013      	ands	r3, r2
 8022844:	d01d      	beq.n	8022882 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8022846:	687b      	ldr	r3, [r7, #4]
 8022848:	681b      	ldr	r3, [r3, #0]
 802284a:	685b      	ldr	r3, [r3, #4]
 802284c:	4a1d      	ldr	r2, [pc, #116]	; (80228c4 <UART_AdvFeatureConfig+0x15c>)
 802284e:	4013      	ands	r3, r2
 8022850:	0019      	movs	r1, r3
 8022852:	687b      	ldr	r3, [r7, #4]
 8022854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8022856:	687b      	ldr	r3, [r7, #4]
 8022858:	681b      	ldr	r3, [r3, #0]
 802285a:	430a      	orrs	r2, r1
 802285c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 802285e:	687b      	ldr	r3, [r7, #4]
 8022860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8022862:	2380      	movs	r3, #128	; 0x80
 8022864:	035b      	lsls	r3, r3, #13
 8022866:	429a      	cmp	r2, r3
 8022868:	d10b      	bne.n	8022882 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 802286a:	687b      	ldr	r3, [r7, #4]
 802286c:	681b      	ldr	r3, [r3, #0]
 802286e:	685b      	ldr	r3, [r3, #4]
 8022870:	4a15      	ldr	r2, [pc, #84]	; (80228c8 <UART_AdvFeatureConfig+0x160>)
 8022872:	4013      	ands	r3, r2
 8022874:	0019      	movs	r1, r3
 8022876:	687b      	ldr	r3, [r7, #4]
 8022878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802287a:	687b      	ldr	r3, [r7, #4]
 802287c:	681b      	ldr	r3, [r3, #0]
 802287e:	430a      	orrs	r2, r1
 8022880:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8022882:	687b      	ldr	r3, [r7, #4]
 8022884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022886:	2280      	movs	r2, #128	; 0x80
 8022888:	4013      	ands	r3, r2
 802288a:	d00b      	beq.n	80228a4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 802288c:	687b      	ldr	r3, [r7, #4]
 802288e:	681b      	ldr	r3, [r3, #0]
 8022890:	685b      	ldr	r3, [r3, #4]
 8022892:	4a0e      	ldr	r2, [pc, #56]	; (80228cc <UART_AdvFeatureConfig+0x164>)
 8022894:	4013      	ands	r3, r2
 8022896:	0019      	movs	r1, r3
 8022898:	687b      	ldr	r3, [r7, #4]
 802289a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802289c:	687b      	ldr	r3, [r7, #4]
 802289e:	681b      	ldr	r3, [r3, #0]
 80228a0:	430a      	orrs	r2, r1
 80228a2:	605a      	str	r2, [r3, #4]
  }
}
 80228a4:	46c0      	nop			; (mov r8, r8)
 80228a6:	46bd      	mov	sp, r7
 80228a8:	b002      	add	sp, #8
 80228aa:	bd80      	pop	{r7, pc}
 80228ac:	fffdffff 	.word	0xfffdffff
 80228b0:	fffeffff 	.word	0xfffeffff
 80228b4:	fffbffff 	.word	0xfffbffff
 80228b8:	ffff7fff 	.word	0xffff7fff
 80228bc:	ffffefff 	.word	0xffffefff
 80228c0:	ffffdfff 	.word	0xffffdfff
 80228c4:	ffefffff 	.word	0xffefffff
 80228c8:	ff9fffff 	.word	0xff9fffff
 80228cc:	fff7ffff 	.word	0xfff7ffff

080228d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80228d0:	b580      	push	{r7, lr}
 80228d2:	b086      	sub	sp, #24
 80228d4:	af02      	add	r7, sp, #8
 80228d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80228d8:	687b      	ldr	r3, [r7, #4]
 80228da:	2280      	movs	r2, #128	; 0x80
 80228dc:	2100      	movs	r1, #0
 80228de:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80228e0:	f7fe f99e 	bl	8020c20 <HAL_GetTick>
 80228e4:	0003      	movs	r3, r0
 80228e6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80228e8:	687b      	ldr	r3, [r7, #4]
 80228ea:	681b      	ldr	r3, [r3, #0]
 80228ec:	681b      	ldr	r3, [r3, #0]
 80228ee:	2208      	movs	r2, #8
 80228f0:	4013      	ands	r3, r2
 80228f2:	2b08      	cmp	r3, #8
 80228f4:	d10c      	bne.n	8022910 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80228f6:	68fb      	ldr	r3, [r7, #12]
 80228f8:	2280      	movs	r2, #128	; 0x80
 80228fa:	0391      	lsls	r1, r2, #14
 80228fc:	6878      	ldr	r0, [r7, #4]
 80228fe:	4a17      	ldr	r2, [pc, #92]	; (802295c <UART_CheckIdleState+0x8c>)
 8022900:	9200      	str	r2, [sp, #0]
 8022902:	2200      	movs	r2, #0
 8022904:	f000 f82c 	bl	8022960 <UART_WaitOnFlagUntilTimeout>
 8022908:	1e03      	subs	r3, r0, #0
 802290a:	d001      	beq.n	8022910 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 802290c:	2303      	movs	r3, #3
 802290e:	e021      	b.n	8022954 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8022910:	687b      	ldr	r3, [r7, #4]
 8022912:	681b      	ldr	r3, [r3, #0]
 8022914:	681b      	ldr	r3, [r3, #0]
 8022916:	2204      	movs	r2, #4
 8022918:	4013      	ands	r3, r2
 802291a:	2b04      	cmp	r3, #4
 802291c:	d10c      	bne.n	8022938 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 802291e:	68fb      	ldr	r3, [r7, #12]
 8022920:	2280      	movs	r2, #128	; 0x80
 8022922:	03d1      	lsls	r1, r2, #15
 8022924:	6878      	ldr	r0, [r7, #4]
 8022926:	4a0d      	ldr	r2, [pc, #52]	; (802295c <UART_CheckIdleState+0x8c>)
 8022928:	9200      	str	r2, [sp, #0]
 802292a:	2200      	movs	r2, #0
 802292c:	f000 f818 	bl	8022960 <UART_WaitOnFlagUntilTimeout>
 8022930:	1e03      	subs	r3, r0, #0
 8022932:	d001      	beq.n	8022938 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8022934:	2303      	movs	r3, #3
 8022936:	e00d      	b.n	8022954 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8022938:	687b      	ldr	r3, [r7, #4]
 802293a:	2220      	movs	r2, #32
 802293c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 802293e:	687b      	ldr	r3, [r7, #4]
 8022940:	2220      	movs	r2, #32
 8022942:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022944:	687b      	ldr	r3, [r7, #4]
 8022946:	2200      	movs	r2, #0
 8022948:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 802294a:	687b      	ldr	r3, [r7, #4]
 802294c:	2274      	movs	r2, #116	; 0x74
 802294e:	2100      	movs	r1, #0
 8022950:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8022952:	2300      	movs	r3, #0
}
 8022954:	0018      	movs	r0, r3
 8022956:	46bd      	mov	sp, r7
 8022958:	b004      	add	sp, #16
 802295a:	bd80      	pop	{r7, pc}
 802295c:	01ffffff 	.word	0x01ffffff

08022960 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8022960:	b580      	push	{r7, lr}
 8022962:	b094      	sub	sp, #80	; 0x50
 8022964:	af00      	add	r7, sp, #0
 8022966:	60f8      	str	r0, [r7, #12]
 8022968:	60b9      	str	r1, [r7, #8]
 802296a:	603b      	str	r3, [r7, #0]
 802296c:	1dfb      	adds	r3, r7, #7
 802296e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8022970:	e0a3      	b.n	8022aba <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8022972:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8022974:	3301      	adds	r3, #1
 8022976:	d100      	bne.n	802297a <UART_WaitOnFlagUntilTimeout+0x1a>
 8022978:	e09f      	b.n	8022aba <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802297a:	f7fe f951 	bl	8020c20 <HAL_GetTick>
 802297e:	0002      	movs	r2, r0
 8022980:	683b      	ldr	r3, [r7, #0]
 8022982:	1ad3      	subs	r3, r2, r3
 8022984:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8022986:	429a      	cmp	r2, r3
 8022988:	d302      	bcc.n	8022990 <UART_WaitOnFlagUntilTimeout+0x30>
 802298a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802298c:	2b00      	cmp	r3, #0
 802298e:	d13d      	bne.n	8022a0c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022990:	f3ef 8310 	mrs	r3, PRIMASK
 8022994:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8022996:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8022998:	647b      	str	r3, [r7, #68]	; 0x44
 802299a:	2301      	movs	r3, #1
 802299c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802299e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80229a0:	f383 8810 	msr	PRIMASK, r3
}
 80229a4:	46c0      	nop			; (mov r8, r8)
 80229a6:	68fb      	ldr	r3, [r7, #12]
 80229a8:	681b      	ldr	r3, [r3, #0]
 80229aa:	681a      	ldr	r2, [r3, #0]
 80229ac:	68fb      	ldr	r3, [r7, #12]
 80229ae:	681b      	ldr	r3, [r3, #0]
 80229b0:	494c      	ldr	r1, [pc, #304]	; (8022ae4 <UART_WaitOnFlagUntilTimeout+0x184>)
 80229b2:	400a      	ands	r2, r1
 80229b4:	601a      	str	r2, [r3, #0]
 80229b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80229b8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80229ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80229bc:	f383 8810 	msr	PRIMASK, r3
}
 80229c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80229c2:	f3ef 8310 	mrs	r3, PRIMASK
 80229c6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80229c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80229ca:	643b      	str	r3, [r7, #64]	; 0x40
 80229cc:	2301      	movs	r3, #1
 80229ce:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80229d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80229d2:	f383 8810 	msr	PRIMASK, r3
}
 80229d6:	46c0      	nop			; (mov r8, r8)
 80229d8:	68fb      	ldr	r3, [r7, #12]
 80229da:	681b      	ldr	r3, [r3, #0]
 80229dc:	689a      	ldr	r2, [r3, #8]
 80229de:	68fb      	ldr	r3, [r7, #12]
 80229e0:	681b      	ldr	r3, [r3, #0]
 80229e2:	2101      	movs	r1, #1
 80229e4:	438a      	bics	r2, r1
 80229e6:	609a      	str	r2, [r3, #8]
 80229e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80229ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80229ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80229ee:	f383 8810 	msr	PRIMASK, r3
}
 80229f2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80229f4:	68fb      	ldr	r3, [r7, #12]
 80229f6:	2220      	movs	r2, #32
 80229f8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80229fa:	68fb      	ldr	r3, [r7, #12]
 80229fc:	2220      	movs	r2, #32
 80229fe:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8022a00:	68fb      	ldr	r3, [r7, #12]
 8022a02:	2274      	movs	r2, #116	; 0x74
 8022a04:	2100      	movs	r1, #0
 8022a06:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8022a08:	2303      	movs	r3, #3
 8022a0a:	e067      	b.n	8022adc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8022a0c:	68fb      	ldr	r3, [r7, #12]
 8022a0e:	681b      	ldr	r3, [r3, #0]
 8022a10:	681b      	ldr	r3, [r3, #0]
 8022a12:	2204      	movs	r2, #4
 8022a14:	4013      	ands	r3, r2
 8022a16:	d050      	beq.n	8022aba <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8022a18:	68fb      	ldr	r3, [r7, #12]
 8022a1a:	681b      	ldr	r3, [r3, #0]
 8022a1c:	69da      	ldr	r2, [r3, #28]
 8022a1e:	2380      	movs	r3, #128	; 0x80
 8022a20:	011b      	lsls	r3, r3, #4
 8022a22:	401a      	ands	r2, r3
 8022a24:	2380      	movs	r3, #128	; 0x80
 8022a26:	011b      	lsls	r3, r3, #4
 8022a28:	429a      	cmp	r2, r3
 8022a2a:	d146      	bne.n	8022aba <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8022a2c:	68fb      	ldr	r3, [r7, #12]
 8022a2e:	681b      	ldr	r3, [r3, #0]
 8022a30:	2280      	movs	r2, #128	; 0x80
 8022a32:	0112      	lsls	r2, r2, #4
 8022a34:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022a36:	f3ef 8310 	mrs	r3, PRIMASK
 8022a3a:	613b      	str	r3, [r7, #16]
  return(result);
 8022a3c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8022a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8022a40:	2301      	movs	r3, #1
 8022a42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022a44:	697b      	ldr	r3, [r7, #20]
 8022a46:	f383 8810 	msr	PRIMASK, r3
}
 8022a4a:	46c0      	nop			; (mov r8, r8)
 8022a4c:	68fb      	ldr	r3, [r7, #12]
 8022a4e:	681b      	ldr	r3, [r3, #0]
 8022a50:	681a      	ldr	r2, [r3, #0]
 8022a52:	68fb      	ldr	r3, [r7, #12]
 8022a54:	681b      	ldr	r3, [r3, #0]
 8022a56:	4923      	ldr	r1, [pc, #140]	; (8022ae4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8022a58:	400a      	ands	r2, r1
 8022a5a:	601a      	str	r2, [r3, #0]
 8022a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022a5e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022a60:	69bb      	ldr	r3, [r7, #24]
 8022a62:	f383 8810 	msr	PRIMASK, r3
}
 8022a66:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022a68:	f3ef 8310 	mrs	r3, PRIMASK
 8022a6c:	61fb      	str	r3, [r7, #28]
  return(result);
 8022a6e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8022a70:	64bb      	str	r3, [r7, #72]	; 0x48
 8022a72:	2301      	movs	r3, #1
 8022a74:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022a76:	6a3b      	ldr	r3, [r7, #32]
 8022a78:	f383 8810 	msr	PRIMASK, r3
}
 8022a7c:	46c0      	nop			; (mov r8, r8)
 8022a7e:	68fb      	ldr	r3, [r7, #12]
 8022a80:	681b      	ldr	r3, [r3, #0]
 8022a82:	689a      	ldr	r2, [r3, #8]
 8022a84:	68fb      	ldr	r3, [r7, #12]
 8022a86:	681b      	ldr	r3, [r3, #0]
 8022a88:	2101      	movs	r1, #1
 8022a8a:	438a      	bics	r2, r1
 8022a8c:	609a      	str	r2, [r3, #8]
 8022a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8022a90:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a94:	f383 8810 	msr	PRIMASK, r3
}
 8022a98:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8022a9a:	68fb      	ldr	r3, [r7, #12]
 8022a9c:	2220      	movs	r2, #32
 8022a9e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8022aa0:	68fb      	ldr	r3, [r7, #12]
 8022aa2:	2220      	movs	r2, #32
 8022aa4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8022aa6:	68fb      	ldr	r3, [r7, #12]
 8022aa8:	2280      	movs	r2, #128	; 0x80
 8022aaa:	2120      	movs	r1, #32
 8022aac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8022aae:	68fb      	ldr	r3, [r7, #12]
 8022ab0:	2274      	movs	r2, #116	; 0x74
 8022ab2:	2100      	movs	r1, #0
 8022ab4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8022ab6:	2303      	movs	r3, #3
 8022ab8:	e010      	b.n	8022adc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8022aba:	68fb      	ldr	r3, [r7, #12]
 8022abc:	681b      	ldr	r3, [r3, #0]
 8022abe:	69db      	ldr	r3, [r3, #28]
 8022ac0:	68ba      	ldr	r2, [r7, #8]
 8022ac2:	4013      	ands	r3, r2
 8022ac4:	68ba      	ldr	r2, [r7, #8]
 8022ac6:	1ad3      	subs	r3, r2, r3
 8022ac8:	425a      	negs	r2, r3
 8022aca:	4153      	adcs	r3, r2
 8022acc:	b2db      	uxtb	r3, r3
 8022ace:	001a      	movs	r2, r3
 8022ad0:	1dfb      	adds	r3, r7, #7
 8022ad2:	781b      	ldrb	r3, [r3, #0]
 8022ad4:	429a      	cmp	r2, r3
 8022ad6:	d100      	bne.n	8022ada <UART_WaitOnFlagUntilTimeout+0x17a>
 8022ad8:	e74b      	b.n	8022972 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8022ada:	2300      	movs	r3, #0
}
 8022adc:	0018      	movs	r0, r3
 8022ade:	46bd      	mov	sp, r7
 8022ae0:	b014      	add	sp, #80	; 0x50
 8022ae2:	bd80      	pop	{r7, pc}
 8022ae4:	fffffe5f 	.word	0xfffffe5f

08022ae8 <__errno>:
 8022ae8:	4b01      	ldr	r3, [pc, #4]	; (8022af0 <__errno+0x8>)
 8022aea:	6818      	ldr	r0, [r3, #0]
 8022aec:	4770      	bx	lr
 8022aee:	46c0      	nop			; (mov r8, r8)
 8022af0:	2000000c 	.word	0x2000000c

08022af4 <__libc_init_array>:
 8022af4:	b570      	push	{r4, r5, r6, lr}
 8022af6:	2600      	movs	r6, #0
 8022af8:	4d0c      	ldr	r5, [pc, #48]	; (8022b2c <__libc_init_array+0x38>)
 8022afa:	4c0d      	ldr	r4, [pc, #52]	; (8022b30 <__libc_init_array+0x3c>)
 8022afc:	1b64      	subs	r4, r4, r5
 8022afe:	10a4      	asrs	r4, r4, #2
 8022b00:	42a6      	cmp	r6, r4
 8022b02:	d109      	bne.n	8022b18 <__libc_init_array+0x24>
 8022b04:	2600      	movs	r6, #0
 8022b06:	f000 ffbf 	bl	8023a88 <_init>
 8022b0a:	4d0a      	ldr	r5, [pc, #40]	; (8022b34 <__libc_init_array+0x40>)
 8022b0c:	4c0a      	ldr	r4, [pc, #40]	; (8022b38 <__libc_init_array+0x44>)
 8022b0e:	1b64      	subs	r4, r4, r5
 8022b10:	10a4      	asrs	r4, r4, #2
 8022b12:	42a6      	cmp	r6, r4
 8022b14:	d105      	bne.n	8022b22 <__libc_init_array+0x2e>
 8022b16:	bd70      	pop	{r4, r5, r6, pc}
 8022b18:	00b3      	lsls	r3, r6, #2
 8022b1a:	58eb      	ldr	r3, [r5, r3]
 8022b1c:	4798      	blx	r3
 8022b1e:	3601      	adds	r6, #1
 8022b20:	e7ee      	b.n	8022b00 <__libc_init_array+0xc>
 8022b22:	00b3      	lsls	r3, r6, #2
 8022b24:	58eb      	ldr	r3, [r5, r3]
 8022b26:	4798      	blx	r3
 8022b28:	3601      	adds	r6, #1
 8022b2a:	e7f2      	b.n	8022b12 <__libc_init_array+0x1e>
 8022b2c:	08023bd4 	.word	0x08023bd4
 8022b30:	08023bd4 	.word	0x08023bd4
 8022b34:	08023bd4 	.word	0x08023bd4
 8022b38:	08023bd8 	.word	0x08023bd8

08022b3c <memset>:
 8022b3c:	0003      	movs	r3, r0
 8022b3e:	1882      	adds	r2, r0, r2
 8022b40:	4293      	cmp	r3, r2
 8022b42:	d100      	bne.n	8022b46 <memset+0xa>
 8022b44:	4770      	bx	lr
 8022b46:	7019      	strb	r1, [r3, #0]
 8022b48:	3301      	adds	r3, #1
 8022b4a:	e7f9      	b.n	8022b40 <memset+0x4>

08022b4c <iprintf>:
 8022b4c:	b40f      	push	{r0, r1, r2, r3}
 8022b4e:	4b0b      	ldr	r3, [pc, #44]	; (8022b7c <iprintf+0x30>)
 8022b50:	b513      	push	{r0, r1, r4, lr}
 8022b52:	681c      	ldr	r4, [r3, #0]
 8022b54:	2c00      	cmp	r4, #0
 8022b56:	d005      	beq.n	8022b64 <iprintf+0x18>
 8022b58:	69a3      	ldr	r3, [r4, #24]
 8022b5a:	2b00      	cmp	r3, #0
 8022b5c:	d102      	bne.n	8022b64 <iprintf+0x18>
 8022b5e:	0020      	movs	r0, r4
 8022b60:	f000 f870 	bl	8022c44 <__sinit>
 8022b64:	ab05      	add	r3, sp, #20
 8022b66:	0020      	movs	r0, r4
 8022b68:	9a04      	ldr	r2, [sp, #16]
 8022b6a:	68a1      	ldr	r1, [r4, #8]
 8022b6c:	9301      	str	r3, [sp, #4]
 8022b6e:	f000 f993 	bl	8022e98 <_vfiprintf_r>
 8022b72:	bc16      	pop	{r1, r2, r4}
 8022b74:	bc08      	pop	{r3}
 8022b76:	b004      	add	sp, #16
 8022b78:	4718      	bx	r3
 8022b7a:	46c0      	nop			; (mov r8, r8)
 8022b7c:	2000000c 	.word	0x2000000c

08022b80 <std>:
 8022b80:	2300      	movs	r3, #0
 8022b82:	b510      	push	{r4, lr}
 8022b84:	0004      	movs	r4, r0
 8022b86:	6003      	str	r3, [r0, #0]
 8022b88:	6043      	str	r3, [r0, #4]
 8022b8a:	6083      	str	r3, [r0, #8]
 8022b8c:	8181      	strh	r1, [r0, #12]
 8022b8e:	6643      	str	r3, [r0, #100]	; 0x64
 8022b90:	0019      	movs	r1, r3
 8022b92:	81c2      	strh	r2, [r0, #14]
 8022b94:	6103      	str	r3, [r0, #16]
 8022b96:	6143      	str	r3, [r0, #20]
 8022b98:	6183      	str	r3, [r0, #24]
 8022b9a:	2208      	movs	r2, #8
 8022b9c:	305c      	adds	r0, #92	; 0x5c
 8022b9e:	f7ff ffcd 	bl	8022b3c <memset>
 8022ba2:	4b05      	ldr	r3, [pc, #20]	; (8022bb8 <std+0x38>)
 8022ba4:	6263      	str	r3, [r4, #36]	; 0x24
 8022ba6:	4b05      	ldr	r3, [pc, #20]	; (8022bbc <std+0x3c>)
 8022ba8:	6224      	str	r4, [r4, #32]
 8022baa:	62a3      	str	r3, [r4, #40]	; 0x28
 8022bac:	4b04      	ldr	r3, [pc, #16]	; (8022bc0 <std+0x40>)
 8022bae:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022bb0:	4b04      	ldr	r3, [pc, #16]	; (8022bc4 <std+0x44>)
 8022bb2:	6323      	str	r3, [r4, #48]	; 0x30
 8022bb4:	bd10      	pop	{r4, pc}
 8022bb6:	46c0      	nop			; (mov r8, r8)
 8022bb8:	08023435 	.word	0x08023435
 8022bbc:	0802345d 	.word	0x0802345d
 8022bc0:	08023495 	.word	0x08023495
 8022bc4:	080234c1 	.word	0x080234c1

08022bc8 <_cleanup_r>:
 8022bc8:	b510      	push	{r4, lr}
 8022bca:	4902      	ldr	r1, [pc, #8]	; (8022bd4 <_cleanup_r+0xc>)
 8022bcc:	f000 f8ba 	bl	8022d44 <_fwalk_reent>
 8022bd0:	bd10      	pop	{r4, pc}
 8022bd2:	46c0      	nop			; (mov r8, r8)
 8022bd4:	080237cd 	.word	0x080237cd

08022bd8 <__sfmoreglue>:
 8022bd8:	b570      	push	{r4, r5, r6, lr}
 8022bda:	2568      	movs	r5, #104	; 0x68
 8022bdc:	1e4a      	subs	r2, r1, #1
 8022bde:	4355      	muls	r5, r2
 8022be0:	000e      	movs	r6, r1
 8022be2:	0029      	movs	r1, r5
 8022be4:	3174      	adds	r1, #116	; 0x74
 8022be6:	f000 f8d1 	bl	8022d8c <_malloc_r>
 8022bea:	1e04      	subs	r4, r0, #0
 8022bec:	d008      	beq.n	8022c00 <__sfmoreglue+0x28>
 8022bee:	2100      	movs	r1, #0
 8022bf0:	002a      	movs	r2, r5
 8022bf2:	6001      	str	r1, [r0, #0]
 8022bf4:	6046      	str	r6, [r0, #4]
 8022bf6:	300c      	adds	r0, #12
 8022bf8:	60a0      	str	r0, [r4, #8]
 8022bfa:	3268      	adds	r2, #104	; 0x68
 8022bfc:	f7ff ff9e 	bl	8022b3c <memset>
 8022c00:	0020      	movs	r0, r4
 8022c02:	bd70      	pop	{r4, r5, r6, pc}

08022c04 <__sfp_lock_acquire>:
 8022c04:	b510      	push	{r4, lr}
 8022c06:	4802      	ldr	r0, [pc, #8]	; (8022c10 <__sfp_lock_acquire+0xc>)
 8022c08:	f000 f8bd 	bl	8022d86 <__retarget_lock_acquire_recursive>
 8022c0c:	bd10      	pop	{r4, pc}
 8022c0e:	46c0      	nop			; (mov r8, r8)
 8022c10:	20000230 	.word	0x20000230

08022c14 <__sfp_lock_release>:
 8022c14:	b510      	push	{r4, lr}
 8022c16:	4802      	ldr	r0, [pc, #8]	; (8022c20 <__sfp_lock_release+0xc>)
 8022c18:	f000 f8b6 	bl	8022d88 <__retarget_lock_release_recursive>
 8022c1c:	bd10      	pop	{r4, pc}
 8022c1e:	46c0      	nop			; (mov r8, r8)
 8022c20:	20000230 	.word	0x20000230

08022c24 <__sinit_lock_acquire>:
 8022c24:	b510      	push	{r4, lr}
 8022c26:	4802      	ldr	r0, [pc, #8]	; (8022c30 <__sinit_lock_acquire+0xc>)
 8022c28:	f000 f8ad 	bl	8022d86 <__retarget_lock_acquire_recursive>
 8022c2c:	bd10      	pop	{r4, pc}
 8022c2e:	46c0      	nop			; (mov r8, r8)
 8022c30:	2000022b 	.word	0x2000022b

08022c34 <__sinit_lock_release>:
 8022c34:	b510      	push	{r4, lr}
 8022c36:	4802      	ldr	r0, [pc, #8]	; (8022c40 <__sinit_lock_release+0xc>)
 8022c38:	f000 f8a6 	bl	8022d88 <__retarget_lock_release_recursive>
 8022c3c:	bd10      	pop	{r4, pc}
 8022c3e:	46c0      	nop			; (mov r8, r8)
 8022c40:	2000022b 	.word	0x2000022b

08022c44 <__sinit>:
 8022c44:	b513      	push	{r0, r1, r4, lr}
 8022c46:	0004      	movs	r4, r0
 8022c48:	f7ff ffec 	bl	8022c24 <__sinit_lock_acquire>
 8022c4c:	69a3      	ldr	r3, [r4, #24]
 8022c4e:	2b00      	cmp	r3, #0
 8022c50:	d002      	beq.n	8022c58 <__sinit+0x14>
 8022c52:	f7ff ffef 	bl	8022c34 <__sinit_lock_release>
 8022c56:	bd13      	pop	{r0, r1, r4, pc}
 8022c58:	64a3      	str	r3, [r4, #72]	; 0x48
 8022c5a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8022c5c:	6523      	str	r3, [r4, #80]	; 0x50
 8022c5e:	4b13      	ldr	r3, [pc, #76]	; (8022cac <__sinit+0x68>)
 8022c60:	4a13      	ldr	r2, [pc, #76]	; (8022cb0 <__sinit+0x6c>)
 8022c62:	681b      	ldr	r3, [r3, #0]
 8022c64:	62a2      	str	r2, [r4, #40]	; 0x28
 8022c66:	9301      	str	r3, [sp, #4]
 8022c68:	42a3      	cmp	r3, r4
 8022c6a:	d101      	bne.n	8022c70 <__sinit+0x2c>
 8022c6c:	2301      	movs	r3, #1
 8022c6e:	61a3      	str	r3, [r4, #24]
 8022c70:	0020      	movs	r0, r4
 8022c72:	f000 f81f 	bl	8022cb4 <__sfp>
 8022c76:	6060      	str	r0, [r4, #4]
 8022c78:	0020      	movs	r0, r4
 8022c7a:	f000 f81b 	bl	8022cb4 <__sfp>
 8022c7e:	60a0      	str	r0, [r4, #8]
 8022c80:	0020      	movs	r0, r4
 8022c82:	f000 f817 	bl	8022cb4 <__sfp>
 8022c86:	2200      	movs	r2, #0
 8022c88:	2104      	movs	r1, #4
 8022c8a:	60e0      	str	r0, [r4, #12]
 8022c8c:	6860      	ldr	r0, [r4, #4]
 8022c8e:	f7ff ff77 	bl	8022b80 <std>
 8022c92:	2201      	movs	r2, #1
 8022c94:	2109      	movs	r1, #9
 8022c96:	68a0      	ldr	r0, [r4, #8]
 8022c98:	f7ff ff72 	bl	8022b80 <std>
 8022c9c:	2202      	movs	r2, #2
 8022c9e:	2112      	movs	r1, #18
 8022ca0:	68e0      	ldr	r0, [r4, #12]
 8022ca2:	f7ff ff6d 	bl	8022b80 <std>
 8022ca6:	2301      	movs	r3, #1
 8022ca8:	61a3      	str	r3, [r4, #24]
 8022caa:	e7d2      	b.n	8022c52 <__sinit+0xe>
 8022cac:	08023b34 	.word	0x08023b34
 8022cb0:	08022bc9 	.word	0x08022bc9

08022cb4 <__sfp>:
 8022cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022cb6:	0007      	movs	r7, r0
 8022cb8:	f7ff ffa4 	bl	8022c04 <__sfp_lock_acquire>
 8022cbc:	4b1f      	ldr	r3, [pc, #124]	; (8022d3c <__sfp+0x88>)
 8022cbe:	681e      	ldr	r6, [r3, #0]
 8022cc0:	69b3      	ldr	r3, [r6, #24]
 8022cc2:	2b00      	cmp	r3, #0
 8022cc4:	d102      	bne.n	8022ccc <__sfp+0x18>
 8022cc6:	0030      	movs	r0, r6
 8022cc8:	f7ff ffbc 	bl	8022c44 <__sinit>
 8022ccc:	3648      	adds	r6, #72	; 0x48
 8022cce:	68b4      	ldr	r4, [r6, #8]
 8022cd0:	6873      	ldr	r3, [r6, #4]
 8022cd2:	3b01      	subs	r3, #1
 8022cd4:	d504      	bpl.n	8022ce0 <__sfp+0x2c>
 8022cd6:	6833      	ldr	r3, [r6, #0]
 8022cd8:	2b00      	cmp	r3, #0
 8022cda:	d022      	beq.n	8022d22 <__sfp+0x6e>
 8022cdc:	6836      	ldr	r6, [r6, #0]
 8022cde:	e7f6      	b.n	8022cce <__sfp+0x1a>
 8022ce0:	220c      	movs	r2, #12
 8022ce2:	5ea5      	ldrsh	r5, [r4, r2]
 8022ce4:	2d00      	cmp	r5, #0
 8022ce6:	d11a      	bne.n	8022d1e <__sfp+0x6a>
 8022ce8:	0020      	movs	r0, r4
 8022cea:	4b15      	ldr	r3, [pc, #84]	; (8022d40 <__sfp+0x8c>)
 8022cec:	3058      	adds	r0, #88	; 0x58
 8022cee:	60e3      	str	r3, [r4, #12]
 8022cf0:	6665      	str	r5, [r4, #100]	; 0x64
 8022cf2:	f000 f847 	bl	8022d84 <__retarget_lock_init_recursive>
 8022cf6:	f7ff ff8d 	bl	8022c14 <__sfp_lock_release>
 8022cfa:	0020      	movs	r0, r4
 8022cfc:	2208      	movs	r2, #8
 8022cfe:	0029      	movs	r1, r5
 8022d00:	6025      	str	r5, [r4, #0]
 8022d02:	60a5      	str	r5, [r4, #8]
 8022d04:	6065      	str	r5, [r4, #4]
 8022d06:	6125      	str	r5, [r4, #16]
 8022d08:	6165      	str	r5, [r4, #20]
 8022d0a:	61a5      	str	r5, [r4, #24]
 8022d0c:	305c      	adds	r0, #92	; 0x5c
 8022d0e:	f7ff ff15 	bl	8022b3c <memset>
 8022d12:	6365      	str	r5, [r4, #52]	; 0x34
 8022d14:	63a5      	str	r5, [r4, #56]	; 0x38
 8022d16:	64a5      	str	r5, [r4, #72]	; 0x48
 8022d18:	64e5      	str	r5, [r4, #76]	; 0x4c
 8022d1a:	0020      	movs	r0, r4
 8022d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022d1e:	3468      	adds	r4, #104	; 0x68
 8022d20:	e7d7      	b.n	8022cd2 <__sfp+0x1e>
 8022d22:	2104      	movs	r1, #4
 8022d24:	0038      	movs	r0, r7
 8022d26:	f7ff ff57 	bl	8022bd8 <__sfmoreglue>
 8022d2a:	1e04      	subs	r4, r0, #0
 8022d2c:	6030      	str	r0, [r6, #0]
 8022d2e:	d1d5      	bne.n	8022cdc <__sfp+0x28>
 8022d30:	f7ff ff70 	bl	8022c14 <__sfp_lock_release>
 8022d34:	230c      	movs	r3, #12
 8022d36:	603b      	str	r3, [r7, #0]
 8022d38:	e7ef      	b.n	8022d1a <__sfp+0x66>
 8022d3a:	46c0      	nop			; (mov r8, r8)
 8022d3c:	08023b34 	.word	0x08023b34
 8022d40:	ffff0001 	.word	0xffff0001

08022d44 <_fwalk_reent>:
 8022d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022d46:	0004      	movs	r4, r0
 8022d48:	0006      	movs	r6, r0
 8022d4a:	2700      	movs	r7, #0
 8022d4c:	9101      	str	r1, [sp, #4]
 8022d4e:	3448      	adds	r4, #72	; 0x48
 8022d50:	6863      	ldr	r3, [r4, #4]
 8022d52:	68a5      	ldr	r5, [r4, #8]
 8022d54:	9300      	str	r3, [sp, #0]
 8022d56:	9b00      	ldr	r3, [sp, #0]
 8022d58:	3b01      	subs	r3, #1
 8022d5a:	9300      	str	r3, [sp, #0]
 8022d5c:	d504      	bpl.n	8022d68 <_fwalk_reent+0x24>
 8022d5e:	6824      	ldr	r4, [r4, #0]
 8022d60:	2c00      	cmp	r4, #0
 8022d62:	d1f5      	bne.n	8022d50 <_fwalk_reent+0xc>
 8022d64:	0038      	movs	r0, r7
 8022d66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022d68:	89ab      	ldrh	r3, [r5, #12]
 8022d6a:	2b01      	cmp	r3, #1
 8022d6c:	d908      	bls.n	8022d80 <_fwalk_reent+0x3c>
 8022d6e:	220e      	movs	r2, #14
 8022d70:	5eab      	ldrsh	r3, [r5, r2]
 8022d72:	3301      	adds	r3, #1
 8022d74:	d004      	beq.n	8022d80 <_fwalk_reent+0x3c>
 8022d76:	0029      	movs	r1, r5
 8022d78:	0030      	movs	r0, r6
 8022d7a:	9b01      	ldr	r3, [sp, #4]
 8022d7c:	4798      	blx	r3
 8022d7e:	4307      	orrs	r7, r0
 8022d80:	3568      	adds	r5, #104	; 0x68
 8022d82:	e7e8      	b.n	8022d56 <_fwalk_reent+0x12>

08022d84 <__retarget_lock_init_recursive>:
 8022d84:	4770      	bx	lr

08022d86 <__retarget_lock_acquire_recursive>:
 8022d86:	4770      	bx	lr

08022d88 <__retarget_lock_release_recursive>:
 8022d88:	4770      	bx	lr
	...

08022d8c <_malloc_r>:
 8022d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022d8e:	2303      	movs	r3, #3
 8022d90:	1ccd      	adds	r5, r1, #3
 8022d92:	439d      	bics	r5, r3
 8022d94:	3508      	adds	r5, #8
 8022d96:	0006      	movs	r6, r0
 8022d98:	2d0c      	cmp	r5, #12
 8022d9a:	d21f      	bcs.n	8022ddc <_malloc_r+0x50>
 8022d9c:	250c      	movs	r5, #12
 8022d9e:	42a9      	cmp	r1, r5
 8022da0:	d81e      	bhi.n	8022de0 <_malloc_r+0x54>
 8022da2:	0030      	movs	r0, r6
 8022da4:	f000 fdde 	bl	8023964 <__malloc_lock>
 8022da8:	4925      	ldr	r1, [pc, #148]	; (8022e40 <_malloc_r+0xb4>)
 8022daa:	680a      	ldr	r2, [r1, #0]
 8022dac:	0014      	movs	r4, r2
 8022dae:	2c00      	cmp	r4, #0
 8022db0:	d11a      	bne.n	8022de8 <_malloc_r+0x5c>
 8022db2:	4f24      	ldr	r7, [pc, #144]	; (8022e44 <_malloc_r+0xb8>)
 8022db4:	683b      	ldr	r3, [r7, #0]
 8022db6:	2b00      	cmp	r3, #0
 8022db8:	d104      	bne.n	8022dc4 <_malloc_r+0x38>
 8022dba:	0021      	movs	r1, r4
 8022dbc:	0030      	movs	r0, r6
 8022dbe:	f000 fb27 	bl	8023410 <_sbrk_r>
 8022dc2:	6038      	str	r0, [r7, #0]
 8022dc4:	0029      	movs	r1, r5
 8022dc6:	0030      	movs	r0, r6
 8022dc8:	f000 fb22 	bl	8023410 <_sbrk_r>
 8022dcc:	1c43      	adds	r3, r0, #1
 8022dce:	d12b      	bne.n	8022e28 <_malloc_r+0x9c>
 8022dd0:	230c      	movs	r3, #12
 8022dd2:	0030      	movs	r0, r6
 8022dd4:	6033      	str	r3, [r6, #0]
 8022dd6:	f000 fdcd 	bl	8023974 <__malloc_unlock>
 8022dda:	e003      	b.n	8022de4 <_malloc_r+0x58>
 8022ddc:	2d00      	cmp	r5, #0
 8022dde:	dade      	bge.n	8022d9e <_malloc_r+0x12>
 8022de0:	230c      	movs	r3, #12
 8022de2:	6033      	str	r3, [r6, #0]
 8022de4:	2000      	movs	r0, #0
 8022de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022de8:	6823      	ldr	r3, [r4, #0]
 8022dea:	1b5b      	subs	r3, r3, r5
 8022dec:	d419      	bmi.n	8022e22 <_malloc_r+0x96>
 8022dee:	2b0b      	cmp	r3, #11
 8022df0:	d903      	bls.n	8022dfa <_malloc_r+0x6e>
 8022df2:	6023      	str	r3, [r4, #0]
 8022df4:	18e4      	adds	r4, r4, r3
 8022df6:	6025      	str	r5, [r4, #0]
 8022df8:	e003      	b.n	8022e02 <_malloc_r+0x76>
 8022dfa:	6863      	ldr	r3, [r4, #4]
 8022dfc:	42a2      	cmp	r2, r4
 8022dfe:	d10e      	bne.n	8022e1e <_malloc_r+0x92>
 8022e00:	600b      	str	r3, [r1, #0]
 8022e02:	0030      	movs	r0, r6
 8022e04:	f000 fdb6 	bl	8023974 <__malloc_unlock>
 8022e08:	0020      	movs	r0, r4
 8022e0a:	2207      	movs	r2, #7
 8022e0c:	300b      	adds	r0, #11
 8022e0e:	1d23      	adds	r3, r4, #4
 8022e10:	4390      	bics	r0, r2
 8022e12:	1ac2      	subs	r2, r0, r3
 8022e14:	4298      	cmp	r0, r3
 8022e16:	d0e6      	beq.n	8022de6 <_malloc_r+0x5a>
 8022e18:	1a1b      	subs	r3, r3, r0
 8022e1a:	50a3      	str	r3, [r4, r2]
 8022e1c:	e7e3      	b.n	8022de6 <_malloc_r+0x5a>
 8022e1e:	6053      	str	r3, [r2, #4]
 8022e20:	e7ef      	b.n	8022e02 <_malloc_r+0x76>
 8022e22:	0022      	movs	r2, r4
 8022e24:	6864      	ldr	r4, [r4, #4]
 8022e26:	e7c2      	b.n	8022dae <_malloc_r+0x22>
 8022e28:	2303      	movs	r3, #3
 8022e2a:	1cc4      	adds	r4, r0, #3
 8022e2c:	439c      	bics	r4, r3
 8022e2e:	42a0      	cmp	r0, r4
 8022e30:	d0e1      	beq.n	8022df6 <_malloc_r+0x6a>
 8022e32:	1a21      	subs	r1, r4, r0
 8022e34:	0030      	movs	r0, r6
 8022e36:	f000 faeb 	bl	8023410 <_sbrk_r>
 8022e3a:	1c43      	adds	r3, r0, #1
 8022e3c:	d1db      	bne.n	8022df6 <_malloc_r+0x6a>
 8022e3e:	e7c7      	b.n	8022dd0 <_malloc_r+0x44>
 8022e40:	20000090 	.word	0x20000090
 8022e44:	20000094 	.word	0x20000094

08022e48 <__sfputc_r>:
 8022e48:	6893      	ldr	r3, [r2, #8]
 8022e4a:	b510      	push	{r4, lr}
 8022e4c:	3b01      	subs	r3, #1
 8022e4e:	6093      	str	r3, [r2, #8]
 8022e50:	2b00      	cmp	r3, #0
 8022e52:	da04      	bge.n	8022e5e <__sfputc_r+0x16>
 8022e54:	6994      	ldr	r4, [r2, #24]
 8022e56:	42a3      	cmp	r3, r4
 8022e58:	db07      	blt.n	8022e6a <__sfputc_r+0x22>
 8022e5a:	290a      	cmp	r1, #10
 8022e5c:	d005      	beq.n	8022e6a <__sfputc_r+0x22>
 8022e5e:	6813      	ldr	r3, [r2, #0]
 8022e60:	1c58      	adds	r0, r3, #1
 8022e62:	6010      	str	r0, [r2, #0]
 8022e64:	7019      	strb	r1, [r3, #0]
 8022e66:	0008      	movs	r0, r1
 8022e68:	bd10      	pop	{r4, pc}
 8022e6a:	f000 fb2f 	bl	80234cc <__swbuf_r>
 8022e6e:	0001      	movs	r1, r0
 8022e70:	e7f9      	b.n	8022e66 <__sfputc_r+0x1e>

08022e72 <__sfputs_r>:
 8022e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022e74:	0006      	movs	r6, r0
 8022e76:	000f      	movs	r7, r1
 8022e78:	0014      	movs	r4, r2
 8022e7a:	18d5      	adds	r5, r2, r3
 8022e7c:	42ac      	cmp	r4, r5
 8022e7e:	d101      	bne.n	8022e84 <__sfputs_r+0x12>
 8022e80:	2000      	movs	r0, #0
 8022e82:	e007      	b.n	8022e94 <__sfputs_r+0x22>
 8022e84:	7821      	ldrb	r1, [r4, #0]
 8022e86:	003a      	movs	r2, r7
 8022e88:	0030      	movs	r0, r6
 8022e8a:	f7ff ffdd 	bl	8022e48 <__sfputc_r>
 8022e8e:	3401      	adds	r4, #1
 8022e90:	1c43      	adds	r3, r0, #1
 8022e92:	d1f3      	bne.n	8022e7c <__sfputs_r+0xa>
 8022e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022e98 <_vfiprintf_r>:
 8022e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022e9a:	b0a1      	sub	sp, #132	; 0x84
 8022e9c:	0006      	movs	r6, r0
 8022e9e:	000c      	movs	r4, r1
 8022ea0:	001f      	movs	r7, r3
 8022ea2:	9203      	str	r2, [sp, #12]
 8022ea4:	2800      	cmp	r0, #0
 8022ea6:	d004      	beq.n	8022eb2 <_vfiprintf_r+0x1a>
 8022ea8:	6983      	ldr	r3, [r0, #24]
 8022eaa:	2b00      	cmp	r3, #0
 8022eac:	d101      	bne.n	8022eb2 <_vfiprintf_r+0x1a>
 8022eae:	f7ff fec9 	bl	8022c44 <__sinit>
 8022eb2:	4b8e      	ldr	r3, [pc, #568]	; (80230ec <_vfiprintf_r+0x254>)
 8022eb4:	429c      	cmp	r4, r3
 8022eb6:	d11c      	bne.n	8022ef2 <_vfiprintf_r+0x5a>
 8022eb8:	6874      	ldr	r4, [r6, #4]
 8022eba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022ebc:	07db      	lsls	r3, r3, #31
 8022ebe:	d405      	bmi.n	8022ecc <_vfiprintf_r+0x34>
 8022ec0:	89a3      	ldrh	r3, [r4, #12]
 8022ec2:	059b      	lsls	r3, r3, #22
 8022ec4:	d402      	bmi.n	8022ecc <_vfiprintf_r+0x34>
 8022ec6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022ec8:	f7ff ff5d 	bl	8022d86 <__retarget_lock_acquire_recursive>
 8022ecc:	89a3      	ldrh	r3, [r4, #12]
 8022ece:	071b      	lsls	r3, r3, #28
 8022ed0:	d502      	bpl.n	8022ed8 <_vfiprintf_r+0x40>
 8022ed2:	6923      	ldr	r3, [r4, #16]
 8022ed4:	2b00      	cmp	r3, #0
 8022ed6:	d11d      	bne.n	8022f14 <_vfiprintf_r+0x7c>
 8022ed8:	0021      	movs	r1, r4
 8022eda:	0030      	movs	r0, r6
 8022edc:	f000 fb60 	bl	80235a0 <__swsetup_r>
 8022ee0:	2800      	cmp	r0, #0
 8022ee2:	d017      	beq.n	8022f14 <_vfiprintf_r+0x7c>
 8022ee4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022ee6:	07db      	lsls	r3, r3, #31
 8022ee8:	d50d      	bpl.n	8022f06 <_vfiprintf_r+0x6e>
 8022eea:	2001      	movs	r0, #1
 8022eec:	4240      	negs	r0, r0
 8022eee:	b021      	add	sp, #132	; 0x84
 8022ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022ef2:	4b7f      	ldr	r3, [pc, #508]	; (80230f0 <_vfiprintf_r+0x258>)
 8022ef4:	429c      	cmp	r4, r3
 8022ef6:	d101      	bne.n	8022efc <_vfiprintf_r+0x64>
 8022ef8:	68b4      	ldr	r4, [r6, #8]
 8022efa:	e7de      	b.n	8022eba <_vfiprintf_r+0x22>
 8022efc:	4b7d      	ldr	r3, [pc, #500]	; (80230f4 <_vfiprintf_r+0x25c>)
 8022efe:	429c      	cmp	r4, r3
 8022f00:	d1db      	bne.n	8022eba <_vfiprintf_r+0x22>
 8022f02:	68f4      	ldr	r4, [r6, #12]
 8022f04:	e7d9      	b.n	8022eba <_vfiprintf_r+0x22>
 8022f06:	89a3      	ldrh	r3, [r4, #12]
 8022f08:	059b      	lsls	r3, r3, #22
 8022f0a:	d4ee      	bmi.n	8022eea <_vfiprintf_r+0x52>
 8022f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022f0e:	f7ff ff3b 	bl	8022d88 <__retarget_lock_release_recursive>
 8022f12:	e7ea      	b.n	8022eea <_vfiprintf_r+0x52>
 8022f14:	2300      	movs	r3, #0
 8022f16:	ad08      	add	r5, sp, #32
 8022f18:	616b      	str	r3, [r5, #20]
 8022f1a:	3320      	adds	r3, #32
 8022f1c:	766b      	strb	r3, [r5, #25]
 8022f1e:	3310      	adds	r3, #16
 8022f20:	76ab      	strb	r3, [r5, #26]
 8022f22:	9707      	str	r7, [sp, #28]
 8022f24:	9f03      	ldr	r7, [sp, #12]
 8022f26:	783b      	ldrb	r3, [r7, #0]
 8022f28:	2b00      	cmp	r3, #0
 8022f2a:	d001      	beq.n	8022f30 <_vfiprintf_r+0x98>
 8022f2c:	2b25      	cmp	r3, #37	; 0x25
 8022f2e:	d14e      	bne.n	8022fce <_vfiprintf_r+0x136>
 8022f30:	9b03      	ldr	r3, [sp, #12]
 8022f32:	1afb      	subs	r3, r7, r3
 8022f34:	9305      	str	r3, [sp, #20]
 8022f36:	9b03      	ldr	r3, [sp, #12]
 8022f38:	429f      	cmp	r7, r3
 8022f3a:	d00d      	beq.n	8022f58 <_vfiprintf_r+0xc0>
 8022f3c:	9b05      	ldr	r3, [sp, #20]
 8022f3e:	0021      	movs	r1, r4
 8022f40:	0030      	movs	r0, r6
 8022f42:	9a03      	ldr	r2, [sp, #12]
 8022f44:	f7ff ff95 	bl	8022e72 <__sfputs_r>
 8022f48:	1c43      	adds	r3, r0, #1
 8022f4a:	d100      	bne.n	8022f4e <_vfiprintf_r+0xb6>
 8022f4c:	e0b5      	b.n	80230ba <_vfiprintf_r+0x222>
 8022f4e:	696a      	ldr	r2, [r5, #20]
 8022f50:	9b05      	ldr	r3, [sp, #20]
 8022f52:	4694      	mov	ip, r2
 8022f54:	4463      	add	r3, ip
 8022f56:	616b      	str	r3, [r5, #20]
 8022f58:	783b      	ldrb	r3, [r7, #0]
 8022f5a:	2b00      	cmp	r3, #0
 8022f5c:	d100      	bne.n	8022f60 <_vfiprintf_r+0xc8>
 8022f5e:	e0ac      	b.n	80230ba <_vfiprintf_r+0x222>
 8022f60:	2201      	movs	r2, #1
 8022f62:	1c7b      	adds	r3, r7, #1
 8022f64:	9303      	str	r3, [sp, #12]
 8022f66:	2300      	movs	r3, #0
 8022f68:	4252      	negs	r2, r2
 8022f6a:	606a      	str	r2, [r5, #4]
 8022f6c:	a904      	add	r1, sp, #16
 8022f6e:	3254      	adds	r2, #84	; 0x54
 8022f70:	1852      	adds	r2, r2, r1
 8022f72:	602b      	str	r3, [r5, #0]
 8022f74:	60eb      	str	r3, [r5, #12]
 8022f76:	60ab      	str	r3, [r5, #8]
 8022f78:	7013      	strb	r3, [r2, #0]
 8022f7a:	65ab      	str	r3, [r5, #88]	; 0x58
 8022f7c:	9b03      	ldr	r3, [sp, #12]
 8022f7e:	2205      	movs	r2, #5
 8022f80:	7819      	ldrb	r1, [r3, #0]
 8022f82:	485d      	ldr	r0, [pc, #372]	; (80230f8 <_vfiprintf_r+0x260>)
 8022f84:	f000 fce2 	bl	802394c <memchr>
 8022f88:	9b03      	ldr	r3, [sp, #12]
 8022f8a:	1c5f      	adds	r7, r3, #1
 8022f8c:	2800      	cmp	r0, #0
 8022f8e:	d120      	bne.n	8022fd2 <_vfiprintf_r+0x13a>
 8022f90:	682a      	ldr	r2, [r5, #0]
 8022f92:	06d3      	lsls	r3, r2, #27
 8022f94:	d504      	bpl.n	8022fa0 <_vfiprintf_r+0x108>
 8022f96:	2353      	movs	r3, #83	; 0x53
 8022f98:	a904      	add	r1, sp, #16
 8022f9a:	185b      	adds	r3, r3, r1
 8022f9c:	2120      	movs	r1, #32
 8022f9e:	7019      	strb	r1, [r3, #0]
 8022fa0:	0713      	lsls	r3, r2, #28
 8022fa2:	d504      	bpl.n	8022fae <_vfiprintf_r+0x116>
 8022fa4:	2353      	movs	r3, #83	; 0x53
 8022fa6:	a904      	add	r1, sp, #16
 8022fa8:	185b      	adds	r3, r3, r1
 8022faa:	212b      	movs	r1, #43	; 0x2b
 8022fac:	7019      	strb	r1, [r3, #0]
 8022fae:	9b03      	ldr	r3, [sp, #12]
 8022fb0:	781b      	ldrb	r3, [r3, #0]
 8022fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8022fb4:	d016      	beq.n	8022fe4 <_vfiprintf_r+0x14c>
 8022fb6:	2100      	movs	r1, #0
 8022fb8:	68eb      	ldr	r3, [r5, #12]
 8022fba:	9f03      	ldr	r7, [sp, #12]
 8022fbc:	783a      	ldrb	r2, [r7, #0]
 8022fbe:	1c78      	adds	r0, r7, #1
 8022fc0:	3a30      	subs	r2, #48	; 0x30
 8022fc2:	4684      	mov	ip, r0
 8022fc4:	2a09      	cmp	r2, #9
 8022fc6:	d94f      	bls.n	8023068 <_vfiprintf_r+0x1d0>
 8022fc8:	2900      	cmp	r1, #0
 8022fca:	d111      	bne.n	8022ff0 <_vfiprintf_r+0x158>
 8022fcc:	e017      	b.n	8022ffe <_vfiprintf_r+0x166>
 8022fce:	3701      	adds	r7, #1
 8022fd0:	e7a9      	b.n	8022f26 <_vfiprintf_r+0x8e>
 8022fd2:	4b49      	ldr	r3, [pc, #292]	; (80230f8 <_vfiprintf_r+0x260>)
 8022fd4:	682a      	ldr	r2, [r5, #0]
 8022fd6:	1ac0      	subs	r0, r0, r3
 8022fd8:	2301      	movs	r3, #1
 8022fda:	4083      	lsls	r3, r0
 8022fdc:	4313      	orrs	r3, r2
 8022fde:	602b      	str	r3, [r5, #0]
 8022fe0:	9703      	str	r7, [sp, #12]
 8022fe2:	e7cb      	b.n	8022f7c <_vfiprintf_r+0xe4>
 8022fe4:	9b07      	ldr	r3, [sp, #28]
 8022fe6:	1d19      	adds	r1, r3, #4
 8022fe8:	681b      	ldr	r3, [r3, #0]
 8022fea:	9107      	str	r1, [sp, #28]
 8022fec:	2b00      	cmp	r3, #0
 8022fee:	db01      	blt.n	8022ff4 <_vfiprintf_r+0x15c>
 8022ff0:	930b      	str	r3, [sp, #44]	; 0x2c
 8022ff2:	e004      	b.n	8022ffe <_vfiprintf_r+0x166>
 8022ff4:	425b      	negs	r3, r3
 8022ff6:	60eb      	str	r3, [r5, #12]
 8022ff8:	2302      	movs	r3, #2
 8022ffa:	4313      	orrs	r3, r2
 8022ffc:	602b      	str	r3, [r5, #0]
 8022ffe:	783b      	ldrb	r3, [r7, #0]
 8023000:	2b2e      	cmp	r3, #46	; 0x2e
 8023002:	d10a      	bne.n	802301a <_vfiprintf_r+0x182>
 8023004:	787b      	ldrb	r3, [r7, #1]
 8023006:	2b2a      	cmp	r3, #42	; 0x2a
 8023008:	d137      	bne.n	802307a <_vfiprintf_r+0x1e2>
 802300a:	9b07      	ldr	r3, [sp, #28]
 802300c:	3702      	adds	r7, #2
 802300e:	1d1a      	adds	r2, r3, #4
 8023010:	681b      	ldr	r3, [r3, #0]
 8023012:	9207      	str	r2, [sp, #28]
 8023014:	2b00      	cmp	r3, #0
 8023016:	db2d      	blt.n	8023074 <_vfiprintf_r+0x1dc>
 8023018:	9309      	str	r3, [sp, #36]	; 0x24
 802301a:	2203      	movs	r2, #3
 802301c:	7839      	ldrb	r1, [r7, #0]
 802301e:	4837      	ldr	r0, [pc, #220]	; (80230fc <_vfiprintf_r+0x264>)
 8023020:	f000 fc94 	bl	802394c <memchr>
 8023024:	2800      	cmp	r0, #0
 8023026:	d007      	beq.n	8023038 <_vfiprintf_r+0x1a0>
 8023028:	4b34      	ldr	r3, [pc, #208]	; (80230fc <_vfiprintf_r+0x264>)
 802302a:	682a      	ldr	r2, [r5, #0]
 802302c:	1ac0      	subs	r0, r0, r3
 802302e:	2340      	movs	r3, #64	; 0x40
 8023030:	4083      	lsls	r3, r0
 8023032:	4313      	orrs	r3, r2
 8023034:	3701      	adds	r7, #1
 8023036:	602b      	str	r3, [r5, #0]
 8023038:	7839      	ldrb	r1, [r7, #0]
 802303a:	1c7b      	adds	r3, r7, #1
 802303c:	2206      	movs	r2, #6
 802303e:	4830      	ldr	r0, [pc, #192]	; (8023100 <_vfiprintf_r+0x268>)
 8023040:	9303      	str	r3, [sp, #12]
 8023042:	7629      	strb	r1, [r5, #24]
 8023044:	f000 fc82 	bl	802394c <memchr>
 8023048:	2800      	cmp	r0, #0
 802304a:	d045      	beq.n	80230d8 <_vfiprintf_r+0x240>
 802304c:	4b2d      	ldr	r3, [pc, #180]	; (8023104 <_vfiprintf_r+0x26c>)
 802304e:	2b00      	cmp	r3, #0
 8023050:	d127      	bne.n	80230a2 <_vfiprintf_r+0x20a>
 8023052:	2207      	movs	r2, #7
 8023054:	9b07      	ldr	r3, [sp, #28]
 8023056:	3307      	adds	r3, #7
 8023058:	4393      	bics	r3, r2
 802305a:	3308      	adds	r3, #8
 802305c:	9307      	str	r3, [sp, #28]
 802305e:	696b      	ldr	r3, [r5, #20]
 8023060:	9a04      	ldr	r2, [sp, #16]
 8023062:	189b      	adds	r3, r3, r2
 8023064:	616b      	str	r3, [r5, #20]
 8023066:	e75d      	b.n	8022f24 <_vfiprintf_r+0x8c>
 8023068:	210a      	movs	r1, #10
 802306a:	434b      	muls	r3, r1
 802306c:	4667      	mov	r7, ip
 802306e:	189b      	adds	r3, r3, r2
 8023070:	3909      	subs	r1, #9
 8023072:	e7a3      	b.n	8022fbc <_vfiprintf_r+0x124>
 8023074:	2301      	movs	r3, #1
 8023076:	425b      	negs	r3, r3
 8023078:	e7ce      	b.n	8023018 <_vfiprintf_r+0x180>
 802307a:	2300      	movs	r3, #0
 802307c:	001a      	movs	r2, r3
 802307e:	3701      	adds	r7, #1
 8023080:	606b      	str	r3, [r5, #4]
 8023082:	7839      	ldrb	r1, [r7, #0]
 8023084:	1c78      	adds	r0, r7, #1
 8023086:	3930      	subs	r1, #48	; 0x30
 8023088:	4684      	mov	ip, r0
 802308a:	2909      	cmp	r1, #9
 802308c:	d903      	bls.n	8023096 <_vfiprintf_r+0x1fe>
 802308e:	2b00      	cmp	r3, #0
 8023090:	d0c3      	beq.n	802301a <_vfiprintf_r+0x182>
 8023092:	9209      	str	r2, [sp, #36]	; 0x24
 8023094:	e7c1      	b.n	802301a <_vfiprintf_r+0x182>
 8023096:	230a      	movs	r3, #10
 8023098:	435a      	muls	r2, r3
 802309a:	4667      	mov	r7, ip
 802309c:	1852      	adds	r2, r2, r1
 802309e:	3b09      	subs	r3, #9
 80230a0:	e7ef      	b.n	8023082 <_vfiprintf_r+0x1ea>
 80230a2:	ab07      	add	r3, sp, #28
 80230a4:	9300      	str	r3, [sp, #0]
 80230a6:	0022      	movs	r2, r4
 80230a8:	0029      	movs	r1, r5
 80230aa:	0030      	movs	r0, r6
 80230ac:	4b16      	ldr	r3, [pc, #88]	; (8023108 <_vfiprintf_r+0x270>)
 80230ae:	e000      	b.n	80230b2 <_vfiprintf_r+0x21a>
 80230b0:	bf00      	nop
 80230b2:	9004      	str	r0, [sp, #16]
 80230b4:	9b04      	ldr	r3, [sp, #16]
 80230b6:	3301      	adds	r3, #1
 80230b8:	d1d1      	bne.n	802305e <_vfiprintf_r+0x1c6>
 80230ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80230bc:	07db      	lsls	r3, r3, #31
 80230be:	d405      	bmi.n	80230cc <_vfiprintf_r+0x234>
 80230c0:	89a3      	ldrh	r3, [r4, #12]
 80230c2:	059b      	lsls	r3, r3, #22
 80230c4:	d402      	bmi.n	80230cc <_vfiprintf_r+0x234>
 80230c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80230c8:	f7ff fe5e 	bl	8022d88 <__retarget_lock_release_recursive>
 80230cc:	89a3      	ldrh	r3, [r4, #12]
 80230ce:	065b      	lsls	r3, r3, #25
 80230d0:	d500      	bpl.n	80230d4 <_vfiprintf_r+0x23c>
 80230d2:	e70a      	b.n	8022eea <_vfiprintf_r+0x52>
 80230d4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80230d6:	e70a      	b.n	8022eee <_vfiprintf_r+0x56>
 80230d8:	ab07      	add	r3, sp, #28
 80230da:	9300      	str	r3, [sp, #0]
 80230dc:	0022      	movs	r2, r4
 80230de:	0029      	movs	r1, r5
 80230e0:	0030      	movs	r0, r6
 80230e2:	4b09      	ldr	r3, [pc, #36]	; (8023108 <_vfiprintf_r+0x270>)
 80230e4:	f000 f882 	bl	80231ec <_printf_i>
 80230e8:	e7e3      	b.n	80230b2 <_vfiprintf_r+0x21a>
 80230ea:	46c0      	nop			; (mov r8, r8)
 80230ec:	08023b58 	.word	0x08023b58
 80230f0:	08023b78 	.word	0x08023b78
 80230f4:	08023b38 	.word	0x08023b38
 80230f8:	08023b98 	.word	0x08023b98
 80230fc:	08023b9e 	.word	0x08023b9e
 8023100:	08023ba2 	.word	0x08023ba2
 8023104:	00000000 	.word	0x00000000
 8023108:	08022e73 	.word	0x08022e73

0802310c <_printf_common>:
 802310c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802310e:	0015      	movs	r5, r2
 8023110:	9301      	str	r3, [sp, #4]
 8023112:	688a      	ldr	r2, [r1, #8]
 8023114:	690b      	ldr	r3, [r1, #16]
 8023116:	000c      	movs	r4, r1
 8023118:	9000      	str	r0, [sp, #0]
 802311a:	4293      	cmp	r3, r2
 802311c:	da00      	bge.n	8023120 <_printf_common+0x14>
 802311e:	0013      	movs	r3, r2
 8023120:	0022      	movs	r2, r4
 8023122:	602b      	str	r3, [r5, #0]
 8023124:	3243      	adds	r2, #67	; 0x43
 8023126:	7812      	ldrb	r2, [r2, #0]
 8023128:	2a00      	cmp	r2, #0
 802312a:	d001      	beq.n	8023130 <_printf_common+0x24>
 802312c:	3301      	adds	r3, #1
 802312e:	602b      	str	r3, [r5, #0]
 8023130:	6823      	ldr	r3, [r4, #0]
 8023132:	069b      	lsls	r3, r3, #26
 8023134:	d502      	bpl.n	802313c <_printf_common+0x30>
 8023136:	682b      	ldr	r3, [r5, #0]
 8023138:	3302      	adds	r3, #2
 802313a:	602b      	str	r3, [r5, #0]
 802313c:	6822      	ldr	r2, [r4, #0]
 802313e:	2306      	movs	r3, #6
 8023140:	0017      	movs	r7, r2
 8023142:	401f      	ands	r7, r3
 8023144:	421a      	tst	r2, r3
 8023146:	d027      	beq.n	8023198 <_printf_common+0x8c>
 8023148:	0023      	movs	r3, r4
 802314a:	3343      	adds	r3, #67	; 0x43
 802314c:	781b      	ldrb	r3, [r3, #0]
 802314e:	1e5a      	subs	r2, r3, #1
 8023150:	4193      	sbcs	r3, r2
 8023152:	6822      	ldr	r2, [r4, #0]
 8023154:	0692      	lsls	r2, r2, #26
 8023156:	d430      	bmi.n	80231ba <_printf_common+0xae>
 8023158:	0022      	movs	r2, r4
 802315a:	9901      	ldr	r1, [sp, #4]
 802315c:	9800      	ldr	r0, [sp, #0]
 802315e:	9e08      	ldr	r6, [sp, #32]
 8023160:	3243      	adds	r2, #67	; 0x43
 8023162:	47b0      	blx	r6
 8023164:	1c43      	adds	r3, r0, #1
 8023166:	d025      	beq.n	80231b4 <_printf_common+0xa8>
 8023168:	2306      	movs	r3, #6
 802316a:	6820      	ldr	r0, [r4, #0]
 802316c:	682a      	ldr	r2, [r5, #0]
 802316e:	68e1      	ldr	r1, [r4, #12]
 8023170:	2500      	movs	r5, #0
 8023172:	4003      	ands	r3, r0
 8023174:	2b04      	cmp	r3, #4
 8023176:	d103      	bne.n	8023180 <_printf_common+0x74>
 8023178:	1a8d      	subs	r5, r1, r2
 802317a:	43eb      	mvns	r3, r5
 802317c:	17db      	asrs	r3, r3, #31
 802317e:	401d      	ands	r5, r3
 8023180:	68a3      	ldr	r3, [r4, #8]
 8023182:	6922      	ldr	r2, [r4, #16]
 8023184:	4293      	cmp	r3, r2
 8023186:	dd01      	ble.n	802318c <_printf_common+0x80>
 8023188:	1a9b      	subs	r3, r3, r2
 802318a:	18ed      	adds	r5, r5, r3
 802318c:	2700      	movs	r7, #0
 802318e:	42bd      	cmp	r5, r7
 8023190:	d120      	bne.n	80231d4 <_printf_common+0xc8>
 8023192:	2000      	movs	r0, #0
 8023194:	e010      	b.n	80231b8 <_printf_common+0xac>
 8023196:	3701      	adds	r7, #1
 8023198:	68e3      	ldr	r3, [r4, #12]
 802319a:	682a      	ldr	r2, [r5, #0]
 802319c:	1a9b      	subs	r3, r3, r2
 802319e:	42bb      	cmp	r3, r7
 80231a0:	ddd2      	ble.n	8023148 <_printf_common+0x3c>
 80231a2:	0022      	movs	r2, r4
 80231a4:	2301      	movs	r3, #1
 80231a6:	9901      	ldr	r1, [sp, #4]
 80231a8:	9800      	ldr	r0, [sp, #0]
 80231aa:	9e08      	ldr	r6, [sp, #32]
 80231ac:	3219      	adds	r2, #25
 80231ae:	47b0      	blx	r6
 80231b0:	1c43      	adds	r3, r0, #1
 80231b2:	d1f0      	bne.n	8023196 <_printf_common+0x8a>
 80231b4:	2001      	movs	r0, #1
 80231b6:	4240      	negs	r0, r0
 80231b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80231ba:	2030      	movs	r0, #48	; 0x30
 80231bc:	18e1      	adds	r1, r4, r3
 80231be:	3143      	adds	r1, #67	; 0x43
 80231c0:	7008      	strb	r0, [r1, #0]
 80231c2:	0021      	movs	r1, r4
 80231c4:	1c5a      	adds	r2, r3, #1
 80231c6:	3145      	adds	r1, #69	; 0x45
 80231c8:	7809      	ldrb	r1, [r1, #0]
 80231ca:	18a2      	adds	r2, r4, r2
 80231cc:	3243      	adds	r2, #67	; 0x43
 80231ce:	3302      	adds	r3, #2
 80231d0:	7011      	strb	r1, [r2, #0]
 80231d2:	e7c1      	b.n	8023158 <_printf_common+0x4c>
 80231d4:	0022      	movs	r2, r4
 80231d6:	2301      	movs	r3, #1
 80231d8:	9901      	ldr	r1, [sp, #4]
 80231da:	9800      	ldr	r0, [sp, #0]
 80231dc:	9e08      	ldr	r6, [sp, #32]
 80231de:	321a      	adds	r2, #26
 80231e0:	47b0      	blx	r6
 80231e2:	1c43      	adds	r3, r0, #1
 80231e4:	d0e6      	beq.n	80231b4 <_printf_common+0xa8>
 80231e6:	3701      	adds	r7, #1
 80231e8:	e7d1      	b.n	802318e <_printf_common+0x82>
	...

080231ec <_printf_i>:
 80231ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80231ee:	b08b      	sub	sp, #44	; 0x2c
 80231f0:	9206      	str	r2, [sp, #24]
 80231f2:	000a      	movs	r2, r1
 80231f4:	3243      	adds	r2, #67	; 0x43
 80231f6:	9307      	str	r3, [sp, #28]
 80231f8:	9005      	str	r0, [sp, #20]
 80231fa:	9204      	str	r2, [sp, #16]
 80231fc:	7e0a      	ldrb	r2, [r1, #24]
 80231fe:	000c      	movs	r4, r1
 8023200:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023202:	2a78      	cmp	r2, #120	; 0x78
 8023204:	d806      	bhi.n	8023214 <_printf_i+0x28>
 8023206:	2a62      	cmp	r2, #98	; 0x62
 8023208:	d808      	bhi.n	802321c <_printf_i+0x30>
 802320a:	2a00      	cmp	r2, #0
 802320c:	d100      	bne.n	8023210 <_printf_i+0x24>
 802320e:	e0c0      	b.n	8023392 <_printf_i+0x1a6>
 8023210:	2a58      	cmp	r2, #88	; 0x58
 8023212:	d052      	beq.n	80232ba <_printf_i+0xce>
 8023214:	0026      	movs	r6, r4
 8023216:	3642      	adds	r6, #66	; 0x42
 8023218:	7032      	strb	r2, [r6, #0]
 802321a:	e022      	b.n	8023262 <_printf_i+0x76>
 802321c:	0010      	movs	r0, r2
 802321e:	3863      	subs	r0, #99	; 0x63
 8023220:	2815      	cmp	r0, #21
 8023222:	d8f7      	bhi.n	8023214 <_printf_i+0x28>
 8023224:	f7fc ff70 	bl	8020108 <__gnu_thumb1_case_shi>
 8023228:	001f0016 	.word	0x001f0016
 802322c:	fff6fff6 	.word	0xfff6fff6
 8023230:	fff6fff6 	.word	0xfff6fff6
 8023234:	fff6001f 	.word	0xfff6001f
 8023238:	fff6fff6 	.word	0xfff6fff6
 802323c:	00a8fff6 	.word	0x00a8fff6
 8023240:	009a0036 	.word	0x009a0036
 8023244:	fff6fff6 	.word	0xfff6fff6
 8023248:	fff600b9 	.word	0xfff600b9
 802324c:	fff60036 	.word	0xfff60036
 8023250:	009efff6 	.word	0x009efff6
 8023254:	0026      	movs	r6, r4
 8023256:	681a      	ldr	r2, [r3, #0]
 8023258:	3642      	adds	r6, #66	; 0x42
 802325a:	1d11      	adds	r1, r2, #4
 802325c:	6019      	str	r1, [r3, #0]
 802325e:	6813      	ldr	r3, [r2, #0]
 8023260:	7033      	strb	r3, [r6, #0]
 8023262:	2301      	movs	r3, #1
 8023264:	e0a7      	b.n	80233b6 <_printf_i+0x1ca>
 8023266:	6808      	ldr	r0, [r1, #0]
 8023268:	6819      	ldr	r1, [r3, #0]
 802326a:	1d0a      	adds	r2, r1, #4
 802326c:	0605      	lsls	r5, r0, #24
 802326e:	d50b      	bpl.n	8023288 <_printf_i+0x9c>
 8023270:	680d      	ldr	r5, [r1, #0]
 8023272:	601a      	str	r2, [r3, #0]
 8023274:	2d00      	cmp	r5, #0
 8023276:	da03      	bge.n	8023280 <_printf_i+0x94>
 8023278:	232d      	movs	r3, #45	; 0x2d
 802327a:	9a04      	ldr	r2, [sp, #16]
 802327c:	426d      	negs	r5, r5
 802327e:	7013      	strb	r3, [r2, #0]
 8023280:	4b61      	ldr	r3, [pc, #388]	; (8023408 <_printf_i+0x21c>)
 8023282:	270a      	movs	r7, #10
 8023284:	9303      	str	r3, [sp, #12]
 8023286:	e032      	b.n	80232ee <_printf_i+0x102>
 8023288:	680d      	ldr	r5, [r1, #0]
 802328a:	601a      	str	r2, [r3, #0]
 802328c:	0641      	lsls	r1, r0, #25
 802328e:	d5f1      	bpl.n	8023274 <_printf_i+0x88>
 8023290:	b22d      	sxth	r5, r5
 8023292:	e7ef      	b.n	8023274 <_printf_i+0x88>
 8023294:	680d      	ldr	r5, [r1, #0]
 8023296:	6819      	ldr	r1, [r3, #0]
 8023298:	1d08      	adds	r0, r1, #4
 802329a:	6018      	str	r0, [r3, #0]
 802329c:	062e      	lsls	r6, r5, #24
 802329e:	d501      	bpl.n	80232a4 <_printf_i+0xb8>
 80232a0:	680d      	ldr	r5, [r1, #0]
 80232a2:	e003      	b.n	80232ac <_printf_i+0xc0>
 80232a4:	066d      	lsls	r5, r5, #25
 80232a6:	d5fb      	bpl.n	80232a0 <_printf_i+0xb4>
 80232a8:	680d      	ldr	r5, [r1, #0]
 80232aa:	b2ad      	uxth	r5, r5
 80232ac:	4b56      	ldr	r3, [pc, #344]	; (8023408 <_printf_i+0x21c>)
 80232ae:	270a      	movs	r7, #10
 80232b0:	9303      	str	r3, [sp, #12]
 80232b2:	2a6f      	cmp	r2, #111	; 0x6f
 80232b4:	d117      	bne.n	80232e6 <_printf_i+0xfa>
 80232b6:	2708      	movs	r7, #8
 80232b8:	e015      	b.n	80232e6 <_printf_i+0xfa>
 80232ba:	3145      	adds	r1, #69	; 0x45
 80232bc:	700a      	strb	r2, [r1, #0]
 80232be:	4a52      	ldr	r2, [pc, #328]	; (8023408 <_printf_i+0x21c>)
 80232c0:	9203      	str	r2, [sp, #12]
 80232c2:	681a      	ldr	r2, [r3, #0]
 80232c4:	6821      	ldr	r1, [r4, #0]
 80232c6:	ca20      	ldmia	r2!, {r5}
 80232c8:	601a      	str	r2, [r3, #0]
 80232ca:	0608      	lsls	r0, r1, #24
 80232cc:	d550      	bpl.n	8023370 <_printf_i+0x184>
 80232ce:	07cb      	lsls	r3, r1, #31
 80232d0:	d502      	bpl.n	80232d8 <_printf_i+0xec>
 80232d2:	2320      	movs	r3, #32
 80232d4:	4319      	orrs	r1, r3
 80232d6:	6021      	str	r1, [r4, #0]
 80232d8:	2710      	movs	r7, #16
 80232da:	2d00      	cmp	r5, #0
 80232dc:	d103      	bne.n	80232e6 <_printf_i+0xfa>
 80232de:	2320      	movs	r3, #32
 80232e0:	6822      	ldr	r2, [r4, #0]
 80232e2:	439a      	bics	r2, r3
 80232e4:	6022      	str	r2, [r4, #0]
 80232e6:	0023      	movs	r3, r4
 80232e8:	2200      	movs	r2, #0
 80232ea:	3343      	adds	r3, #67	; 0x43
 80232ec:	701a      	strb	r2, [r3, #0]
 80232ee:	6863      	ldr	r3, [r4, #4]
 80232f0:	60a3      	str	r3, [r4, #8]
 80232f2:	2b00      	cmp	r3, #0
 80232f4:	db03      	blt.n	80232fe <_printf_i+0x112>
 80232f6:	2204      	movs	r2, #4
 80232f8:	6821      	ldr	r1, [r4, #0]
 80232fa:	4391      	bics	r1, r2
 80232fc:	6021      	str	r1, [r4, #0]
 80232fe:	2d00      	cmp	r5, #0
 8023300:	d102      	bne.n	8023308 <_printf_i+0x11c>
 8023302:	9e04      	ldr	r6, [sp, #16]
 8023304:	2b00      	cmp	r3, #0
 8023306:	d00c      	beq.n	8023322 <_printf_i+0x136>
 8023308:	9e04      	ldr	r6, [sp, #16]
 802330a:	0028      	movs	r0, r5
 802330c:	0039      	movs	r1, r7
 802330e:	f7fc ff8b 	bl	8020228 <__aeabi_uidivmod>
 8023312:	9b03      	ldr	r3, [sp, #12]
 8023314:	3e01      	subs	r6, #1
 8023316:	5c5b      	ldrb	r3, [r3, r1]
 8023318:	7033      	strb	r3, [r6, #0]
 802331a:	002b      	movs	r3, r5
 802331c:	0005      	movs	r5, r0
 802331e:	429f      	cmp	r7, r3
 8023320:	d9f3      	bls.n	802330a <_printf_i+0x11e>
 8023322:	2f08      	cmp	r7, #8
 8023324:	d109      	bne.n	802333a <_printf_i+0x14e>
 8023326:	6823      	ldr	r3, [r4, #0]
 8023328:	07db      	lsls	r3, r3, #31
 802332a:	d506      	bpl.n	802333a <_printf_i+0x14e>
 802332c:	6863      	ldr	r3, [r4, #4]
 802332e:	6922      	ldr	r2, [r4, #16]
 8023330:	4293      	cmp	r3, r2
 8023332:	dc02      	bgt.n	802333a <_printf_i+0x14e>
 8023334:	2330      	movs	r3, #48	; 0x30
 8023336:	3e01      	subs	r6, #1
 8023338:	7033      	strb	r3, [r6, #0]
 802333a:	9b04      	ldr	r3, [sp, #16]
 802333c:	1b9b      	subs	r3, r3, r6
 802333e:	6123      	str	r3, [r4, #16]
 8023340:	9b07      	ldr	r3, [sp, #28]
 8023342:	0021      	movs	r1, r4
 8023344:	9300      	str	r3, [sp, #0]
 8023346:	9805      	ldr	r0, [sp, #20]
 8023348:	9b06      	ldr	r3, [sp, #24]
 802334a:	aa09      	add	r2, sp, #36	; 0x24
 802334c:	f7ff fede 	bl	802310c <_printf_common>
 8023350:	1c43      	adds	r3, r0, #1
 8023352:	d135      	bne.n	80233c0 <_printf_i+0x1d4>
 8023354:	2001      	movs	r0, #1
 8023356:	4240      	negs	r0, r0
 8023358:	b00b      	add	sp, #44	; 0x2c
 802335a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802335c:	2220      	movs	r2, #32
 802335e:	6809      	ldr	r1, [r1, #0]
 8023360:	430a      	orrs	r2, r1
 8023362:	6022      	str	r2, [r4, #0]
 8023364:	0022      	movs	r2, r4
 8023366:	2178      	movs	r1, #120	; 0x78
 8023368:	3245      	adds	r2, #69	; 0x45
 802336a:	7011      	strb	r1, [r2, #0]
 802336c:	4a27      	ldr	r2, [pc, #156]	; (802340c <_printf_i+0x220>)
 802336e:	e7a7      	b.n	80232c0 <_printf_i+0xd4>
 8023370:	0648      	lsls	r0, r1, #25
 8023372:	d5ac      	bpl.n	80232ce <_printf_i+0xe2>
 8023374:	b2ad      	uxth	r5, r5
 8023376:	e7aa      	b.n	80232ce <_printf_i+0xe2>
 8023378:	681a      	ldr	r2, [r3, #0]
 802337a:	680d      	ldr	r5, [r1, #0]
 802337c:	1d10      	adds	r0, r2, #4
 802337e:	6949      	ldr	r1, [r1, #20]
 8023380:	6018      	str	r0, [r3, #0]
 8023382:	6813      	ldr	r3, [r2, #0]
 8023384:	062e      	lsls	r6, r5, #24
 8023386:	d501      	bpl.n	802338c <_printf_i+0x1a0>
 8023388:	6019      	str	r1, [r3, #0]
 802338a:	e002      	b.n	8023392 <_printf_i+0x1a6>
 802338c:	066d      	lsls	r5, r5, #25
 802338e:	d5fb      	bpl.n	8023388 <_printf_i+0x19c>
 8023390:	8019      	strh	r1, [r3, #0]
 8023392:	2300      	movs	r3, #0
 8023394:	9e04      	ldr	r6, [sp, #16]
 8023396:	6123      	str	r3, [r4, #16]
 8023398:	e7d2      	b.n	8023340 <_printf_i+0x154>
 802339a:	681a      	ldr	r2, [r3, #0]
 802339c:	1d11      	adds	r1, r2, #4
 802339e:	6019      	str	r1, [r3, #0]
 80233a0:	6816      	ldr	r6, [r2, #0]
 80233a2:	2100      	movs	r1, #0
 80233a4:	0030      	movs	r0, r6
 80233a6:	6862      	ldr	r2, [r4, #4]
 80233a8:	f000 fad0 	bl	802394c <memchr>
 80233ac:	2800      	cmp	r0, #0
 80233ae:	d001      	beq.n	80233b4 <_printf_i+0x1c8>
 80233b0:	1b80      	subs	r0, r0, r6
 80233b2:	6060      	str	r0, [r4, #4]
 80233b4:	6863      	ldr	r3, [r4, #4]
 80233b6:	6123      	str	r3, [r4, #16]
 80233b8:	2300      	movs	r3, #0
 80233ba:	9a04      	ldr	r2, [sp, #16]
 80233bc:	7013      	strb	r3, [r2, #0]
 80233be:	e7bf      	b.n	8023340 <_printf_i+0x154>
 80233c0:	6923      	ldr	r3, [r4, #16]
 80233c2:	0032      	movs	r2, r6
 80233c4:	9906      	ldr	r1, [sp, #24]
 80233c6:	9805      	ldr	r0, [sp, #20]
 80233c8:	9d07      	ldr	r5, [sp, #28]
 80233ca:	47a8      	blx	r5
 80233cc:	1c43      	adds	r3, r0, #1
 80233ce:	d0c1      	beq.n	8023354 <_printf_i+0x168>
 80233d0:	6823      	ldr	r3, [r4, #0]
 80233d2:	079b      	lsls	r3, r3, #30
 80233d4:	d415      	bmi.n	8023402 <_printf_i+0x216>
 80233d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80233d8:	68e0      	ldr	r0, [r4, #12]
 80233da:	4298      	cmp	r0, r3
 80233dc:	dabc      	bge.n	8023358 <_printf_i+0x16c>
 80233de:	0018      	movs	r0, r3
 80233e0:	e7ba      	b.n	8023358 <_printf_i+0x16c>
 80233e2:	0022      	movs	r2, r4
 80233e4:	2301      	movs	r3, #1
 80233e6:	9906      	ldr	r1, [sp, #24]
 80233e8:	9805      	ldr	r0, [sp, #20]
 80233ea:	9e07      	ldr	r6, [sp, #28]
 80233ec:	3219      	adds	r2, #25
 80233ee:	47b0      	blx	r6
 80233f0:	1c43      	adds	r3, r0, #1
 80233f2:	d0af      	beq.n	8023354 <_printf_i+0x168>
 80233f4:	3501      	adds	r5, #1
 80233f6:	68e3      	ldr	r3, [r4, #12]
 80233f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80233fa:	1a9b      	subs	r3, r3, r2
 80233fc:	42ab      	cmp	r3, r5
 80233fe:	dcf0      	bgt.n	80233e2 <_printf_i+0x1f6>
 8023400:	e7e9      	b.n	80233d6 <_printf_i+0x1ea>
 8023402:	2500      	movs	r5, #0
 8023404:	e7f7      	b.n	80233f6 <_printf_i+0x20a>
 8023406:	46c0      	nop			; (mov r8, r8)
 8023408:	08023ba9 	.word	0x08023ba9
 802340c:	08023bba 	.word	0x08023bba

08023410 <_sbrk_r>:
 8023410:	2300      	movs	r3, #0
 8023412:	b570      	push	{r4, r5, r6, lr}
 8023414:	4d06      	ldr	r5, [pc, #24]	; (8023430 <_sbrk_r+0x20>)
 8023416:	0004      	movs	r4, r0
 8023418:	0008      	movs	r0, r1
 802341a:	602b      	str	r3, [r5, #0]
 802341c:	f7fd f9f4 	bl	8020808 <_sbrk>
 8023420:	1c43      	adds	r3, r0, #1
 8023422:	d103      	bne.n	802342c <_sbrk_r+0x1c>
 8023424:	682b      	ldr	r3, [r5, #0]
 8023426:	2b00      	cmp	r3, #0
 8023428:	d000      	beq.n	802342c <_sbrk_r+0x1c>
 802342a:	6023      	str	r3, [r4, #0]
 802342c:	bd70      	pop	{r4, r5, r6, pc}
 802342e:	46c0      	nop			; (mov r8, r8)
 8023430:	20000234 	.word	0x20000234

08023434 <__sread>:
 8023434:	b570      	push	{r4, r5, r6, lr}
 8023436:	000c      	movs	r4, r1
 8023438:	250e      	movs	r5, #14
 802343a:	5f49      	ldrsh	r1, [r1, r5]
 802343c:	f000 faec 	bl	8023a18 <_read_r>
 8023440:	2800      	cmp	r0, #0
 8023442:	db03      	blt.n	802344c <__sread+0x18>
 8023444:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8023446:	181b      	adds	r3, r3, r0
 8023448:	6563      	str	r3, [r4, #84]	; 0x54
 802344a:	bd70      	pop	{r4, r5, r6, pc}
 802344c:	89a3      	ldrh	r3, [r4, #12]
 802344e:	4a02      	ldr	r2, [pc, #8]	; (8023458 <__sread+0x24>)
 8023450:	4013      	ands	r3, r2
 8023452:	81a3      	strh	r3, [r4, #12]
 8023454:	e7f9      	b.n	802344a <__sread+0x16>
 8023456:	46c0      	nop			; (mov r8, r8)
 8023458:	ffffefff 	.word	0xffffefff

0802345c <__swrite>:
 802345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802345e:	001f      	movs	r7, r3
 8023460:	898b      	ldrh	r3, [r1, #12]
 8023462:	0005      	movs	r5, r0
 8023464:	000c      	movs	r4, r1
 8023466:	0016      	movs	r6, r2
 8023468:	05db      	lsls	r3, r3, #23
 802346a:	d505      	bpl.n	8023478 <__swrite+0x1c>
 802346c:	230e      	movs	r3, #14
 802346e:	5ec9      	ldrsh	r1, [r1, r3]
 8023470:	2200      	movs	r2, #0
 8023472:	2302      	movs	r3, #2
 8023474:	f000 f9ea 	bl	802384c <_lseek_r>
 8023478:	89a3      	ldrh	r3, [r4, #12]
 802347a:	4a05      	ldr	r2, [pc, #20]	; (8023490 <__swrite+0x34>)
 802347c:	0028      	movs	r0, r5
 802347e:	4013      	ands	r3, r2
 8023480:	81a3      	strh	r3, [r4, #12]
 8023482:	0032      	movs	r2, r6
 8023484:	230e      	movs	r3, #14
 8023486:	5ee1      	ldrsh	r1, [r4, r3]
 8023488:	003b      	movs	r3, r7
 802348a:	f000 f875 	bl	8023578 <_write_r>
 802348e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023490:	ffffefff 	.word	0xffffefff

08023494 <__sseek>:
 8023494:	b570      	push	{r4, r5, r6, lr}
 8023496:	000c      	movs	r4, r1
 8023498:	250e      	movs	r5, #14
 802349a:	5f49      	ldrsh	r1, [r1, r5]
 802349c:	f000 f9d6 	bl	802384c <_lseek_r>
 80234a0:	89a3      	ldrh	r3, [r4, #12]
 80234a2:	1c42      	adds	r2, r0, #1
 80234a4:	d103      	bne.n	80234ae <__sseek+0x1a>
 80234a6:	4a05      	ldr	r2, [pc, #20]	; (80234bc <__sseek+0x28>)
 80234a8:	4013      	ands	r3, r2
 80234aa:	81a3      	strh	r3, [r4, #12]
 80234ac:	bd70      	pop	{r4, r5, r6, pc}
 80234ae:	2280      	movs	r2, #128	; 0x80
 80234b0:	0152      	lsls	r2, r2, #5
 80234b2:	4313      	orrs	r3, r2
 80234b4:	81a3      	strh	r3, [r4, #12]
 80234b6:	6560      	str	r0, [r4, #84]	; 0x54
 80234b8:	e7f8      	b.n	80234ac <__sseek+0x18>
 80234ba:	46c0      	nop			; (mov r8, r8)
 80234bc:	ffffefff 	.word	0xffffefff

080234c0 <__sclose>:
 80234c0:	b510      	push	{r4, lr}
 80234c2:	230e      	movs	r3, #14
 80234c4:	5ec9      	ldrsh	r1, [r1, r3]
 80234c6:	f000 f8e3 	bl	8023690 <_close_r>
 80234ca:	bd10      	pop	{r4, pc}

080234cc <__swbuf_r>:
 80234cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80234ce:	0005      	movs	r5, r0
 80234d0:	000e      	movs	r6, r1
 80234d2:	0014      	movs	r4, r2
 80234d4:	2800      	cmp	r0, #0
 80234d6:	d004      	beq.n	80234e2 <__swbuf_r+0x16>
 80234d8:	6983      	ldr	r3, [r0, #24]
 80234da:	2b00      	cmp	r3, #0
 80234dc:	d101      	bne.n	80234e2 <__swbuf_r+0x16>
 80234de:	f7ff fbb1 	bl	8022c44 <__sinit>
 80234e2:	4b22      	ldr	r3, [pc, #136]	; (802356c <__swbuf_r+0xa0>)
 80234e4:	429c      	cmp	r4, r3
 80234e6:	d12e      	bne.n	8023546 <__swbuf_r+0x7a>
 80234e8:	686c      	ldr	r4, [r5, #4]
 80234ea:	69a3      	ldr	r3, [r4, #24]
 80234ec:	60a3      	str	r3, [r4, #8]
 80234ee:	89a3      	ldrh	r3, [r4, #12]
 80234f0:	071b      	lsls	r3, r3, #28
 80234f2:	d532      	bpl.n	802355a <__swbuf_r+0x8e>
 80234f4:	6923      	ldr	r3, [r4, #16]
 80234f6:	2b00      	cmp	r3, #0
 80234f8:	d02f      	beq.n	802355a <__swbuf_r+0x8e>
 80234fa:	6823      	ldr	r3, [r4, #0]
 80234fc:	6922      	ldr	r2, [r4, #16]
 80234fe:	b2f7      	uxtb	r7, r6
 8023500:	1a98      	subs	r0, r3, r2
 8023502:	6963      	ldr	r3, [r4, #20]
 8023504:	b2f6      	uxtb	r6, r6
 8023506:	4283      	cmp	r3, r0
 8023508:	dc05      	bgt.n	8023516 <__swbuf_r+0x4a>
 802350a:	0021      	movs	r1, r4
 802350c:	0028      	movs	r0, r5
 802350e:	f000 f95d 	bl	80237cc <_fflush_r>
 8023512:	2800      	cmp	r0, #0
 8023514:	d127      	bne.n	8023566 <__swbuf_r+0x9a>
 8023516:	68a3      	ldr	r3, [r4, #8]
 8023518:	3001      	adds	r0, #1
 802351a:	3b01      	subs	r3, #1
 802351c:	60a3      	str	r3, [r4, #8]
 802351e:	6823      	ldr	r3, [r4, #0]
 8023520:	1c5a      	adds	r2, r3, #1
 8023522:	6022      	str	r2, [r4, #0]
 8023524:	701f      	strb	r7, [r3, #0]
 8023526:	6963      	ldr	r3, [r4, #20]
 8023528:	4283      	cmp	r3, r0
 802352a:	d004      	beq.n	8023536 <__swbuf_r+0x6a>
 802352c:	89a3      	ldrh	r3, [r4, #12]
 802352e:	07db      	lsls	r3, r3, #31
 8023530:	d507      	bpl.n	8023542 <__swbuf_r+0x76>
 8023532:	2e0a      	cmp	r6, #10
 8023534:	d105      	bne.n	8023542 <__swbuf_r+0x76>
 8023536:	0021      	movs	r1, r4
 8023538:	0028      	movs	r0, r5
 802353a:	f000 f947 	bl	80237cc <_fflush_r>
 802353e:	2800      	cmp	r0, #0
 8023540:	d111      	bne.n	8023566 <__swbuf_r+0x9a>
 8023542:	0030      	movs	r0, r6
 8023544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023546:	4b0a      	ldr	r3, [pc, #40]	; (8023570 <__swbuf_r+0xa4>)
 8023548:	429c      	cmp	r4, r3
 802354a:	d101      	bne.n	8023550 <__swbuf_r+0x84>
 802354c:	68ac      	ldr	r4, [r5, #8]
 802354e:	e7cc      	b.n	80234ea <__swbuf_r+0x1e>
 8023550:	4b08      	ldr	r3, [pc, #32]	; (8023574 <__swbuf_r+0xa8>)
 8023552:	429c      	cmp	r4, r3
 8023554:	d1c9      	bne.n	80234ea <__swbuf_r+0x1e>
 8023556:	68ec      	ldr	r4, [r5, #12]
 8023558:	e7c7      	b.n	80234ea <__swbuf_r+0x1e>
 802355a:	0021      	movs	r1, r4
 802355c:	0028      	movs	r0, r5
 802355e:	f000 f81f 	bl	80235a0 <__swsetup_r>
 8023562:	2800      	cmp	r0, #0
 8023564:	d0c9      	beq.n	80234fa <__swbuf_r+0x2e>
 8023566:	2601      	movs	r6, #1
 8023568:	4276      	negs	r6, r6
 802356a:	e7ea      	b.n	8023542 <__swbuf_r+0x76>
 802356c:	08023b58 	.word	0x08023b58
 8023570:	08023b78 	.word	0x08023b78
 8023574:	08023b38 	.word	0x08023b38

08023578 <_write_r>:
 8023578:	b570      	push	{r4, r5, r6, lr}
 802357a:	0004      	movs	r4, r0
 802357c:	0008      	movs	r0, r1
 802357e:	0011      	movs	r1, r2
 8023580:	001a      	movs	r2, r3
 8023582:	2300      	movs	r3, #0
 8023584:	4d05      	ldr	r5, [pc, #20]	; (802359c <_write_r+0x24>)
 8023586:	602b      	str	r3, [r5, #0]
 8023588:	f7fd f8f6 	bl	8020778 <_write>
 802358c:	1c43      	adds	r3, r0, #1
 802358e:	d103      	bne.n	8023598 <_write_r+0x20>
 8023590:	682b      	ldr	r3, [r5, #0]
 8023592:	2b00      	cmp	r3, #0
 8023594:	d000      	beq.n	8023598 <_write_r+0x20>
 8023596:	6023      	str	r3, [r4, #0]
 8023598:	bd70      	pop	{r4, r5, r6, pc}
 802359a:	46c0      	nop			; (mov r8, r8)
 802359c:	20000234 	.word	0x20000234

080235a0 <__swsetup_r>:
 80235a0:	4b37      	ldr	r3, [pc, #220]	; (8023680 <__swsetup_r+0xe0>)
 80235a2:	b570      	push	{r4, r5, r6, lr}
 80235a4:	681d      	ldr	r5, [r3, #0]
 80235a6:	0006      	movs	r6, r0
 80235a8:	000c      	movs	r4, r1
 80235aa:	2d00      	cmp	r5, #0
 80235ac:	d005      	beq.n	80235ba <__swsetup_r+0x1a>
 80235ae:	69ab      	ldr	r3, [r5, #24]
 80235b0:	2b00      	cmp	r3, #0
 80235b2:	d102      	bne.n	80235ba <__swsetup_r+0x1a>
 80235b4:	0028      	movs	r0, r5
 80235b6:	f7ff fb45 	bl	8022c44 <__sinit>
 80235ba:	4b32      	ldr	r3, [pc, #200]	; (8023684 <__swsetup_r+0xe4>)
 80235bc:	429c      	cmp	r4, r3
 80235be:	d10f      	bne.n	80235e0 <__swsetup_r+0x40>
 80235c0:	686c      	ldr	r4, [r5, #4]
 80235c2:	230c      	movs	r3, #12
 80235c4:	5ee2      	ldrsh	r2, [r4, r3]
 80235c6:	b293      	uxth	r3, r2
 80235c8:	0711      	lsls	r1, r2, #28
 80235ca:	d42d      	bmi.n	8023628 <__swsetup_r+0x88>
 80235cc:	06d9      	lsls	r1, r3, #27
 80235ce:	d411      	bmi.n	80235f4 <__swsetup_r+0x54>
 80235d0:	2309      	movs	r3, #9
 80235d2:	2001      	movs	r0, #1
 80235d4:	6033      	str	r3, [r6, #0]
 80235d6:	3337      	adds	r3, #55	; 0x37
 80235d8:	4313      	orrs	r3, r2
 80235da:	81a3      	strh	r3, [r4, #12]
 80235dc:	4240      	negs	r0, r0
 80235de:	bd70      	pop	{r4, r5, r6, pc}
 80235e0:	4b29      	ldr	r3, [pc, #164]	; (8023688 <__swsetup_r+0xe8>)
 80235e2:	429c      	cmp	r4, r3
 80235e4:	d101      	bne.n	80235ea <__swsetup_r+0x4a>
 80235e6:	68ac      	ldr	r4, [r5, #8]
 80235e8:	e7eb      	b.n	80235c2 <__swsetup_r+0x22>
 80235ea:	4b28      	ldr	r3, [pc, #160]	; (802368c <__swsetup_r+0xec>)
 80235ec:	429c      	cmp	r4, r3
 80235ee:	d1e8      	bne.n	80235c2 <__swsetup_r+0x22>
 80235f0:	68ec      	ldr	r4, [r5, #12]
 80235f2:	e7e6      	b.n	80235c2 <__swsetup_r+0x22>
 80235f4:	075b      	lsls	r3, r3, #29
 80235f6:	d513      	bpl.n	8023620 <__swsetup_r+0x80>
 80235f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80235fa:	2900      	cmp	r1, #0
 80235fc:	d008      	beq.n	8023610 <__swsetup_r+0x70>
 80235fe:	0023      	movs	r3, r4
 8023600:	3344      	adds	r3, #68	; 0x44
 8023602:	4299      	cmp	r1, r3
 8023604:	d002      	beq.n	802360c <__swsetup_r+0x6c>
 8023606:	0030      	movs	r0, r6
 8023608:	f000 f9bc 	bl	8023984 <_free_r>
 802360c:	2300      	movs	r3, #0
 802360e:	6363      	str	r3, [r4, #52]	; 0x34
 8023610:	2224      	movs	r2, #36	; 0x24
 8023612:	89a3      	ldrh	r3, [r4, #12]
 8023614:	4393      	bics	r3, r2
 8023616:	81a3      	strh	r3, [r4, #12]
 8023618:	2300      	movs	r3, #0
 802361a:	6063      	str	r3, [r4, #4]
 802361c:	6923      	ldr	r3, [r4, #16]
 802361e:	6023      	str	r3, [r4, #0]
 8023620:	2308      	movs	r3, #8
 8023622:	89a2      	ldrh	r2, [r4, #12]
 8023624:	4313      	orrs	r3, r2
 8023626:	81a3      	strh	r3, [r4, #12]
 8023628:	6923      	ldr	r3, [r4, #16]
 802362a:	2b00      	cmp	r3, #0
 802362c:	d10b      	bne.n	8023646 <__swsetup_r+0xa6>
 802362e:	21a0      	movs	r1, #160	; 0xa0
 8023630:	2280      	movs	r2, #128	; 0x80
 8023632:	89a3      	ldrh	r3, [r4, #12]
 8023634:	0089      	lsls	r1, r1, #2
 8023636:	0092      	lsls	r2, r2, #2
 8023638:	400b      	ands	r3, r1
 802363a:	4293      	cmp	r3, r2
 802363c:	d003      	beq.n	8023646 <__swsetup_r+0xa6>
 802363e:	0021      	movs	r1, r4
 8023640:	0030      	movs	r0, r6
 8023642:	f000 f93f 	bl	80238c4 <__smakebuf_r>
 8023646:	220c      	movs	r2, #12
 8023648:	5ea3      	ldrsh	r3, [r4, r2]
 802364a:	2001      	movs	r0, #1
 802364c:	001a      	movs	r2, r3
 802364e:	b299      	uxth	r1, r3
 8023650:	4002      	ands	r2, r0
 8023652:	4203      	tst	r3, r0
 8023654:	d00f      	beq.n	8023676 <__swsetup_r+0xd6>
 8023656:	2200      	movs	r2, #0
 8023658:	60a2      	str	r2, [r4, #8]
 802365a:	6962      	ldr	r2, [r4, #20]
 802365c:	4252      	negs	r2, r2
 802365e:	61a2      	str	r2, [r4, #24]
 8023660:	2000      	movs	r0, #0
 8023662:	6922      	ldr	r2, [r4, #16]
 8023664:	4282      	cmp	r2, r0
 8023666:	d1ba      	bne.n	80235de <__swsetup_r+0x3e>
 8023668:	060a      	lsls	r2, r1, #24
 802366a:	d5b8      	bpl.n	80235de <__swsetup_r+0x3e>
 802366c:	2240      	movs	r2, #64	; 0x40
 802366e:	4313      	orrs	r3, r2
 8023670:	81a3      	strh	r3, [r4, #12]
 8023672:	3801      	subs	r0, #1
 8023674:	e7b3      	b.n	80235de <__swsetup_r+0x3e>
 8023676:	0788      	lsls	r0, r1, #30
 8023678:	d400      	bmi.n	802367c <__swsetup_r+0xdc>
 802367a:	6962      	ldr	r2, [r4, #20]
 802367c:	60a2      	str	r2, [r4, #8]
 802367e:	e7ef      	b.n	8023660 <__swsetup_r+0xc0>
 8023680:	2000000c 	.word	0x2000000c
 8023684:	08023b58 	.word	0x08023b58
 8023688:	08023b78 	.word	0x08023b78
 802368c:	08023b38 	.word	0x08023b38

08023690 <_close_r>:
 8023690:	2300      	movs	r3, #0
 8023692:	b570      	push	{r4, r5, r6, lr}
 8023694:	4d06      	ldr	r5, [pc, #24]	; (80236b0 <_close_r+0x20>)
 8023696:	0004      	movs	r4, r0
 8023698:	0008      	movs	r0, r1
 802369a:	602b      	str	r3, [r5, #0]
 802369c:	f7fd f888 	bl	80207b0 <_close>
 80236a0:	1c43      	adds	r3, r0, #1
 80236a2:	d103      	bne.n	80236ac <_close_r+0x1c>
 80236a4:	682b      	ldr	r3, [r5, #0]
 80236a6:	2b00      	cmp	r3, #0
 80236a8:	d000      	beq.n	80236ac <_close_r+0x1c>
 80236aa:	6023      	str	r3, [r4, #0]
 80236ac:	bd70      	pop	{r4, r5, r6, pc}
 80236ae:	46c0      	nop			; (mov r8, r8)
 80236b0:	20000234 	.word	0x20000234

080236b4 <__sflush_r>:
 80236b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80236b6:	898b      	ldrh	r3, [r1, #12]
 80236b8:	0005      	movs	r5, r0
 80236ba:	000c      	movs	r4, r1
 80236bc:	071a      	lsls	r2, r3, #28
 80236be:	d45f      	bmi.n	8023780 <__sflush_r+0xcc>
 80236c0:	684a      	ldr	r2, [r1, #4]
 80236c2:	2a00      	cmp	r2, #0
 80236c4:	dc04      	bgt.n	80236d0 <__sflush_r+0x1c>
 80236c6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80236c8:	2a00      	cmp	r2, #0
 80236ca:	dc01      	bgt.n	80236d0 <__sflush_r+0x1c>
 80236cc:	2000      	movs	r0, #0
 80236ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80236d0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80236d2:	2f00      	cmp	r7, #0
 80236d4:	d0fa      	beq.n	80236cc <__sflush_r+0x18>
 80236d6:	2200      	movs	r2, #0
 80236d8:	2180      	movs	r1, #128	; 0x80
 80236da:	682e      	ldr	r6, [r5, #0]
 80236dc:	602a      	str	r2, [r5, #0]
 80236de:	001a      	movs	r2, r3
 80236e0:	0149      	lsls	r1, r1, #5
 80236e2:	400a      	ands	r2, r1
 80236e4:	420b      	tst	r3, r1
 80236e6:	d034      	beq.n	8023752 <__sflush_r+0x9e>
 80236e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80236ea:	89a3      	ldrh	r3, [r4, #12]
 80236ec:	075b      	lsls	r3, r3, #29
 80236ee:	d506      	bpl.n	80236fe <__sflush_r+0x4a>
 80236f0:	6863      	ldr	r3, [r4, #4]
 80236f2:	1ac0      	subs	r0, r0, r3
 80236f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80236f6:	2b00      	cmp	r3, #0
 80236f8:	d001      	beq.n	80236fe <__sflush_r+0x4a>
 80236fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80236fc:	1ac0      	subs	r0, r0, r3
 80236fe:	0002      	movs	r2, r0
 8023700:	6a21      	ldr	r1, [r4, #32]
 8023702:	2300      	movs	r3, #0
 8023704:	0028      	movs	r0, r5
 8023706:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8023708:	47b8      	blx	r7
 802370a:	89a1      	ldrh	r1, [r4, #12]
 802370c:	1c43      	adds	r3, r0, #1
 802370e:	d106      	bne.n	802371e <__sflush_r+0x6a>
 8023710:	682b      	ldr	r3, [r5, #0]
 8023712:	2b1d      	cmp	r3, #29
 8023714:	d831      	bhi.n	802377a <__sflush_r+0xc6>
 8023716:	4a2c      	ldr	r2, [pc, #176]	; (80237c8 <__sflush_r+0x114>)
 8023718:	40da      	lsrs	r2, r3
 802371a:	07d3      	lsls	r3, r2, #31
 802371c:	d52d      	bpl.n	802377a <__sflush_r+0xc6>
 802371e:	2300      	movs	r3, #0
 8023720:	6063      	str	r3, [r4, #4]
 8023722:	6923      	ldr	r3, [r4, #16]
 8023724:	6023      	str	r3, [r4, #0]
 8023726:	04cb      	lsls	r3, r1, #19
 8023728:	d505      	bpl.n	8023736 <__sflush_r+0x82>
 802372a:	1c43      	adds	r3, r0, #1
 802372c:	d102      	bne.n	8023734 <__sflush_r+0x80>
 802372e:	682b      	ldr	r3, [r5, #0]
 8023730:	2b00      	cmp	r3, #0
 8023732:	d100      	bne.n	8023736 <__sflush_r+0x82>
 8023734:	6560      	str	r0, [r4, #84]	; 0x54
 8023736:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023738:	602e      	str	r6, [r5, #0]
 802373a:	2900      	cmp	r1, #0
 802373c:	d0c6      	beq.n	80236cc <__sflush_r+0x18>
 802373e:	0023      	movs	r3, r4
 8023740:	3344      	adds	r3, #68	; 0x44
 8023742:	4299      	cmp	r1, r3
 8023744:	d002      	beq.n	802374c <__sflush_r+0x98>
 8023746:	0028      	movs	r0, r5
 8023748:	f000 f91c 	bl	8023984 <_free_r>
 802374c:	2000      	movs	r0, #0
 802374e:	6360      	str	r0, [r4, #52]	; 0x34
 8023750:	e7bd      	b.n	80236ce <__sflush_r+0x1a>
 8023752:	2301      	movs	r3, #1
 8023754:	0028      	movs	r0, r5
 8023756:	6a21      	ldr	r1, [r4, #32]
 8023758:	47b8      	blx	r7
 802375a:	1c43      	adds	r3, r0, #1
 802375c:	d1c5      	bne.n	80236ea <__sflush_r+0x36>
 802375e:	682b      	ldr	r3, [r5, #0]
 8023760:	2b00      	cmp	r3, #0
 8023762:	d0c2      	beq.n	80236ea <__sflush_r+0x36>
 8023764:	2b1d      	cmp	r3, #29
 8023766:	d001      	beq.n	802376c <__sflush_r+0xb8>
 8023768:	2b16      	cmp	r3, #22
 802376a:	d101      	bne.n	8023770 <__sflush_r+0xbc>
 802376c:	602e      	str	r6, [r5, #0]
 802376e:	e7ad      	b.n	80236cc <__sflush_r+0x18>
 8023770:	2340      	movs	r3, #64	; 0x40
 8023772:	89a2      	ldrh	r2, [r4, #12]
 8023774:	4313      	orrs	r3, r2
 8023776:	81a3      	strh	r3, [r4, #12]
 8023778:	e7a9      	b.n	80236ce <__sflush_r+0x1a>
 802377a:	2340      	movs	r3, #64	; 0x40
 802377c:	430b      	orrs	r3, r1
 802377e:	e7fa      	b.n	8023776 <__sflush_r+0xc2>
 8023780:	690f      	ldr	r7, [r1, #16]
 8023782:	2f00      	cmp	r7, #0
 8023784:	d0a2      	beq.n	80236cc <__sflush_r+0x18>
 8023786:	680a      	ldr	r2, [r1, #0]
 8023788:	600f      	str	r7, [r1, #0]
 802378a:	1bd2      	subs	r2, r2, r7
 802378c:	9201      	str	r2, [sp, #4]
 802378e:	2200      	movs	r2, #0
 8023790:	079b      	lsls	r3, r3, #30
 8023792:	d100      	bne.n	8023796 <__sflush_r+0xe2>
 8023794:	694a      	ldr	r2, [r1, #20]
 8023796:	60a2      	str	r2, [r4, #8]
 8023798:	9b01      	ldr	r3, [sp, #4]
 802379a:	2b00      	cmp	r3, #0
 802379c:	dc00      	bgt.n	80237a0 <__sflush_r+0xec>
 802379e:	e795      	b.n	80236cc <__sflush_r+0x18>
 80237a0:	003a      	movs	r2, r7
 80237a2:	0028      	movs	r0, r5
 80237a4:	9b01      	ldr	r3, [sp, #4]
 80237a6:	6a21      	ldr	r1, [r4, #32]
 80237a8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80237aa:	47b0      	blx	r6
 80237ac:	2800      	cmp	r0, #0
 80237ae:	dc06      	bgt.n	80237be <__sflush_r+0x10a>
 80237b0:	2340      	movs	r3, #64	; 0x40
 80237b2:	2001      	movs	r0, #1
 80237b4:	89a2      	ldrh	r2, [r4, #12]
 80237b6:	4240      	negs	r0, r0
 80237b8:	4313      	orrs	r3, r2
 80237ba:	81a3      	strh	r3, [r4, #12]
 80237bc:	e787      	b.n	80236ce <__sflush_r+0x1a>
 80237be:	9b01      	ldr	r3, [sp, #4]
 80237c0:	183f      	adds	r7, r7, r0
 80237c2:	1a1b      	subs	r3, r3, r0
 80237c4:	9301      	str	r3, [sp, #4]
 80237c6:	e7e7      	b.n	8023798 <__sflush_r+0xe4>
 80237c8:	20400001 	.word	0x20400001

080237cc <_fflush_r>:
 80237cc:	690b      	ldr	r3, [r1, #16]
 80237ce:	b570      	push	{r4, r5, r6, lr}
 80237d0:	0005      	movs	r5, r0
 80237d2:	000c      	movs	r4, r1
 80237d4:	2b00      	cmp	r3, #0
 80237d6:	d102      	bne.n	80237de <_fflush_r+0x12>
 80237d8:	2500      	movs	r5, #0
 80237da:	0028      	movs	r0, r5
 80237dc:	bd70      	pop	{r4, r5, r6, pc}
 80237de:	2800      	cmp	r0, #0
 80237e0:	d004      	beq.n	80237ec <_fflush_r+0x20>
 80237e2:	6983      	ldr	r3, [r0, #24]
 80237e4:	2b00      	cmp	r3, #0
 80237e6:	d101      	bne.n	80237ec <_fflush_r+0x20>
 80237e8:	f7ff fa2c 	bl	8022c44 <__sinit>
 80237ec:	4b14      	ldr	r3, [pc, #80]	; (8023840 <_fflush_r+0x74>)
 80237ee:	429c      	cmp	r4, r3
 80237f0:	d11b      	bne.n	802382a <_fflush_r+0x5e>
 80237f2:	686c      	ldr	r4, [r5, #4]
 80237f4:	220c      	movs	r2, #12
 80237f6:	5ea3      	ldrsh	r3, [r4, r2]
 80237f8:	2b00      	cmp	r3, #0
 80237fa:	d0ed      	beq.n	80237d8 <_fflush_r+0xc>
 80237fc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80237fe:	07d2      	lsls	r2, r2, #31
 8023800:	d404      	bmi.n	802380c <_fflush_r+0x40>
 8023802:	059b      	lsls	r3, r3, #22
 8023804:	d402      	bmi.n	802380c <_fflush_r+0x40>
 8023806:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023808:	f7ff fabd 	bl	8022d86 <__retarget_lock_acquire_recursive>
 802380c:	0028      	movs	r0, r5
 802380e:	0021      	movs	r1, r4
 8023810:	f7ff ff50 	bl	80236b4 <__sflush_r>
 8023814:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023816:	0005      	movs	r5, r0
 8023818:	07db      	lsls	r3, r3, #31
 802381a:	d4de      	bmi.n	80237da <_fflush_r+0xe>
 802381c:	89a3      	ldrh	r3, [r4, #12]
 802381e:	059b      	lsls	r3, r3, #22
 8023820:	d4db      	bmi.n	80237da <_fflush_r+0xe>
 8023822:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023824:	f7ff fab0 	bl	8022d88 <__retarget_lock_release_recursive>
 8023828:	e7d7      	b.n	80237da <_fflush_r+0xe>
 802382a:	4b06      	ldr	r3, [pc, #24]	; (8023844 <_fflush_r+0x78>)
 802382c:	429c      	cmp	r4, r3
 802382e:	d101      	bne.n	8023834 <_fflush_r+0x68>
 8023830:	68ac      	ldr	r4, [r5, #8]
 8023832:	e7df      	b.n	80237f4 <_fflush_r+0x28>
 8023834:	4b04      	ldr	r3, [pc, #16]	; (8023848 <_fflush_r+0x7c>)
 8023836:	429c      	cmp	r4, r3
 8023838:	d1dc      	bne.n	80237f4 <_fflush_r+0x28>
 802383a:	68ec      	ldr	r4, [r5, #12]
 802383c:	e7da      	b.n	80237f4 <_fflush_r+0x28>
 802383e:	46c0      	nop			; (mov r8, r8)
 8023840:	08023b58 	.word	0x08023b58
 8023844:	08023b78 	.word	0x08023b78
 8023848:	08023b38 	.word	0x08023b38

0802384c <_lseek_r>:
 802384c:	b570      	push	{r4, r5, r6, lr}
 802384e:	0004      	movs	r4, r0
 8023850:	0008      	movs	r0, r1
 8023852:	0011      	movs	r1, r2
 8023854:	001a      	movs	r2, r3
 8023856:	2300      	movs	r3, #0
 8023858:	4d05      	ldr	r5, [pc, #20]	; (8023870 <_lseek_r+0x24>)
 802385a:	602b      	str	r3, [r5, #0]
 802385c:	f7fc ffc9 	bl	80207f2 <_lseek>
 8023860:	1c43      	adds	r3, r0, #1
 8023862:	d103      	bne.n	802386c <_lseek_r+0x20>
 8023864:	682b      	ldr	r3, [r5, #0]
 8023866:	2b00      	cmp	r3, #0
 8023868:	d000      	beq.n	802386c <_lseek_r+0x20>
 802386a:	6023      	str	r3, [r4, #0]
 802386c:	bd70      	pop	{r4, r5, r6, pc}
 802386e:	46c0      	nop			; (mov r8, r8)
 8023870:	20000234 	.word	0x20000234

08023874 <__swhatbuf_r>:
 8023874:	b570      	push	{r4, r5, r6, lr}
 8023876:	000e      	movs	r6, r1
 8023878:	001d      	movs	r5, r3
 802387a:	230e      	movs	r3, #14
 802387c:	5ec9      	ldrsh	r1, [r1, r3]
 802387e:	0014      	movs	r4, r2
 8023880:	b096      	sub	sp, #88	; 0x58
 8023882:	2900      	cmp	r1, #0
 8023884:	da07      	bge.n	8023896 <__swhatbuf_r+0x22>
 8023886:	2300      	movs	r3, #0
 8023888:	602b      	str	r3, [r5, #0]
 802388a:	89b3      	ldrh	r3, [r6, #12]
 802388c:	061b      	lsls	r3, r3, #24
 802388e:	d411      	bmi.n	80238b4 <__swhatbuf_r+0x40>
 8023890:	2380      	movs	r3, #128	; 0x80
 8023892:	00db      	lsls	r3, r3, #3
 8023894:	e00f      	b.n	80238b6 <__swhatbuf_r+0x42>
 8023896:	466a      	mov	r2, sp
 8023898:	f000 f8d2 	bl	8023a40 <_fstat_r>
 802389c:	2800      	cmp	r0, #0
 802389e:	dbf2      	blt.n	8023886 <__swhatbuf_r+0x12>
 80238a0:	23f0      	movs	r3, #240	; 0xf0
 80238a2:	9901      	ldr	r1, [sp, #4]
 80238a4:	021b      	lsls	r3, r3, #8
 80238a6:	4019      	ands	r1, r3
 80238a8:	4b05      	ldr	r3, [pc, #20]	; (80238c0 <__swhatbuf_r+0x4c>)
 80238aa:	18c9      	adds	r1, r1, r3
 80238ac:	424b      	negs	r3, r1
 80238ae:	4159      	adcs	r1, r3
 80238b0:	6029      	str	r1, [r5, #0]
 80238b2:	e7ed      	b.n	8023890 <__swhatbuf_r+0x1c>
 80238b4:	2340      	movs	r3, #64	; 0x40
 80238b6:	2000      	movs	r0, #0
 80238b8:	6023      	str	r3, [r4, #0]
 80238ba:	b016      	add	sp, #88	; 0x58
 80238bc:	bd70      	pop	{r4, r5, r6, pc}
 80238be:	46c0      	nop			; (mov r8, r8)
 80238c0:	ffffe000 	.word	0xffffe000

080238c4 <__smakebuf_r>:
 80238c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80238c6:	2602      	movs	r6, #2
 80238c8:	898b      	ldrh	r3, [r1, #12]
 80238ca:	0005      	movs	r5, r0
 80238cc:	000c      	movs	r4, r1
 80238ce:	4233      	tst	r3, r6
 80238d0:	d006      	beq.n	80238e0 <__smakebuf_r+0x1c>
 80238d2:	0023      	movs	r3, r4
 80238d4:	3347      	adds	r3, #71	; 0x47
 80238d6:	6023      	str	r3, [r4, #0]
 80238d8:	6123      	str	r3, [r4, #16]
 80238da:	2301      	movs	r3, #1
 80238dc:	6163      	str	r3, [r4, #20]
 80238de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80238e0:	466a      	mov	r2, sp
 80238e2:	ab01      	add	r3, sp, #4
 80238e4:	f7ff ffc6 	bl	8023874 <__swhatbuf_r>
 80238e8:	9900      	ldr	r1, [sp, #0]
 80238ea:	0007      	movs	r7, r0
 80238ec:	0028      	movs	r0, r5
 80238ee:	f7ff fa4d 	bl	8022d8c <_malloc_r>
 80238f2:	2800      	cmp	r0, #0
 80238f4:	d108      	bne.n	8023908 <__smakebuf_r+0x44>
 80238f6:	220c      	movs	r2, #12
 80238f8:	5ea3      	ldrsh	r3, [r4, r2]
 80238fa:	059a      	lsls	r2, r3, #22
 80238fc:	d4ef      	bmi.n	80238de <__smakebuf_r+0x1a>
 80238fe:	2203      	movs	r2, #3
 8023900:	4393      	bics	r3, r2
 8023902:	431e      	orrs	r6, r3
 8023904:	81a6      	strh	r6, [r4, #12]
 8023906:	e7e4      	b.n	80238d2 <__smakebuf_r+0xe>
 8023908:	4b0f      	ldr	r3, [pc, #60]	; (8023948 <__smakebuf_r+0x84>)
 802390a:	62ab      	str	r3, [r5, #40]	; 0x28
 802390c:	2380      	movs	r3, #128	; 0x80
 802390e:	89a2      	ldrh	r2, [r4, #12]
 8023910:	6020      	str	r0, [r4, #0]
 8023912:	4313      	orrs	r3, r2
 8023914:	81a3      	strh	r3, [r4, #12]
 8023916:	9b00      	ldr	r3, [sp, #0]
 8023918:	6120      	str	r0, [r4, #16]
 802391a:	6163      	str	r3, [r4, #20]
 802391c:	9b01      	ldr	r3, [sp, #4]
 802391e:	2b00      	cmp	r3, #0
 8023920:	d00d      	beq.n	802393e <__smakebuf_r+0x7a>
 8023922:	0028      	movs	r0, r5
 8023924:	230e      	movs	r3, #14
 8023926:	5ee1      	ldrsh	r1, [r4, r3]
 8023928:	f000 f89c 	bl	8023a64 <_isatty_r>
 802392c:	2800      	cmp	r0, #0
 802392e:	d006      	beq.n	802393e <__smakebuf_r+0x7a>
 8023930:	2203      	movs	r2, #3
 8023932:	89a3      	ldrh	r3, [r4, #12]
 8023934:	4393      	bics	r3, r2
 8023936:	001a      	movs	r2, r3
 8023938:	2301      	movs	r3, #1
 802393a:	4313      	orrs	r3, r2
 802393c:	81a3      	strh	r3, [r4, #12]
 802393e:	89a0      	ldrh	r0, [r4, #12]
 8023940:	4307      	orrs	r7, r0
 8023942:	81a7      	strh	r7, [r4, #12]
 8023944:	e7cb      	b.n	80238de <__smakebuf_r+0x1a>
 8023946:	46c0      	nop			; (mov r8, r8)
 8023948:	08022bc9 	.word	0x08022bc9

0802394c <memchr>:
 802394c:	b2c9      	uxtb	r1, r1
 802394e:	1882      	adds	r2, r0, r2
 8023950:	4290      	cmp	r0, r2
 8023952:	d101      	bne.n	8023958 <memchr+0xc>
 8023954:	2000      	movs	r0, #0
 8023956:	4770      	bx	lr
 8023958:	7803      	ldrb	r3, [r0, #0]
 802395a:	428b      	cmp	r3, r1
 802395c:	d0fb      	beq.n	8023956 <memchr+0xa>
 802395e:	3001      	adds	r0, #1
 8023960:	e7f6      	b.n	8023950 <memchr+0x4>
	...

08023964 <__malloc_lock>:
 8023964:	b510      	push	{r4, lr}
 8023966:	4802      	ldr	r0, [pc, #8]	; (8023970 <__malloc_lock+0xc>)
 8023968:	f7ff fa0d 	bl	8022d86 <__retarget_lock_acquire_recursive>
 802396c:	bd10      	pop	{r4, pc}
 802396e:	46c0      	nop			; (mov r8, r8)
 8023970:	2000022c 	.word	0x2000022c

08023974 <__malloc_unlock>:
 8023974:	b510      	push	{r4, lr}
 8023976:	4802      	ldr	r0, [pc, #8]	; (8023980 <__malloc_unlock+0xc>)
 8023978:	f7ff fa06 	bl	8022d88 <__retarget_lock_release_recursive>
 802397c:	bd10      	pop	{r4, pc}
 802397e:	46c0      	nop			; (mov r8, r8)
 8023980:	2000022c 	.word	0x2000022c

08023984 <_free_r>:
 8023984:	b570      	push	{r4, r5, r6, lr}
 8023986:	0005      	movs	r5, r0
 8023988:	2900      	cmp	r1, #0
 802398a:	d010      	beq.n	80239ae <_free_r+0x2a>
 802398c:	1f0c      	subs	r4, r1, #4
 802398e:	6823      	ldr	r3, [r4, #0]
 8023990:	2b00      	cmp	r3, #0
 8023992:	da00      	bge.n	8023996 <_free_r+0x12>
 8023994:	18e4      	adds	r4, r4, r3
 8023996:	0028      	movs	r0, r5
 8023998:	f7ff ffe4 	bl	8023964 <__malloc_lock>
 802399c:	4a1d      	ldr	r2, [pc, #116]	; (8023a14 <_free_r+0x90>)
 802399e:	6813      	ldr	r3, [r2, #0]
 80239a0:	2b00      	cmp	r3, #0
 80239a2:	d105      	bne.n	80239b0 <_free_r+0x2c>
 80239a4:	6063      	str	r3, [r4, #4]
 80239a6:	6014      	str	r4, [r2, #0]
 80239a8:	0028      	movs	r0, r5
 80239aa:	f7ff ffe3 	bl	8023974 <__malloc_unlock>
 80239ae:	bd70      	pop	{r4, r5, r6, pc}
 80239b0:	42a3      	cmp	r3, r4
 80239b2:	d908      	bls.n	80239c6 <_free_r+0x42>
 80239b4:	6821      	ldr	r1, [r4, #0]
 80239b6:	1860      	adds	r0, r4, r1
 80239b8:	4283      	cmp	r3, r0
 80239ba:	d1f3      	bne.n	80239a4 <_free_r+0x20>
 80239bc:	6818      	ldr	r0, [r3, #0]
 80239be:	685b      	ldr	r3, [r3, #4]
 80239c0:	1841      	adds	r1, r0, r1
 80239c2:	6021      	str	r1, [r4, #0]
 80239c4:	e7ee      	b.n	80239a4 <_free_r+0x20>
 80239c6:	001a      	movs	r2, r3
 80239c8:	685b      	ldr	r3, [r3, #4]
 80239ca:	2b00      	cmp	r3, #0
 80239cc:	d001      	beq.n	80239d2 <_free_r+0x4e>
 80239ce:	42a3      	cmp	r3, r4
 80239d0:	d9f9      	bls.n	80239c6 <_free_r+0x42>
 80239d2:	6811      	ldr	r1, [r2, #0]
 80239d4:	1850      	adds	r0, r2, r1
 80239d6:	42a0      	cmp	r0, r4
 80239d8:	d10b      	bne.n	80239f2 <_free_r+0x6e>
 80239da:	6820      	ldr	r0, [r4, #0]
 80239dc:	1809      	adds	r1, r1, r0
 80239de:	1850      	adds	r0, r2, r1
 80239e0:	6011      	str	r1, [r2, #0]
 80239e2:	4283      	cmp	r3, r0
 80239e4:	d1e0      	bne.n	80239a8 <_free_r+0x24>
 80239e6:	6818      	ldr	r0, [r3, #0]
 80239e8:	685b      	ldr	r3, [r3, #4]
 80239ea:	1841      	adds	r1, r0, r1
 80239ec:	6011      	str	r1, [r2, #0]
 80239ee:	6053      	str	r3, [r2, #4]
 80239f0:	e7da      	b.n	80239a8 <_free_r+0x24>
 80239f2:	42a0      	cmp	r0, r4
 80239f4:	d902      	bls.n	80239fc <_free_r+0x78>
 80239f6:	230c      	movs	r3, #12
 80239f8:	602b      	str	r3, [r5, #0]
 80239fa:	e7d5      	b.n	80239a8 <_free_r+0x24>
 80239fc:	6821      	ldr	r1, [r4, #0]
 80239fe:	1860      	adds	r0, r4, r1
 8023a00:	4283      	cmp	r3, r0
 8023a02:	d103      	bne.n	8023a0c <_free_r+0x88>
 8023a04:	6818      	ldr	r0, [r3, #0]
 8023a06:	685b      	ldr	r3, [r3, #4]
 8023a08:	1841      	adds	r1, r0, r1
 8023a0a:	6021      	str	r1, [r4, #0]
 8023a0c:	6063      	str	r3, [r4, #4]
 8023a0e:	6054      	str	r4, [r2, #4]
 8023a10:	e7ca      	b.n	80239a8 <_free_r+0x24>
 8023a12:	46c0      	nop			; (mov r8, r8)
 8023a14:	20000090 	.word	0x20000090

08023a18 <_read_r>:
 8023a18:	b570      	push	{r4, r5, r6, lr}
 8023a1a:	0004      	movs	r4, r0
 8023a1c:	0008      	movs	r0, r1
 8023a1e:	0011      	movs	r1, r2
 8023a20:	001a      	movs	r2, r3
 8023a22:	2300      	movs	r3, #0
 8023a24:	4d05      	ldr	r5, [pc, #20]	; (8023a3c <_read_r+0x24>)
 8023a26:	602b      	str	r3, [r5, #0]
 8023a28:	f7fc fe89 	bl	802073e <_read>
 8023a2c:	1c43      	adds	r3, r0, #1
 8023a2e:	d103      	bne.n	8023a38 <_read_r+0x20>
 8023a30:	682b      	ldr	r3, [r5, #0]
 8023a32:	2b00      	cmp	r3, #0
 8023a34:	d000      	beq.n	8023a38 <_read_r+0x20>
 8023a36:	6023      	str	r3, [r4, #0]
 8023a38:	bd70      	pop	{r4, r5, r6, pc}
 8023a3a:	46c0      	nop			; (mov r8, r8)
 8023a3c:	20000234 	.word	0x20000234

08023a40 <_fstat_r>:
 8023a40:	2300      	movs	r3, #0
 8023a42:	b570      	push	{r4, r5, r6, lr}
 8023a44:	4d06      	ldr	r5, [pc, #24]	; (8023a60 <_fstat_r+0x20>)
 8023a46:	0004      	movs	r4, r0
 8023a48:	0008      	movs	r0, r1
 8023a4a:	0011      	movs	r1, r2
 8023a4c:	602b      	str	r3, [r5, #0]
 8023a4e:	f7fc feb9 	bl	80207c4 <_fstat>
 8023a52:	1c43      	adds	r3, r0, #1
 8023a54:	d103      	bne.n	8023a5e <_fstat_r+0x1e>
 8023a56:	682b      	ldr	r3, [r5, #0]
 8023a58:	2b00      	cmp	r3, #0
 8023a5a:	d000      	beq.n	8023a5e <_fstat_r+0x1e>
 8023a5c:	6023      	str	r3, [r4, #0]
 8023a5e:	bd70      	pop	{r4, r5, r6, pc}
 8023a60:	20000234 	.word	0x20000234

08023a64 <_isatty_r>:
 8023a64:	2300      	movs	r3, #0
 8023a66:	b570      	push	{r4, r5, r6, lr}
 8023a68:	4d06      	ldr	r5, [pc, #24]	; (8023a84 <_isatty_r+0x20>)
 8023a6a:	0004      	movs	r4, r0
 8023a6c:	0008      	movs	r0, r1
 8023a6e:	602b      	str	r3, [r5, #0]
 8023a70:	f7fc feb6 	bl	80207e0 <_isatty>
 8023a74:	1c43      	adds	r3, r0, #1
 8023a76:	d103      	bne.n	8023a80 <_isatty_r+0x1c>
 8023a78:	682b      	ldr	r3, [r5, #0]
 8023a7a:	2b00      	cmp	r3, #0
 8023a7c:	d000      	beq.n	8023a80 <_isatty_r+0x1c>
 8023a7e:	6023      	str	r3, [r4, #0]
 8023a80:	bd70      	pop	{r4, r5, r6, pc}
 8023a82:	46c0      	nop			; (mov r8, r8)
 8023a84:	20000234 	.word	0x20000234

08023a88 <_init>:
 8023a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023a8a:	46c0      	nop			; (mov r8, r8)
 8023a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023a8e:	bc08      	pop	{r3}
 8023a90:	469e      	mov	lr, r3
 8023a92:	4770      	bx	lr

08023a94 <_fini>:
 8023a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023a96:	46c0      	nop			; (mov r8, r8)
 8023a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023a9a:	bc08      	pop	{r3}
 8023a9c:	469e      	mov	lr, r3
 8023a9e:	4770      	bx	lr
