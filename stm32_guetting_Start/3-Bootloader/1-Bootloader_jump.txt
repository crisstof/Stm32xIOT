*****************************************************************************************************************************
******************************Mise en place de la structure******************************************************************
*****************************************************************************************************************************
Microcontrôleur Nucleo-L476RG.(Flash:1024KB  RAM:96KB  RAM2:32KB)
Microcontrôleur Nucleo-L073RZ.(Flash:192KB  RAM:20KB)
Microcontrôleur L476ZG
--------------------------------------------------------------------------------------------
29/08/2022 Nous n'avons pas fait de bootloader avec atollic
           Nous continuons avec CubeMX pour la config et CubeIDE sur le développement
           pour pouvoir revenir sur atollic et créer le bootloader
           Peut être que nous allons utiliser le stm32L476RG à terme au lieu de stm32L073RZ 
	   car c'est sur celui-ci qu'on travaille au lieu de prendre le tuto.
---------------------------------------------------------------------------------------------
  création du projet sur cubeMX et CubeIDE
2-test du programme Blinkled
STM32L073RZTX_FLASH.Id
----------------------
Min_Heap_Size = 0x200; /* required amount of heap */
_Min_Stack_Size = 0x400; /* required amount of stack */

/* Memories definition */
MEMORY
{
  RAM    (xrw)    : ORIGIN = 0x20000000,   LENGTH = 20K
  FLASH    (rx)    : ORIGIN = 0x8000000,   LENGTH = 192K
}
main.c
------
--------------------------Travaux sur la création d'un bootloader--------------------------------------------------------------------------------------------
===================
TEST STM32 BlinkLed
===================
main.c
/* Includes */
#include <stddef.h>
#include "stm32l0xx.h"

/*Include blink led*/
#include "stm32l0xx_hal.h" //Delay
#include "stm32l0xx_hal_gpio.h"
#include "stm32l0xx_hal_gpio_ex.h"

/* Private macro */
/* Private variables */
/* Variable statique */
static GPIO_InitTypeDef init ;//variable de ce type pour lâ€™initialisation

/* Private function prototypes */
/* Private functions */

/**
**===========================================================================
**
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
  uint32_t ii = 0;

  /* TODO - Add your application code here */
  HAL_Init() ; //Initialisation comme la prise en compte des fonctions comme le Delay.
  	   // SystemClock_config();
  	    __HAL_RCC_GPIOA_CLK_ENABLE(); //active l'horloge du GPIOA

  	    /*Initialise le port */
  	    init.Mode = GPIO_MODE_OUTPUT_PP  ;
  	    init.Pull = GPIO_PULLUP;
  	    init.Speed = GPIO_SPEED_FREQ_HIGH ;//HIGH, MEDIUM
  	    init.Pin = GPIO_PIN_5 ; //Led2
  	    //INITIALISATION
  	    HAL_GPIO_Init(GPIOA, &init) ;

  while (1)
  {
       ii++;
       HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
       HAL_Delay(200);//200ms
  }

  return 0;
}

------------------------------------------------------------------------------------------------------------------------------------------------
Nothing to build for bootloader debug configuration > debugger > segger J-Link
Ici nous avons une application simple mais pas encore de bootloader
------------------------------------------------------------------------------------------------------------------------------------------------
CHERCHONS COMMENT UTILISER LE BOOTLOADER
------------------------------------------------------------------------------------------------------------------------------------------------
TEST1|(1-Bootloader_jump.docx)
*********************************************************************************************
*********************************************************************************************
création d'une variable dans la RAM et non dans la mémoire pour (je ne sais pas encore)
					et dans la mémoire Flash 
*********************************************************************************************
*********************************************************************************************
stm32_flash.Id:
 } >FLASH
  /*ajout********************************************************/
  /*this will place my named section at given address Addme*****/
 /*Nous plaçons de nom de section pour donner l'adresse*/
 /*.myBufBlockRAM 0x20000100 (NOLOAD): pour le bin plus léger 
 mais du coup l'adresse saute*/
 .myBufBlockRAM 0x20000100 :
 {
   KEEP(*(.myBufSectionRAM)) /*keep my variable even if not referenced*/
 } > RAM

.myBufFlash 0x8001000 :
 {
   KEEP(*(.myBufBlockFLASH)) /*keep my variable even if not referenced*/
 } >FLASH
 /**************************************************************/

  /* The program code and other data goes into FLASH */
  .text : 

main.c:
/*USER CODE BEGIN PV*/
unsigned char __attribute ((section(".myBufSectionRAM"))) buf_ram[128];

const unsigned char __attribute__ ((section(".myBufBlockFLASH"))) buf_flash[10] = {
		0,1,2,3,4,5,6,7,8,9
};

/*USER CODE END PV*/
/* Variable statique */
static GPIO_InitTypeDef init ;//initialisation
int main(void){
HAL_Init();
SystemClock_Config();
 /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_USART4_UART_Init();
  /* USER CODE BEGIN 2 */
   /*AJOUT CODE*/
    // SystemClock_config();
    __HAL_RCC_GPIOA_CLK_ENABLE(); //active l'horloge du GPIOA
    /*Initialise le port */
     init.Mode = GPIO_MODE_OUTPUT_PP  ;
     init.Pull = GPIO_PULLUP;
     init.Speed = GPIO_SPEED_FREQ_HIGH ;//HIGH, MEDIUM
     init.Pin = GPIO_PIN_5 ; //Led2
     //INITIALISATION
     HAL_GPIO_Init(GPIOA, &init) ;
    /*FIN AJOUT CODE*/
while (1)
  {
 	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	  HAL_Delay(200);//200ms
  }
}
*****************************************************************************************************************
TEST2|(1-Bootloader_jump.docx)
*********************************************************************************************
*********************************************************************************************
Ajouter une mémoire pour utiliser le programme ledBlink comme un bootloader
*********************************************************************************************
*********************************************************************************************
stm32_flash.Id:
/* Memories definition */
MEMORY
{
  RAM    (xrw)    : ORIGIN = 0x20000000,   LENGTH = 20K
  FLASH    (rx)    : ORIGIN = 0x8000000,   LENGTH = 160K
  MY_MEMORY (rx)    : ORIGIN = 0x8018000,  LENGTH = 32K /*ajout puis réduire la mémoire FLASH 192-32=160K*/
}
ajouter:
-------
}>FLASH
/*ajout*/
/*TEST 2*/

  .mysection :
{
 	. = ALIGN(4);
 	__mysection_start__ = .;
 	*(.mysection*)
 	__mysection_end__ = .;
 } >MY_MEMORY
 
 /*check if MY_MEMORY usage exceeds MY_MEMORY size*/
 ASSERT(LENGTH(MY_MEMORY) >= (__mysection_end__ - __mysection_start__), "MY_MEMORY memory overflowed !")
 
Cela ajoute  MY_MEMORY start@:0x08018000 end@:0x08020000 Size:32KB Used:0B Usage0,00%

main.c:
void __attribute__((section(".mysection"))) Blink(uint32_t dlyticks);
static ptrF functions[] =
{
		Blink
};
/* USER CODE BEGIN 0 */
void __attribute__((section(".mysection"))) Blink(uint32_t dlyticks)
{	/*Initialise le port */
	  	    init.Mode = GPIO_MODE_OUTPUT_PP  ;
	  	    init.Pull = GPIO_PULLUP;
	  	    init.Speed = GPIO_SPEED_FREQ_HIGH ;//HIGH, MEDIUM
	  	    init.Pin = GPIO_PIN_5 ; //Led2
	  	    //INITIALISATION
	  	    HAL_GPIO_Init(GPIOA, &init) ;
                    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
                    HAL_Delay(dlyticks);
}
void __attribute__((__section__(".RamFunc"))) TurnOnLed(GPIO_PinState PinState)
{
   	if(PinState != GPIO_PIN_RESET)
   	{
   		GPIOA->BSRR = (uint32_t)  GPIO_PIN_5;
   	}
   	else
   	{
   		GPIOA->BRR = (uint32_t)  GPIO_PIN_5;
   	}
}
/* USER CODE END 0 */

dans le while:
-------------
(*functions[0])(200);
TurnOnLed(GPIO_PIN_SET);

Mais il y a une toute petite led clignotante (ne fonctionne pas très bien)
Mais l'important c'était la création dans la mémoire MY_MEMORY



************************************************************************************************************************************************
************************************************JUMP BOOTLOADER to APPLICATION******************************************************************
************************************************************************************************************************************************
Nouveau projet > utiliser Pa9(usartTX) Pa10(usartRX) Enregistrer (Enable USART)(asynchronous)
Nous voulons une redirection de printf vers USART1
[Generate CubeMxIDE]       !!!!!!!!!!!!PROGRAMME BOOTLOADER!!!!!!!!!!!!!!
nous devons écrire la fonction et inclure stdio.h et appeler le app_reset_handler
STM32L073RZTX_FLASH.Id
********************FLASHxxx.Id******************************************************
/* Memories definition */
MEMORY
{
  RAM    (xrw)    : ORIGIN = 0x20000000,   LENGTH = 20K
  FLASH    (rx)    : ORIGIN = 0x8000000,   LENGTH = 64K /*Bootloader for 64KB au lieu de 192 au total*/
 
}

********************main.c******************************************************
/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usart.h"
#include "gpio.h"
#include "stdio.h" //ajout bootloader jump

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
/* Variable statique */
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define MAJOR 0 //Major Version Number //ajout bootloader jump
#define MINOR 1 //Minor Version Number //ajout bootloader jump
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
const uint8_t BL_Version[2] = {MAJOR, MINOR};
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
//static void MX_GPIO_Init(void);
//static void MX_USART2_UART_Init(void);
//static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
static void goto_application(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();//Initialisation comme la prise en compte des fonctions comme le Delay.

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_USART4_UART_Init();//prise usb utilisé pour le transfert du code
  /* USER CODE BEGIN 2 */
   /*AJOUT CODE*/
  printf("Starting Bootloader (%d.%d)\n ", BL_Version[0],BL_Version[1]);
  HAL_GPIO_WritePin( GPIOA, GPIO_PIN_5, GPIO_PIN_SET); //Green LED ON
  HAL_Delay(3000); //9 Seconds Delay
  goto_application();

    /*FIN AJOUT CODE*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
/************************************************************************/
/**
 * @brief Print the characters to UART (printf)
 * @retval int
 */
#ifdef __GNUC__
/*with GCC small printf (option LD Linket->Library->Small printf set to 'Yes')
 * calls __io_putchar */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /*__GNUC__*/
{
	/*Pace your implementation of fputc here*/
	/* e.g. write a character to the UART1 and loop until the end of transmission*/
	HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, HAL_MAX_DELAY);

	//HAL_UART_Transmit(&huart1, (uint8_t *)rxBuffer, strlen(rxBuffer), 500);

	return ch;
}

static void goto_application(void)
{
  printf("Gonna Jump to Application\n");
  HAL_Delay(2000);
  printf("calling application\n");
  HAL_Delay(2000);
 // void (*app_reset_handler) (void) = (void*) (*(volatile uint32_t *) (0x08000000 + 4));
    void (*app_reset_handler) (void) = (void*) (*(volatile uint32_t *) (0x08020000 + 4));
  //so they have to write stack address manually using the __set_MSP function
  //other startp_stm32l073rztx.s l62 reset handle sp (stack pointer)

  __set_MSP( ( *(volatile uint32_t *) 0x08000000) );

  HAL_GPIO_WritePin( GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //Green LED OFF


  //Let's call the application's reset handler using this function pointer
  app_reset_handler();//call the app reset handler
}







/************************************************************************/
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
************************************************FIN BOOTLOADER ******************************************************************
---------------------------------------------------------------------------------------------------------------------------------
Création  de l'application
New>STM32 Project > NUCLEO-L073RZ >application dans le répertoire Application

--------------PROGRAMME APPLICATION!!!!!!!!!!!!!!-----------------------------------------------
==============================Maintenant la bootloader est prêt mais nous avons déréférencer l'adresse==============
Nous devons créer l'application et la placer en mémoire
STM32L073RZTX_FLASH.Id: nous avons planifier 64KB pour le bootloader
pour l'application on prend le reste ou autre:
/* Memories definition */
MEMORY
{
  RAM    (xrw)    : ORIGIN = 0x20000000,   LENGTH = 20K
  FLASH    (rx)    : ORIGIN = 0x8020000,   LENGTH = 128K /*on prend le reste 192-64=128*/
}
==================CREATION DE L'application============================================================================
************************MAIN.C*****************************************************************************************
/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usart.h"
#include "gpio.h"
#include "stdio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define MAJOR 0 //Major Version Number
#define MINOR 2 //Minor Version Number

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
 UART_HandleTypeDef huart1;
 UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
 const uint8_t APP_Version[2] = {MAJOR, MINOR};
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

//static void MX_GPIO_Init(void);
//static void MX_USART2_UART_Init(void);
//static void MX_USART1_UART_Init(void);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_USART1_UART_Init();
  MX_USART4_UART_Init();
  /* USER CODE BEGIN 2 */
  printf("Starting Application youpi (%d.%d)\r\n", APP_Version[0], APP_Version[1] );
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin( GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	  HAL_Delay(5000);
	  HAL_GPIO_WritePin( GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  HAL_Delay(5000);

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
/**
 * @brief Print the characters to UART (printf)
 * @retval int
 */
#ifdef __GNUC__
/*with GCC small printf (option LD Linket->Library->Small printf set to 'Yes')
 * calls __io_putchar */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /*__GNUC__*/
{
	/*Pace your implementation of fputc here*/
	/* e.g. write a character to the UART3 and loop until the end of transmission*/
	//HAL_UART_Transmit(&huart1, (unint8_t *)&ch, 1, HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart1,(uint8_t *)&ch, 1, HAL_MAX_DELAY);

	//HAL_UART_Transmit(&huart1, (uint8_t *)rxBuffer, strlen(rxBuffer), 500);

	return ch;
}





/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */








------------------------------
le bootloader ne peut pas appeler l'application reset handler. Au lieu nous pouvons appeler le bootloaders reset handler
------------------------------------------------------------------------------------------------------------------------
MAP MEMORY   192K au total
bootloader:
MEMORY
{
  RAM    (xrw)    : ORIGIN = 0x20000000,   LENGTH = 20K
  FLASH    (rx)    : ORIGIN = 0x800000,   LENGTH = 64K
}
application:
MEMORY
{
  RAM    (xrw)    : ORIGIN = 0x20000000,   LENGTH = 20K
  FLASH    (rx)    : ORIGIN = 0x802000,   LENGTH = 128K   //192-64=128bootloader
}

VECTOR
Core/Src/system_stm32l0xx.c
décomment la ligne /* #define USER_VECT_TAB_ADDRESS */
changer l'offset de la FLASH pour 0x8020000
#else
#define VECT_TAB_BASE_ADDRESS   FLASH_BASE      /*!< Vector Table base address field.
                                                     This value must be a multiple of 0x200. */
#define VECT_TAB_OFFSET         0x00020000U     /*!< Vector Table base offset field.
                                                     This value must be a multiple of 0x200. */!!au début c'etait 0x08040000 et 
Maintenant nous pointons sur 0x8020000                                                                            400000U provoque une erreur

------------------------------------------------------------------
--------------------Connexion-------------------------------------
CP2102 Tx:noir  Rx:blanc
Carte Nucleo: pour l'uart  USART1 et USART2
USART1 pour le printf:  uart1  PA10RX et PA9TX   
USART2 connexion JLINK: uart2  PA2TX     PA3RX
(COM5) JLINK et (COM3) CP2102

carte nucleo
CN9
.
.
.
.
.
.
.
.
.
. 
. PA9TX -----blanc
.
.
.
.
.
. PA10RX----noir
.
.


------------------------------------------------------------------
Comme logiciel uart nous avons
Termite (c 'est mieux)

Tera Term VT
RealTerm
Revenons un instant sur le déférencement au total: 192KB
bootloader  FLASH    (rx)    : ORIGIN = 0x800000,   LENGTH = 64K
application FLASH    (rx)    : ORIGIN = 0x802000,   LENGTH = 128K

changer l'offset de la FLASH pour 0x8020000 pour pointer sur cette adresse
#define VECT_TAB_OFFSET         0x00020000U 

discussion:
----------
sur un octet de 0000 0000 à 1111 1111 nous pouvons coder 2p8 = 256 signes ou lettres
disque dure kilo binaire (pc en octet base 2) et kilo décimal (base 10 correspond à 1000)
0100 0000 0000 bits donc 100 0000 0000 bits correspond à 1024  (2p10)
0100 0000 0000   (1KB) sinon (2KB) 1000 0000 0000
  4   0     0                       8    0     0  (1024 * 2)=2048
1 kibi = 210 = 1 024
1 mebi = 220 = 1 048 576
1 gibi = 230 = 1 073 741 824
1 tebi = 240 = 1 099 511 627 776

La flash memory commence à 0x0800 0000 jusqu'à 0x0810 0000
le boot commence à 0x0800 0000 (FLASH) on prend 128KB (on sait 1KB = 1024)
                                                128*1024=131072= 0010 0000 0000 0000 0000
8 octets
0000 1000 0000 0000 . 0000 0000 0000 0000 
               0010 . 0000 0000 0000 0000  1024*128=131072=0010 0000 0000 0000 0000   (attention dans les puissance [nombre de bit-1 pour le 0])  
              (1 2 4 8) (16 32 64 128) (256 512 1024 2048) (4096 8192 16384 32768) (65536) (18bits-1=17bits [131072=2p17 / 1024 = 128KB])

0x0802 0000 = 0000 1000 0000 0010 . 0000 0000 0000 0000 
et de 0x802 0000 à 0x0810 0000 :  0x0810 0000 - 0x802 0000 = 917 504 / 1024 = 896 KB il reste pour l'application

Pour notre calcul 64KB à partir de 0x0800.0000   64*1024=65536 2p16=65536
 0000 1000 0000 0001 . 0000 0000 0000 0000 = 17-1=16bit = 2p16 = 65536  jusqu'à 0x0801.0000
                       1111 1111 1111 1111 = 65536 
 la suite sur 192-64=128kb * 1024 = 131072
 0x0802.0000
 0000 1000 0000 0010 . 0000 0000 0000 0000 = 18-1=2p17=131072 il faut décaler de 0x0802.0000
 ici l'application commence
La RAM on ne la touche pas elle est volatile et sert au fonctionnement

--------------------------------------------------------------------------------
Maintenant il faut le .bin de la compilation
C/C++ Build > setting > Tool Setting > MCU Build output 
cocher: convert to binary fil (-O binary) et prenez peut être hex aussi.
*****************************************************************************************************************************************************






















