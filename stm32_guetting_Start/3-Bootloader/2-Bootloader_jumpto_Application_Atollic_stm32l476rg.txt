*****************************************************************************************************************************
******************************Mise en place d'un bootloader******************************************************************
*****************************************************************************************************************************
Microcontrôleur Nucleo-L476RG.(Flash:1024KB  RAM:96KB  RAM2:32KB)
Microcontrôleur Nucleo-L073RZ.(Flash:192KB  RAM:20KB)
Microcontrôleur L476ZG
--------------------------------------------------------------------------------------------
Reprise du programme d'origine du STM32L073RZ CubeMXIDE vers Atollic en STM32L476RG
--------------------------------------------------------------------------------------------
FAIRE UN JUMP BOOTLOADER VERS APPLICATION
*****************************************
stm32l4_flash.Id
----------------
FLASH (rx)      : ORIGIN = 0x08000000, LENGTH = 128K /*origine 1024K  1024-128= 896 */     Bootloader
FLASH (rx)      : ORIGIN = 0x08020000, LENGTH = 896K  /* 1024-128=896  */                  Application
La flash memory commence à 0x0800 0000 jusqu'à 0x0810 0000 Size: 1024KB
Pour notre calcul 128KB à partir de 0x0800.0000   128*1024=131072 2p16=65536  262144  983040
 0000 1000 0000 0010 . 0000 0000 0000 0000 = 18-1=17bit = 2p17 = 131072  jusqu'à 0x0802.0000
                   1   1111 1111 1111 1111 = 131072 = 128KB
 la suite sur 1024-128=896KB * 1024 = 917 504
 le programme application commence à 0x0802.0000
 0x0802.0000 : 0000 1000 0000 0010 . 0000 0000 0000 0000 0000 = 2 149 580 800 dec
------------------------------------------------------------------------------------------------- 
En définitif l'application sur cubeIDE est fausse
Pour notre calcul 64KB à partir de 0x0800.0000   64*1024=65536 2p16=65536
 0000 1000 0000 0001 . 0000 0000 0000 0000 = 17-1=16bit = 2p16 = 65536  jusqu'à 0x0801.0000
                       1111 1111 1111 1111 = 65536 
 la suite sur 192-64=128kb * 1024 = 131072
l'application devrait commencer à 0x0801.0000   [Mains non l'application exécute les adresses paire!!!]
-------------------------------------------------------------------------------------------------
Nous pouvons jumper dans un autre secteur comme le 5 avec cette exemple:
l'application serait dans le secteur 5
FLASH (rx)       : ORIGIN = 0x08020000, LENGTH = 5*128K  /* Sector 5-9 */
0100 0000 0000   (1KB): 2p11-1=1024 sinon (2KB) 1000 0000 0000:2p11=2048/1024=2KB (1024 de plus) 
1 kibi = 210 = 1 024
1 mebi = 220 = 1 048 576
1 gibi = 230 = 1 073 741 824
1 tebi = 240 = 1 099 511 627 776
-------------------------------------------------------------------------------------------------
    COMMENT FAIRE UN JUMP ?
    -----------------------
**********************************************************************************************
générique:
 <peripheral de-init>
    ...
    __disable_irq(); // Note: remember to enable IRQ in application
    __DSB();
    __ISB();
    uint32_t mainStackPointer = *(volatile uint32_t *)(nAppAdr);
    __set_MSP(mainStackPointer);
    uint32_t programResetHandlerAddress = *(volatile uint32_t *) (nAppAdr + 4);
    void (* programResetHandler)(void) = (void (*)(void)) programResetHandlerAddress;
    programResetHandler();
**********************************************************************************************
/*****exemple de JUMP TO APPLICATION*****/
bool bootloader_jump_to_user_app(uint32_t nAppAdr)
{
bool ret = true;
void(*app_reset_handler)();

//shutdown any tasks remaining
HAL_RCC_DeInit();// to turn off the PLL and set the clock to it's default state
HAL_DeInit();// to disable all the peripherals
SysTick->CTRL = 0;//to turn off the systick
SysTick->LOAD = 0;
SysTick->VAL = 0;
//disable interrupts
__set_PRIMASK(1);
__disable_irq();.
SCB->VTOR = nAppAdr;//change this

//configure the MSP by reading the value from the base address 
uint32_t msp_value = *(__IO uint32_t*) nAppAdr; //variable de l'adresse de base en paramètre
__set_MSP(msp_value);
uint32_t resethandler_address = *(__IO uint32_t*) (nAppAdr + 4);
//app_reset_handler = (void*)resethandler_address;
app_reset_handler = (void (*)(void)) (*((uint32_t*)(resethandler_address)));
//Une exception s'est produite à PC=0x1478048, LR=0x8000f85 "
Correction: resethandler_addresscontient déjà l'adresse, 
mais vous prenez la valeur à l'adresse et sautez ainsi "dans l'inconnu". Ça devrait être juste :
app_reset_handler = (void (*)(void)) (resethandler_address);

//jump to reset handler of the user app.
app_reset_handler();
return ret;
}
**********************************************************************************************
/*****exemple embtronics*****/
static void goto_application(void)
{
  printf("Gonna Jump to Application\n");
  HAL_Delay(2000);
  printf("calling application\n");
  HAL_Delay(2000);
    //void (*app_reset_handler) (void) = (void*) (*(volatile uint32_t *) (0x08020000 + 4));
    void (*app_reset_handler) (void) = (void(*) (void)) (*(volatile uint32_t *) (0x08020000 + 4));//plutot comme ça sinon erreur sur atollic
  //so they have to write stack address manually using the __set_MSP function
  //other startp_stm32l073rztx.s l62 reset handle sp (stack pointer)

  __set_MSP( ( *(volatile uint32_t *) 0x08000000) );

  HAL_GPIO_WritePin( GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //Green LED OFF


  //Let's call the application's reset handler using this function pointer
  app_reset_handler();//call the app reset handler
}

**********************************************************************************************
/*****exemple CNS*****/
APPLICATION_ADDRESS: 0x08020000
/*********************/
/**déclaration:**/
typedef  void (*pFunction)(void);

pFunction JumpToApplication;
uint32_t JumpAddress;


// Start application software
  if(((*(__IO uint32_t*)APPLICATION_ADDRESS) & 0x2FFE0000 ) == 0x20000000)
  {
    // Set application address
    JumpAddress       = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
    JumpToApplication = (pFunction) JumpAddress;

    // Init application stack pointer
    __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);

    // Start application
    JumpToApplication();
  }

  // We never should reach here
  while(1) { NVIC_SystemReset(); }
}
**********************************************************************************************
Résumons:
/********************************/
APPLICATION_BOOT   : 0x08000000
APPLICATION_ADDRESS: 0x08020000
/*******************************/

Utilisation directement de l'adresse:
void (*app_reset_handler) (void) = (void(*) (void)) (*(volatile uint32_t *) (0x08020000 + 4));

// ils doivent donc écrire manuellement l'adresse de la pile à l'aide de 
//la fonction __set_MSP , other startp_stm32l073rztx.s l62 reset handle sp (pointeur de pile)
__set_MSP(( *(volatile uint32_t *) 0x08000000));// ou *(__IO uint32_t*) APPLICATION_ADDRESS=0x08020000??
//Start application/JumpToApplication
app_reset_handler();//call the app reset handler


sinon par variables interposées:
-------------------------------
typedef  void (*pFunction)(void);//pointeur vers structure
pFunction JumpToApplication; //=>void(*app_reset_handler) (void)
uint32_t JumpAddress;

if(((*(__IO uint32_t*)APPLICATION_ADDRESS) & 0x2FFE0000 ) == 0x20000000)
{
JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
JumpToApplication = (pFunction) JumpAddress 
/**/=>void(*JumpToApplication) (void) = (JumpToApplication) *(__IO uint32_t*) (0x08020000 + 4);/**/

 // Init application stack pointer
    __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);

    // Start application
    JumpToApplication();
}

comprehension 4 façon qui se rejoignent:
---------------
//configure the MSP by reading the value from the base address
 uint32_t mainStackPointer = *(volatile uint32_t *)(nAppAdr); //variable de l'adresse de base en paramètre
 uint32_t msp_value        = *(__IO uint32_t*)      nAppAdr; //variable de l'adresse de base en paramètre

 __set_MSP(mainStackPointer);
 __set_MSP(msp_value);
 __set_MSP(( *(volatile uint32_t *) 0x08000000))
 __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);//APPLICATION_ADDRESS: 0x08020000

[
 uint32_t programResetHandlerAddress = *(volatile uint32_t *) (nAppAdr + 4);
 uint32_t resethandler_address       = *(__IO uint32_t*) (nAppAdr + 4);
 uint32_t JumpAddress                = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);

 void (* programResetHandler)(void) = (void (*)(void)) programResetHandlerAddress;
 app_reset_handler = (void (*)(void)) (resethandler_address); //exception avec cette ligne:app_reset_handler = (void (*)(void)) (*((uint32_t*)(resethandler_address)));
 JumpToApplication = (pFunction) JumpAddress ce qui donne:
 uint32_t JumpAddress = void (*pFunction)(void) JumpAddress 

]
directement: void (*app_reset_handler) (void) = (void(*) (void)) (*(volatile uint32_t *) (0x08020000 + 4));

  


 //jump to reset handler of the user app.
 programResetHandler();//generique
 app_reset_handler();  //stack overflow
 app_reset_handler();  //embetronics
 JumpToApplication(); //cns

------------------------------------------------------------------------------------------------------
Discussion des bibliothèques
Problème il ne retrouvait pas les fonctions!!
alors il fallait inclure main.h car il embarque stm32l4xx_hal_conf.h via stm32l4xx_hal.h.
dans le main.h => #include "stm32l4xx_hal.h" qui utilise #include "stm32l4xx_hal_conf.h" 
qui redistribue toutes les bibliothèques HAL dans les autres fichiers qu'on peut créer comme usart{h,c}

Attention pour le retour de l'usart il faut bien le fichier syscall IO_PUTCHAR
------------------------------------------------------------------------------------------------------



************************************************************************************************************************************************
************************************************JUMP BOOTLOADER to APPLICATION******************************************************************
************************************************************************************************************************************************
avec l'UART
     !!!!!!!!!!!!CREATION PROGRAMME BOOTLOADER!!!!!!!!!!!!!!
*************main.h
*******************
#ifndef INC_MAIN_H_
#define INC_MAIN_H_

#ifdef __cplusplus
extern "C" {
#endif

#include "stm32l4xx_hal.h"

void Error_Handler(void);

/* Private defines -----------------------------------------------------------*/
#define B1_Pin GPIO_PIN_13
#define B1_GPIO_Port GPIOC
#define MCO_Pin GPIO_PIN_0
#define MCO_GPIO_Port GPIOH
#define USART_TX_Pin GPIO_PIN_2
#define USART_TX_GPIO_Port GPIOA
#define USART_RX_Pin GPIO_PIN_3
#define USART_RX_GPIO_Port GPIOA
#define LD2_Pin GPIO_PIN_5
#define LD2_GPIO_Port GPIOA
#define TMS_Pin GPIO_PIN_13
#define TMS_GPIO_Port GPIOA
#define TCK_Pin GPIO_PIN_14
#define TCK_GPIO_Port GPIOA
/* USER CODE BEGIN Private defines */

#ifdef __cplusplus
}
#endif
#endif /* INC_MAIN_H_ */

*************main.c
*******************
#include "main.h"
#include "usart.h"
#include "gpio.h"
#include "stdio.h"
#include <string.h>

#define MAJOR 0 //Major Version Number
#define MINOR 1 //Minor Version Number
const uint8_t BL_Version[2] = {MAJOR, MINOR};
void SystemClock_Config(void);
static void goto_application(void);
int main(void)
{
     HAL_Init() ; //Initialisation comme ma prise en compte des fonctions comme le Delay.
     SystemClock_Config();
     CV_GPIO_Init();
     CV_fputc_USART1_UART_Init();
     printf("Starting Bootloader (%d.%d)\n ", BL_Version[0],BL_Version[1]);
     HAL_GPIO_WritePin( GPIOA, GPIO_PIN_5, GPIO_PIN_SET); //Green LED ON
     HAL_Delay(3000); //9 Seconds Delay
     goto_application();
     while (1)
     {

     }
}

void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

#ifdef __GNUC__
/*with GCC small printf (option LD Linket->Library->Small printf set to 'Yes') * calls __io_putchar */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /*__GNUC__*/
{
	HAL_UART_Transmit(&huart1,(uint8_t *)&ch, 1, HAL_MAX_DELAY);
	return ch;
}

static void goto_application(void)
{
  printf("Gonna Jump to Application\n");
  HAL_Delay(2000);
  printf("calling application\n");
  HAL_Delay(2000);
   void (*app_reset_handler) (void) = (void(*)(void)) (*(volatile uint32_t *) (0x08020000 + 4));
   __set_MSP( ( *(volatile uint32_t *) 0x08020000) );
  HAL_GPIO_WritePin( GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //Green LED OFF
  app_reset_handler();//call the app reset handler
}

void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

*************syscalls.c
***********************
#include <sys/stat.h>
#include <stdlib.h>
#include <errno.h>
#include <stdio.h>
#include <signal.h>
#include <time.h>
#include <sys/time.h>
#include <sys/times.h>



/* Variables */
extern int __io_putchar(int ch) __attribute__((weak));
extern int __io_getchar(void) __attribute__((weak));


char *__env[1] = { 0 };
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
}

int _getpid(void)
{
	return 1;
}

int _kill(int pid, int sig)
{
	errno = EINVAL;
	return -1;
}

void _exit (int status)
{
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
	{
		*ptr++ = __io_getchar();
	}

return len;
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
	{
		__io_putchar(*ptr++);
	}
	return len;
}

int _close(int file)
{
	return -1;
}


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
	return 0;
}

int _isatty(int file)
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
	return 0;
}

int _open(char *path, int flags, ...)
{
	/* Pretend like we always fail */
	return -1;
}

int _wait(int *status)
{
	errno = ECHILD;
	return -1;
}

int _unlink(char *name)
{
	errno = ENOENT;
	return -1;
}

int _times(struct tms *buf)
{
	return -1;
}

int _stat(char *file, struct stat *st)
{
	st->st_mode = S_IFCHR;
	return 0;
}

int _link(char *old, char *new)
{
	errno = EMLINK;
	return -1;
}

int _fork(void)
{
	errno = EAGAIN;
	return -1;
}

int _execve(char *name, char **argv, char **env)
{
	errno = ENOMEM;
	return -1;
}

*************usart.h
***********************
#ifndef INC_USART_H_
#define INC_USART_H_

#ifdef __cplusplus
extern "C" {
#endif

#include "main.h"
extern UART_HandleTypeDef huart1;
void CV_fputc_USART1_UART_Init(void);
#ifdef __cplusplus
}
#endif
#endif /* INC_USART_H_ */


*************usart.c
********************
#include "usart.h"


UART_HandleTypeDef huart1;

void CV_fputc_USART1_UART_Init(void)
{
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }

}


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
  {
     /* USART1 clock enable */
  __HAL_RCC_USART1_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1; //GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  }

}

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

 if(uartHandle->Instance==USART1)
 {
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);

  }
}

*************gpio.h
*******************
#ifndef INC_GPIO_H_
#define INC_GPIO_H_

#ifdef __cplusplus
extern "C" {
#endif
#include "main.h"
void CV_GPIO_Init(void);
#ifdef __cplusplus
}
#endif
#endif /* INC_GPIO_H_ */

*************gpio.c
*******************
#include "gpio.h"
void CV_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

}

avec l'UART
     !!!!!!!!!!!!CREATION PROGRAMME APPLICATION!!!!!!!!!!!!!!
les sources sonr pratiquement les même
*************main.c
*******************
 printf("Starting Application (%d.%d)\n ", APP_Version[0],APP_Version[1]);
  while (1)
  {
	i++;
	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_5, GPIO_PIN_SET); //Green LED ON
	HAL_Delay(3000); //9 Seconds Delay
	HAL_GPIO_WritePin( GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //Green LED ON
	HAL_Delay(3000); //9 Seconds Delay
	printf("\nStarting\n\n");
  }
}
*************stm32l4_flash.Id
*****************************
MEMORY
{
  FLASH (rx)      : ORIGIN = 0x08020000, LENGTH = 896K /*1024-128=896*/
  RAM (xrw)       : ORIGIN = 0x20000000, LENGTH = 96K
  RAM2 (rw)       : ORIGIN = 0x10000000, LENGTH = 32K
  MEMORY_B1 (rx)  : ORIGIN = 0x60000000, LENGTH = 0K
}


*************system_stm32l4xx.c  [il faudra changer l'adresse]
*******************************
/* #define VECT_TAB_SRAM */
//#define VECT_TAB_OFFSET  0x00 /*!< Vector Table base offset field.
//                                   This value must be a multiple of 0x200. */
#define VECT_TAB_OFFSET  0x20000


sur cubeMXIDE

VECTOR
Core/Src/system_stm32l0xx.c
décomment la ligne /* #define USER_VECT_TAB_ADDRESS */
changer l'offset de la FLASH pour 0x8020000
#else
#define VECT_TAB_BASE_ADDRESS   FLASH_BASE      /*!< Vector Table base address field.
                                                     This value must be a multiple of 0x200. */
#define VECT_TAB_OFFSET         0x00020000U     /*!< Vector Table base offset field.
                                                     This value must be a multiple of 0x200. */!!au début c'etait 0x08040000 et 
Maintenant nous pointons sur 0x8020000                                                                            400000U provoque une erreur

------------------------------------------------------------------
--------------------Connexion-------------------------------------
CP2102 Tx:noir  Rx:blanc
Carte Nucleo: pour l'uart  USART1 et USART2
USART1 pour le printf:  uart1  PA10RX et PA9TX   
USART2 connexion JLINK: uart2  PA2TX     PA3RX
(COM5) JLINK et (COM3) CP2102

carte nucleo
CN9
.
.
.
.
.
.
.
.
.
. 
. PA9TX -----blanc
.
.
.
.
.
. PA10RX----noir
.
.


------------------------------------------------------------------
Comme logiciel uart nous avons
Termite (c 'est mieux pour le moment)
